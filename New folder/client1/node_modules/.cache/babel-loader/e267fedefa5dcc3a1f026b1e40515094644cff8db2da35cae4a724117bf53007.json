{"ast":null,"code":"var _jsxFileName = \"D:\\\\Downloads\\\\SriKumaranClinic\\\\frontend\\\\src\\\\components\\\\Doctors.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import { Calendar, Clock, FileText, Users, ChevronDown, Home, UserCircle, Hospital, CheckCircle, XCircle } from 'lucide-react';\n// import { useNavigate } from 'react-router-dom';\n// import { BASE_URL } from '../constants/constants';\n// import { toast } from \"react-hot-toast\";\n\n// const Button = ({ children, variant = 'primary', className = '', ...props }) => (\n//   <button\n//     className={`inline-flex items-center justify-center px-4 py-2 text-sm font-medium rounded-md shadow-sm transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 ${\n//       variant === 'primary'\n//         ? 'text-white bg-blue-600 hover:bg-blue-700 focus:ring-blue-500'\n//         : variant === 'outline'\n//         ? 'text-blue-600 border-blue-600 hover:bg-blue-50 focus:ring-blue-500'\n//         : 'text-blue-600 border-blue-600 hover:bg-blue-50 focus:ring-blue-500'\n//     } ${className}`}\n//     {...props}\n//   >\n//     {children}\n//   </button>\n// );\n\n// const Card = ({ children, className = '' }) => (\n//   <div className={`bg-white rounded-lg shadow-md ${className}`}>\n//     {children}\n//   </div>\n// );\n\n// const CardHeader = ({ children, icon: Icon }) => (\n//   <div className=\"px-4 py-5 border-b border-gray-200 sm:px-6 flex items-center justify-between\">\n//     {children}\n//     {Icon && <Icon className=\"h-5 w-5 text-blue-600 ml-2\" />}\n//   </div>\n// );\n\n// const CardTitle = ({ children }) => (\n//   <h3 className=\"text-lg leading-6 font-medium text-gray-900\">{children}</h3>\n// );\n\n// const CardContent = ({ children }) => (\n//   <div className=\"px-4 py-5 sm:p-6\">{children}</div>\n// );\n\n// const CardFooter = ({ children }) => (\n//   <div className=\"px-4 py-4 sm:px-6\">{children}</div>\n// );\n\n// const Input = ({ ...props }) => (\n//   <input\n//     className=\"mt-1 focus:ring-blue-500 focus:border-blue-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md px-1 h-6\"\n//     {...props}\n//   />\n// );\n\n// const Label = ({ children, htmlFor }) => (\n//   <label htmlFor={htmlFor} className=\"block text-sm font-medium text-gray-700\">\n//     {children}\n//   </label>\n// );\n\n// const Select = ({ children, ...props }) => (\n//   <select\n//     className=\"mt-1 block w-full pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md\"\n//     {...props}\n//   >\n//     {children}\n//   </select>\n// );\n\n// export default function DoctorDashboard() {\n//   const [showAppointments, setShowAppointments] = useState(false);\n//   const [showPatients, setShowPatients] = useState(false);\n//   const [activeTab, setActiveTab] = useState('Dashboard');\n//   const [isEditing, setIsEditing] = useState(false);\n//   const [doctorInfo, setDoctorInfo] = useState(null);\n//   const [editedInfo, setEditedInfo] = useState(null);\n//   const [patients, setPatients] = useState([]);\n//   const [appointmentData, setAppointmentData] = useState({\n//     patientId: '',\n//     date: '',\n//     time: '',\n//     reason: '',\n//     prescriptionId: '',\n//     medication: '',\n//     dosage: '',\n//     frequency: '',\n//     tilldate: ''\n//   });\n//   const [availableSlots, setAvailableSlots] = useState([]);\n//   const [selectedAction, setSelectedAction] = useState('');\n//   const [existingPrescriptions, setExistingPrescriptions] = useState([]);\n//   const [appointments, setAppointments] = useState([]);\n//   const [completedAppointments, setCompletedAppointments] = useState([]);\n//   const [upcomingAppointments, setUpcomingAppointments] = useState([]);\n\n//   const navigate = useNavigate();\n\n//   const formatDate = (date) => {\n//     if (!date) return '';\n//     return new Date(date).toISOString().split('T')[0];\n//   };\n\n//   useEffect(() => {\n//     if (appointmentData.patientId) {\n//       fetchExistingPrescriptions(appointmentData.patientId);\n//     }\n//   }, [appointmentData.patientId]);\n\n//   const fetchExistingPrescriptions = async (patientId) => {\n//     if (!patientId) return;\n//     try {\n//       const token = localStorage.getItem('token');\n//       const response = await fetch(BASE_URL + `/doctor/prescriptions/${patientId}`, {\n//         headers: {\n//           'Authorization': `Bearer ${token}`\n//         }\n//       });\n//       if (response.ok) {\n//         const prescriptions = await response.json();\n//         setExistingPrescriptions(prescriptions);\n//       } else {\n//         console.error('Failed to fetch existing prescriptions');\n//         setExistingPrescriptions([]);\n//       }\n//     } catch (error) {\n//       console.error('Error fetching existing prescriptions:', error);\n//       setExistingPrescriptions([]);\n//     }\n//   };\n\n//   const fetchDoctorProfile = async () => {\n//     try {\n//       const token = localStorage.getItem('token');\n//       if (!token) {\n//         navigate('/login');\n//         return;\n//       }\n//       const response = await fetch(BASE_URL + '/doctor/profile', {\n//         headers: {\n//           'Authorization': `Bearer ${token}`\n//         }\n//       });\n//       if (response.ok) {\n//         const data = await response.json();\n//         setDoctorInfo(data);\n//         setEditedInfo(data);\n//       } else {\n//         console.error('Failed to fetch doctor profile');\n//       }\n//     } catch (error) {\n//       console.error('Error fetching doctor profile:', error);\n//     }\n//   };\n\n//   const fetchPatientsWithAppointments = async () => {\n//     try {\n//       const token = localStorage.getItem('token');\n//       if (!token) {\n//         navigate('/login');\n//         return;\n//       }\n//       const response = await fetch(BASE_URL + '/doctor/patients-with-appointments', {\n//         headers: {\n//           'Authorization': `Bearer ${token}`\n//         }\n//       });\n//       if (response.ok) {\n//         const data = await response.json();\n//         console.log('Patients with appointments:', data); // Add this line for debugging\n//         setPatients(data);\n//       } else {\n//         console.error('Failed to fetch patients with appointments');\n//       }\n//     } catch (error) {\n//       console.error('Error fetching patients with appointments:', error);\n//     }\n//   };\n\n//   const fetchAppointments = async () => {\n//     try {\n//       const token = localStorage.getItem('token');\n//       if (!token) {\n//         navigate('/login');\n//         return;\n//       }\n//       const response = await fetch(BASE_URL + '/doctor/appointments', {\n//         headers: {\n//           'Authorization': `Bearer ${token}`\n//         }\n//       });\n//       if (response.ok) {\n//         const data = await response.json();\n//         const now = new Date();\n//         // Filter and sort appointments by date and time in ascending order\n//         const sortedAppointments = data\n//           .filter(appointment => new Date(appointment.date) > now || (new Date(appointment.date).toLocaleDateString() === now.toLocaleDateString() && appointment.time > now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })))\n//           .sort((a, b) => new Date(a.date + ' ' + a.time) - new Date(b.date + ' ' + b.time));\n//         setAppointments(sortedAppointments);\n//       } else {\n//         console.error('Failed to fetch appointments');\n//       }\n//     } catch (error) {\n//       console.error('Error fetching appointments:', error);\n//     }\n//   };\n\n//   const fetchCompletedAppointments = async () => {\n//     try {\n//       const token = localStorage.getItem('token');\n//       if (!token) {\n//         navigate('/login');\n//         return;\n//       }\n\n//       const response = await fetch(BASE_URL + '/doctor/appointment/completed', {\n//         headers: {\n//           'Authorization': `Bearer ${token}`\n//         }\n//       });\n\n//       if (response.ok) {\n//         const data = await response.json();\n\n//         // Optional: Sort by date and time (descending if you want most recent first)\n//         const sortedCompleted = data.sort((a, b) => \n//           new Date(b.date + ' ' + b.time) - new Date(a.date + ' ' + a.time)\n//         );\n\n//         setCompletedAppointments(sortedCompleted); // make sure youâ€™ve defined this state\n//       } else {\n//         console.error('Failed to fetch completed appointments');\n//       }\n//     } catch (error) {\n//       console.error('Error fetching completed appointments:', error);\n//     }\n//   };\n\n//   const fetchUpcomingAppointments = async () => {\n//     try {\n//       const token = localStorage.getItem('token');\n//       if (!token) {\n//         navigate('/login');\n//         return;\n//       }\n\n//       const response = await fetch(BASE_URL + '/doctor/appointments/upcoming', {\n//         headers: {\n//           'Authorization': `Bearer ${token}`\n//         }\n//       });\n\n//       if (response.ok) {\n//         const data = await response.json();\n\n//         // Sort appointments by date and time (soonest first)\n//         const sortedUpcoming = data.sort((a, b) =>\n//           new Date(a.date + ' ' + a.time) - new Date(b.date + ' ' + b.time)\n//         );\n\n//         setUpcomingAppointments(sortedUpcoming); // Make sure you have this state defined\n//       } else {\n//         console.error('Failed to fetch upcoming appointments');\n//       }\n//     } catch (error) {\n//       console.error('Error fetching upcoming appointments:', error);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchDoctorProfile();\n//     fetchPatientsWithAppointments();\n//     fetchAppointments();\n//     fetchCompletedAppointments();\n//     fetchUpcomingAppointments();\n//   }, [fetchDoctorProfile,\n//     fetchPatientsWithAppointments,\n//     fetchAppointments,\n//     fetchCompletedAppointments,\n//     fetchUpcomingAppointments]);\n\n//   const handleUpdateStatus = async (appointmentId, status) => {\n//     try {\n//       const token = localStorage.getItem('token');\n//       const response = await fetch(BASE_URL + `/doctor/appointment/${appointmentId}/${status}`, {\n//         method: 'PATCH',\n//         headers: {\n//           'Content-Type': 'application/json',\n//           'Authorization': `Bearer ${token}`\n//         },\n//         body: JSON.stringify({ appointmentId })\n//       });\n\n//       if (response.ok) {\n//         // Optional: refresh appointments list\n//         fetchAppointments();\n//         fetchCompletedAppointments();\n//         return toast.success(\"Appointment status updated.\");\n//       } else {\n//         return toast.error(\"Failed to update appointment status\");\n//       }\n//     } catch (error) {\n//       console.error('Error updating appointment status:', error);\n//     }\n//   };\n\n//   const renderDashboard = () => (\n//     <>\n//       <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n//         <Card>\n//           <CardHeader icon={Calendar}>\n//             <CardTitle className=\"text-sm font-medium\">Today's Appointments</CardTitle>\n//           </CardHeader>\n//           <CardContent>\n//             <div className=\"text-2xl font-bold\">\n//               {appointments.length}\n//             </div>\n//             {appointments.length > 0 ? (\n//               <p className=\"text-xs text-gray-500\">\n//                 Next: {appointments[0].patientId.firstName} {appointments[0].patientId.lastName} at {appointments[0].time}\n//               </p>\n//             ) : (\n//               <p className=\"text-xs text-gray-500\">\n//                 No appointments today\n//               </p>\n//             )}\n//           </CardContent>\n//           <CardFooter className=\"p-2\">\n//             <Button \n//               variant=\"ghost\" \n//               className=\"w-full text-sm text-gray-500 hover:text-gray-900 transition-colors\"\n//               onClick={() => setShowAppointments(!showAppointments)}\n//             >\n//               {showAppointments ? \"Hide\" : \"View\"} Today's Appointments\n//               <ChevronDown className={`h-4 w-4 ml-2 transition-transform ${showAppointments ? \"rotate-180\" : \"\"}`} />\n//             </Button>\n//           </CardFooter>\n//           {showAppointments && (\n//             <div className=\"px-4 pb-4\">\n//               {appointments.length > 0 ? (\n//                 appointments.map((appointment, index) => (\n//                   <div\n//                     key={index}\n//                     className=\"flex justify-between items-center py-2 border-t\"\n//                   >\n//                     <div>\n//                       <p className=\"text-sm font-medium\">\n//                         {appointment.patientId.firstName} {appointment.patientId.lastName}\n//                       </p>\n//                       <p className=\"text-xs text-gray-500\">{appointment.reason}</p>\n//                     </div>\n//                     <div className=\"flex items-center gap-3\">\n//                       <p className=\"text-sm text-nowrap\">{appointment.time}</p>\n\n//                       {/* Mark as Completed */}\n//                       <button\n//                         onClick={() => handleUpdateStatus(appointment._id, 'completed')}\n//                         className=\"text-green-600 hover:text-green-800\"\n//                         title=\"Mark as Completed\"\n//                       >\n//                         <CheckCircle className=\"h-5 w-5\" />\n//                       </button>\n\n//                       {/* Cancel Appointment */}\n//                       <button\n//                         onClick={() => handleUpdateStatus(appointment._id, 'cancelled')}\n//                         className=\"text-red-600 hover:text-red-800\"\n//                         title=\"Cancel Appointment\"\n//                       >\n//                         <XCircle className=\"h-5 w-5\" />\n//                       </button>\n//                     </div>\n//                   </div>\n//                 ))\n//               ) : (\n//                 <p className=\"text-sm text-gray-500 text-center py-4\">\n//                   No appointments scheduled for today\n//                 </p>\n//               )}\n//             </div>\n//           )}\n\n//         </Card>\n//         <Card>\n//           <CardHeader icon={Users}>\n//             <CardTitle className=\"text-sm font-medium\">Patients</CardTitle>\n//           </CardHeader>\n//           <CardContent>\n//             <div className=\"text-2xl font-bold\">{patients.length}</div>\n//             <p className=\"text-xs text-gray-500\">Total patients under care</p>\n//           </CardContent>\n//           <CardFooter className=\"p-2\">\n//             <Button \n//               variant=\"ghost\" \n//               className=\"w-full text-sm text-gray-500 hover:text-gray-900 transition-colors\"\n//               onClick={() => setShowPatients(!showPatients)}\n//             >\n//               {showPatients ? \"Hide\" : \"View All\"} Patients\n//               <ChevronDown className={`h-4 w-4 ml-2 transition-transform ${showPatients ? \"rotate-180\" : \"\"}`} />\n//             </Button>\n//           </CardFooter>\n//           {showPatients && (\n//             <div className=\"px-4 pb-4\">\n//               {patients.map((patient, index) => (\n//                 <div key={index} className=\"py-2 border-t\">\n//                   <p className=\"text-sm font-medium\">\n//                     {patient.firstName} {patient.lastName}\n//                   </p>\n//                   <p className=\"text-xs text-gray-500\">\n//                     Last visit: {patient.lastVisit ? new Date(patient.lastVisit).toLocaleDateString('en-GB') : 'N/A'} | Next: {patient.nextAppointment ? new Date(patient.nextAppointment).toLocaleDateString('en-GB') : 'N/A'}\n//                   </p>\n//                 </div>\n//               ))}\n//             </div>\n//           )}\n//         </Card>\n//       </div>\n//       <div className=\"mt-8 grid grid-cols-1 md:grid-cols-2 gap-6\">\n//       <Card>\n//         <CardHeader>\n//           <CardTitle>Recent Activity</CardTitle>\n//         </CardHeader>\n//         <CardContent>\n//           <ul className=\"space-y-2\">\n//             {completedAppointments.slice(0, 3).map((appointment, index) => (\n//               <li key={appointment._id || index} className=\"flex items-center space-x-2\">\n//                 <Clock className=\"h-4 w-4 text-blue-600\" />\n//                 <span>\n//                   {appointment.status === \"completed\" ? \"Completed\" : \"Cancelled\"} appointment with{\" \"}\n//                   <strong>\n//                     {appointment.patientId?.firstName} {appointment.patientId?.lastName}\n//                   </strong>{\" \"}\n//                   on {new Date(appointment.date).toLocaleDateString()} at {appointment.time}\n//                 </span>\n//               </li>\n//             ))}\n\n//             {/* Static fallback if no completed appointments */}\n//             {completedAppointments.length === 0 && (\n//               <>\n//                 <li className=\"flex items-center space-x-2\">\n//                   <FileText className=\"h-4 w-4 text-gray-400\" />\n//                   <span className=\"text-gray-400\">No records found.</span>\n//                 </li>\n//               </>\n//             )}\n//           </ul>\n//         </CardContent>\n//       </Card>\n\n//       <Card>\n//         <CardHeader>\n//           <CardTitle>Upcoming Schedule</CardTitle>\n//         </CardHeader>\n//         <CardContent>\n//           <ul className=\"space-y-2\">\n//             {upcomingAppointments.slice(0, 3).map((appointment, index) => (\n//               <li key={appointment._id || index} className=\"flex items-center space-x-2\">\n//                 <Calendar className=\"h-4 w-4 text-blue-600\" />\n//                 <span>\n//                   Appointment with{\" \"}\n//                   <strong>\n//                     {appointment.patientId?.firstName} {appointment.patientId?.lastName}\n//                   </strong>{\" \"}\n//                   on {new Date(appointment.date).toLocaleDateString()} at {appointment.time}. <span className=\"text-gray-500\">{\"(\" + appointment.reason + \")\"}</span>\n//                 </span>\n//               </li>\n//             ))}\n\n//             {/* Fallback if there are no upcoming appointments */}\n//             {upcomingAppointments.length === 0 && (\n//               <>\n//                 <li className=\"flex items-center space-x-2\">\n//                   <Clock className=\"h-4 w-4 text-gray-400\" />\n//                   <span className=\"text-gray-400\">No upcoming schedule.</span>\n//                 </li>\n//               </>\n//             )}\n//           </ul>\n//         </CardContent>\n//       </Card>\n\n//       </div>\n//     </>\n//   );\n\n//   const renderProfile = () => {\n//     const handleInputChange = (e) => {\n//       const { name, value } = e.target;\n//       setEditedInfo(prev => ({ ...prev, [name]: value }));\n//     };\n\n//     const handleSave = async () => {\n//       try {\n//         const token = localStorage.getItem('token');\n//         const response = await fetch(BASE_URL + '/doctor/profile', {\n//           method: 'PUT',\n//           headers: {\n//             'Content-Type': 'application/json',\n//             'Authorization': `Bearer ${token}`\n//           },\n//           body: JSON.stringify(editedInfo)\n//         });\n//         if (response.ok) {\n//           const updatedProfile = await response.json();\n//           setDoctorInfo(updatedProfile);\n//           setIsEditing(false);\n//           return toast.success(\"Profile updated successfully.\");\n//         } else {\n//           await response.json();\n//           return toast.success(\"Failed to update profile.\");\n//         }\n//       } catch (error) {\n//         alert('Error updating doctor profile. Please try again.');\n//       }\n//     };\n\n//     return (\n//       <Card className=\"w-full max-w-2xl mx-auto\">\n//         <CardHeader>\n//           <CardTitle>Doctor Profile</CardTitle>\n//         </CardHeader>\n//         <CardContent>\n//           <form className=\"space-y-4\">\n//             <div className=\"grid grid-cols-2 gap-4\">\n//               <div className=\"space-y-2\">\n//                 <Label htmlFor=\"firstName\">First Name</Label>\n//                 <Input\n//                   id=\"firstName\"\n//                   name=\"firstName\"\n//                   value={isEditing ? editedInfo.firstName : doctorInfo?.firstName}\n//                   onChange={handleInputChange}\n//                   readOnly={!isEditing}\n//                 />\n//               </div>\n//               <div className=\"space-y-2\">\n//                 <Label htmlFor=\"lastName\">Last Name</Label>\n//                 <Input\n//                   id=\"lastName\"\n//                   name=\"lastName\"\n//                   value={isEditing ? editedInfo.lastName : doctorInfo?.lastName}\n//                   onChange={handleInputChange}\n//                   readOnly={!isEditing}\n//                 />\n//               </div>\n//             </div>\n//             <div className=\"space-y-2\">\n//               <Label htmlFor=\"email\">Email</Label>\n//               <Input\n//                 id=\"email\"\n//                 name=\"email\"\n//                 type=\"email\"\n//                 value={isEditing ? editedInfo.email : doctorInfo?.email}\n//                 onChange={handleInputChange}\n//                 readOnly={!isEditing}\n//               />\n//             </div>\n//             <div className=\"space-y-2\">\n//               <Label htmlFor=\"specialty\">Specialty</Label>\n//               <Input\n//                 id=\"specialty\"\n//                 name=\"specialty\"\n//                 value={isEditing ? editedInfo.specialty : doctorInfo?.specialty}\n//                 onChange={handleInputChange}\n//                 readOnly={!isEditing}\n//               />\n//             </div>\n//             <div className=\"space-y-2\">\n//               <Label htmlFor=\"licenseNumber\">License Number</Label>\n//               <Input\n//                 id=\"licenseNumber\"\n//                 name=\"licenseNumber\"\n//                 value={isEditing ? editedInfo.licenseNumber : doctorInfo?.licenseNumber}\n//                 onChange={handleInputChange}\n//                 readOnly={!isEditing}\n//               />\n//             </div>\n//             <div className=\"space-y-2\">\n//               <Label htmlFor=\"phoneNumber\">Phone Number</Label>\n//               <Input\n//                 id=\"phoneNumber\"\n//                 name=\"phoneNumber\"\n//                 value={isEditing ? editedInfo.phoneNumber : doctorInfo?.phoneNumber}\n//                 onChange={handleInputChange}\n//                 readOnly={!isEditing}\n//               />\n//             </div>\n//           </form>\n//         </CardContent>\n//         <CardFooter>\n//           {isEditing ? (\n//             <>\n//               <Button onClick={handleSave} className=\"mr-2\">Save</Button>\n//               <Button onClick={() => setIsEditing(false)} variant=\"outline\">Cancel</Button>\n//             </>\n//           ) : (\n//             <Button onClick={() => setIsEditing(true)} className=\"ml-auto\">Edit Profile</Button>\n//           )}\n//         </CardFooter>\n//       </Card>\n//     );\n//   };\n\n//   const renderPatientManagement = () => {\n//     const handleInputChange = (e) => {\n//       const { name, value } = e.target;\n//       setAppointmentData(prev => ({ ...prev, [name]: value }));\n\n//       if (name === 'action') {\n//         setSelectedAction(value);\n//       }\n\n//       if (name === 'patientId') {\n//         fetchExistingPrescriptions(value);\n//       }\n\n//       if (name === 'date' || name === 'patientId') {\n//         fetchAvailableSlots(appointmentData.patientId, value);\n//       }\n//     };\n\n//     const fetchAvailableSlots = async (patientId, date) => {\n//       if (!patientId || !date) return;\n//       try {\n//         const token = localStorage.getItem('token');\n//         const response = await fetch(BASE_URL + `/doctor/available-slots?patientId=${patientId}&date=${date}`, {\n//           headers: {\n//             'Authorization': `Bearer ${token}`\n//           }\n//         });\n//         if (response.ok) {\n//           const slots = await response.json();\n//           setAvailableSlots(slots);\n//         } else {\n//           console.error('Failed to fetch available slots');\n//           setAvailableSlots([]);\n//           return toast.error(\"Failed to fetch available slots\");\n//         }\n//       } catch (error) {\n//         console.error('Error fetching available slots:', error);\n//         setAvailableSlots([]);\n//       }\n//     };\n\n//     const handleEditPrescription = (prescription) => {\n//       setAppointmentData({\n//         ...appointmentData,\n//         prescriptionId: prescription._id,\n//         medication: prescription.medication || '',\n//         dosage: prescription.dosage || '',\n//         frequency: prescription.frequency || '',\n//         tilldate: prescription.tilldate || ''\n//       });\n//       setSelectedAction('prescribe-medication');\n//     };\n\n//     const handleDeletePrescription = async (prescriptionId) => {\n//       if (window.confirm('Are you sure you want to delete this prescription?')) {\n//         try {\n//           const token = localStorage.getItem('token');\n//           const response = await fetch(BASE_URL + `/doctor/prescriptions/${prescriptionId}`, {\n//             method: 'DELETE',\n//             headers: {\n//               'Authorization': `Bearer ${token}`\n//             }\n//           });\n//           if (response.ok) {\n//             fetchExistingPrescriptions(appointmentData.patientId);\n//             return toast.success('Prescription deleted successfully.');\n//           } else {\n//             const errorData = await response.json();\n//             console.error('Error details:', errorData.details);\n//             return toast.error(`Failed to delete prescription.`);\n//           }\n//         } catch (error) {\n//           alert('Error deleting prescription. Please try again.');\n//           console.error('Error deleting prescription:', error);\n//         }\n//       }\n//     };\n\n//     const handleSubmit = async (e) => {\n//       e.preventDefault();\n//       if (selectedAction === 'prescribe-medication') {\n//         try {\n//           const token = localStorage.getItem('token');\n//           const url = appointmentData.prescriptionId\n//             ? BASE_URL + `/doctor/prescriptions/${appointmentData.prescriptionId}`\n//             : BASE_URL + '/doctor/prescribe-medication';\n//           const method = appointmentData.prescriptionId ? 'PUT' : 'POST';\n//           const response = await fetch(url, {\n//             method,\n//             headers: {\n//               'Content-Type': 'application/json',\n//               'Authorization': `Bearer ${token}`\n//             },\n//             body: JSON.stringify({\n//               doctorId: appointmentData.doctorId,\n//               patientId: appointmentData.patientId,\n//               medication: appointmentData.medication,\n//               dosage: appointmentData.dosage,\n//               frequency: appointmentData.frequency,\n//               tilldate: appointmentData.tilldate\n//             })\n//           });\n//           if (response.ok) {\n//             //const result = \n//             await response.json();\n//             setAppointmentData({\n//               ...appointmentData,\n//               prescriptionId: '',\n//               medication: '',\n//               dosage: '',\n//               frequency: '',\n//               tilldate: ''\n//             });\n//             fetchExistingPrescriptions(appointmentData.patientId);\n//             setSelectedAction('');\n//             fetchExistingPrescriptions();\n//             return toast.success(appointmentData.prescriptionId ? 'Medication updated successfully' : 'Medication prescribed successfully');\n//           } else {\n//             const errorData = await response.json();\n//             return toast.error(`Failed to ${appointmentData.prescriptionId ? 'update' : 'prescribe'} medication: ${errorData.error}`);\n//           }\n//         } catch (error) {\n//           alert(`Error ${appointmentData.prescriptionId ? 'updating' : 'prescribing'} medication. Please try again.`);\n//         }\n//       } else if (selectedAction === 'schedule-appointment') {\n//         try {\n//           const token = localStorage.getItem('token');\n//           const response = await fetch(BASE_URL + '/doctor/schedule-appointment', {\n//             method: 'POST',\n//             headers: {\n//               'Content-Type': 'application/json',\n//               'Authorization': `Bearer ${token}`\n//             },\n//             body: JSON.stringify({\n//               patientId: appointmentData.patientId,\n//               date: appointmentData.date,\n//               time: appointmentData.time,\n//               reason: appointmentData.reason\n//             })\n//           });\n//           if (response.ok) {\n//             setAppointmentData({\n//               patientId: '',\n//               date: '',\n//               time: '',\n//               reason: '',\n//               prescriptionId: '',\n//               medication: '',\n//               dosage: '',\n//               frequency: '',\n//               tilldate: ''\n//             });\n//             setSelectedAction('');\n//             fetchAppointments();\n//             fetchUpcomingAppointments();\n//             return toast.success('Appointment scheduled successfully.');\n//           } else {\n//             const errorData = await response.json();\n//             return toast.error(`Failed to schedule appointment: ${errorData.error}`);\n//           }\n//         } catch (error) {\n//           alert('Error scheduling appointment. Please try again.');\n//         }\n//       }\n//     };\n\n//     return (\n//       <Card className=\"w-full max-w-2xl mx-auto\">\n//         <CardHeader>\n//           <CardTitle>Patient Management</CardTitle>\n//         </CardHeader>\n//         <CardContent>\n//           <form onSubmit={handleSubmit} className=\"space-y-4\">\n//             <div className=\"space-y-2\">\n//               <Label htmlFor=\"patient\">Select Patient</Label>\n//               <Select id=\"patient\" name=\"patientId\" value={appointmentData.patientId} onChange={handleInputChange}>\n//                 <option value=\"\">Choose a patient</option>\n//                 {patients.map((patient) => (\n//                   <option key={patient._id} value={patient._id}>\n//                     {patient.firstName} {patient.lastName}\n//                   </option>\n//                 ))}\n//               </Select>\n//             </div>\n//             <div className=\"space-y-2\">\n//               <Label htmlFor=\"action\">Action</Label>\n//               <Select id=\"action\" name=\"action\" value={selectedAction} onChange={handleInputChange}>\n//                 <option value=\"\">Choose an action</option>\n//                 <option value=\"schedule-appointment\">Schedule Appointment</option>\n//                 <option value=\"prescribe-medication\">Prescribe Medication</option>\n//               </Select>\n//             </div>\n//             {selectedAction === 'schedule-appointment' && (\n//               <>\n//                 <div className=\"space-y-2\">\n//                   <Label htmlFor=\"date\">Appointment Date</Label>\n//                   <Input id=\"date\" name=\"date\" type=\"date\" value={appointmentData.date} onChange={handleInputChange} />\n//                 </div>\n//                 <div className=\"space-y-2\">\n//                   <Label htmlFor=\"time\">Preferred Time</Label>\n//                   <Select id=\"time\" name=\"time\" value={appointmentData.time} onChange={handleInputChange} disabled={availableSlots.length === 0}>\n//                     <option value=\"\">Choose a time slot</option>\n//                     {availableSlots.map((slot) => (\n//                       <option key={slot} value={slot}>{slot}</option>\n//                     ))}\n//                   </Select>\n//                 </div>\n//                 <div className=\"space-y-2\">\n//                   <Label htmlFor=\"reason\">Reason for Visit</Label>\n//                   <Input id=\"reason\" name=\"reason\" value={appointmentData.reason} onChange={handleInputChange} placeholder=\"Brief description of your concern\" />\n//                 </div>\n//               </>\n//             )}\n//             {selectedAction === 'prescribe-medication' && (\n//               <>\n//                 {existingPrescriptions.length > 0 && (\n//                   <div className=\"space-y-2 mb-4\">\n//                     <Label>Existing Prescriptions</Label>\n//                     {existingPrescriptions.map((prescription) => (\n//                       <div key={prescription._id} className=\"flex items-center justify-between bg-gray-100 p-2 rounded\">\n//                         <span>{prescription.medication} - {prescription.dosage} - {prescription.frequency} - {\" (Till - \"}{new Date(prescription.tilldate).toLocaleDateString()}{\") \"}</span>\n//                         <div>\n//                           <Button type=\"button\" onClick={() => handleEditPrescription(prescription)} variant=\"outline\" size=\"sm\" className=\"mr-2\">Edit</Button>\n//                           <Button onClick={() => handleDeletePrescription(prescription._id)} variant=\"outline\" size=\"sm\">Delete</Button>\n//                         </div>\n//                       </div>\n//                     ))}\n//                   </div>\n//                 )}\n//                 <div className=\"space-y-2\">\n//                   <Label htmlFor=\"medication\">Medication</Label>\n//                   <Input id=\"medication\" name=\"medication\" value={appointmentData.medication || ''} onChange={handleInputChange} placeholder=\"Medication name\" />\n//                 </div>\n//                 <div className=\"space-y-2\">\n//                   <Label htmlFor=\"dosage\">Dosage</Label>\n//                   <Input id=\"dosage\" name=\"dosage\" value={appointmentData.dosage || ''} onChange={handleInputChange} placeholder=\"Dosage\" />\n//                 </div>\n//                 <div className=\"space-y-2\">\n//                   <Label htmlFor=\"frequency\">Frequency</Label>\n//                   <Input id=\"frequency\" name=\"frequency\" value={appointmentData.frequency || ''} onChange={handleInputChange} placeholder=\"Frequency\" />\n//                 </div>\n//                 <div className=\"space-y-2\">\n//                   <Label htmlFor=\"tilldate\">Till Date</Label>\n//                   <Input id=\"tilldate\" name=\"tilldate\" type=\"date\" value={formatDate(appointmentData.tilldate) || ''} onChange={handleInputChange} />\n//                 </div>\n//               </>\n//             )}\n//             <Button type=\"submit\" className=\"ml-auto\">\n//               {selectedAction === 'prescribe-medication' ? (appointmentData.prescriptionId ? 'Update Prescription' : 'Prescribe Medication') : 'Schedule Appointment'}\n//             </Button>\n//           </form>\n//         </CardContent>\n//       </Card>\n//     );\n//   };\n\n//   return (\n//     <div className=\"min-h-screen bg-blue-600\">\n//       <header className=\"bg-white p-4 flex justify-between items-center\">\n//         <div className=\"flex items-center space-x-2\">\n//           <Hospital className=\"h-6 w-6 text-blue-600\" />\n//           <span className=\"font-bold text-xl\">Sri Kumaran Clinic</span>\n//         </div>\n//         <Button variant=\"outline\" onClick={() => navigate('/')}>Sign Out</Button>\n//       </header>\n//       <nav className=\"bg-blue-700 text-white p-4\">\n//         <ul className=\"flex space-x-4 justify-center\">\n//           <li>\n//             <Button\n//               variant={activeTab === 'Dashboard' ? \"outline\" : \"ghost\"}\n//               className={`hover:bg-white hover:text-blue-600 ${activeTab === 'Dashboard' ? 'bg-white text-blue-600' : 'text-white'}`}\n//               onClick={() => setActiveTab('Dashboard')}\n//             >\n//               <Home className=\"w-4 h-4 mr-2\" />\n//               Dashboard\n//             </Button>\n//           </li>\n//           <li>\n//             <Button\n//               variant={activeTab === 'Profile' ? \"outline\" : \"ghost\"}\n//               className={`hover:bg-white hover:text-blue-600 ${activeTab === 'Profile' ? 'bg-white text-blue-600' : 'text-white'}`}\n//               onClick={() => setActiveTab('Profile')}\n//             >\n//               <UserCircle className=\"w-4 h-4 mr-2\" />\n//               Profile\n//             </Button>\n//           </li>\n//           <li>\n//             <Button\n//               variant={activeTab === 'Patient Management' ? \"outline\" : \"ghost\"}\n//               className={`hover:bg-white hover:text-blue-600 ${activeTab === 'Patient Management' ? 'bg-white text-blue-600' : 'text-white'}`}\n//               onClick={() => setActiveTab('Patient Management')}\n//             >\n//               <Users className=\"w-4 h-4 mr-2\" />\n//               Patient Management\n//             </Button>\n//           </li>\n//         </ul>\n//       </nav>\n//       <main className=\"container mx-auto px-4 py-8\">\n//         <h1 className=\"text-4xl font-bold text-white mb-8\">Welcome, Dr. {doctorInfo?.firstName} {doctorInfo?.lastName}</h1>\n//         {activeTab === 'Dashboard' && renderDashboard()}\n//         {activeTab === 'Profile' && renderProfile()}\n//         {activeTab === 'Patient Management' && renderPatientManagement()}\n//       </main>\n//     </div>\n//   );\n// }/\n\nimport React, { useState, useEffect } from 'react';\nimport { Calendar, Clock, FileText, Users, ChevronDown, Home, UserCircle, Hospital, CheckCircle, XCircle } from 'lucide-react';\nimport { useNavigate } from 'react-router-dom';\nimport { BASE_URL } from '../constants/constants';\nimport { toast } from \"react-hot-toast\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Button = ({\n  children,\n  variant = 'primary',\n  className = '',\n  ...props\n}) => /*#__PURE__*/_jsxDEV(\"button\", {\n  className: `inline-flex items-center justify-center px-4 py-2 text-sm font-medium rounded-md shadow-sm transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 ${variant === 'primary' ? 'text-white bg-blue-600 hover:bg-blue-700 focus:ring-blue-500' : variant === 'outline' ? 'text-blue-600 border-blue-600 hover:bg-blue-50 focus:ring-blue-500' : 'text-blue-600 border-blue-600 hover:bg-blue-50 focus:ring-blue-500'} ${className}`,\n  ...props,\n  children: children\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 923,\n  columnNumber: 3\n}, this);\n_c = Button;\nconst Card = ({\n  children,\n  className = ''\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: `bg-white rounded-lg shadow-md ${className}`,\n  children: children\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 938,\n  columnNumber: 3\n}, this);\n_c2 = Card;\nconst CardHeader = ({\n  children,\n  icon: Icon\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"px-4 py-5 border-b border-gray-200 sm:px-6 flex items-center justify-between\",\n  children: [children, Icon && /*#__PURE__*/_jsxDEV(Icon, {\n    className: \"h-5 w-5 text-blue-600 ml-2\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 946,\n    columnNumber: 14\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 944,\n  columnNumber: 3\n}, this);\n_c3 = CardHeader;\nconst CardTitle = ({\n  children\n}) => /*#__PURE__*/_jsxDEV(\"h3\", {\n  className: \"text-lg leading-6 font-medium text-gray-900\",\n  children: children\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 951,\n  columnNumber: 3\n}, this);\n_c4 = CardTitle;\nconst CardContent = ({\n  children\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"px-4 py-5 sm:p-6\",\n  children: children\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 955,\n  columnNumber: 3\n}, this);\n_c5 = CardContent;\nconst CardFooter = ({\n  children\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"px-4 py-4 sm:px-6\",\n  children: children\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 959,\n  columnNumber: 3\n}, this);\n_c6 = CardFooter;\nexport default function DoctorDashboard() {\n  _s();\n  const [showAppointments, setShowAppointments] = useState(false);\n  const [doctorInfo, setDoctorInfo] = useState(null);\n  const [appointments, setAppointments] = useState([]);\n  const [completedAppointments, setCompletedAppointments] = useState([]);\n  const [upcomingAppointments, setUpcomingAppointments] = useState([]);\n  const navigate = useNavigate();\n  const fetchDoctorProfile = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) return navigate('/login');\n      const res = await fetch(BASE_URL + '/doctor/profile', {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (res.ok) {\n        const data = await res.json();\n        setDoctorInfo(data);\n      } else {\n        console.error('Failed to fetch doctor profile');\n      }\n    } catch (err) {\n      console.error('Error:', err);\n    }\n  };\n  const fetchAppointments = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) return navigate('/login');\n      const res = await fetch(BASE_URL + '/doctor/appointments', {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (res.ok) {\n        const data = await res.json();\n        const now = new Date();\n        const sorted = data.filter(app => new Date(app.date) > now || new Date(app.date).toLocaleDateString() === now.toLocaleDateString() && app.time > now.toLocaleTimeString([], {\n          hour: '2-digit',\n          minute: '2-digit'\n        })).sort((a, b) => new Date(a.date + ' ' + a.time) - new Date(b.date + ' ' + b.time));\n        setAppointments(sorted);\n      }\n    } catch (err) {\n      console.error('Error:', err);\n    }\n  };\n  const fetchCompletedAppointments = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      const res = await fetch(BASE_URL + '/doctor/appointment/completed', {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (res.ok) {\n        const data = await res.json();\n        setCompletedAppointments(data.sort((a, b) => new Date(b.date + ' ' + b.time) - new Date(a.date + ' ' + a.time)));\n      }\n    } catch (err) {\n      console.error('Error fetching completed appointments:', err);\n    }\n  };\n  const fetchUpcomingAppointments = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      const res = await fetch(BASE_URL + '/doctor/appointments/upcoming', {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (res.ok) {\n        const data = await res.json();\n        setUpcomingAppointments(data.sort((a, b) => new Date(a.date + ' ' + a.time) - new Date(b.date + ' ' + b.time)));\n      }\n    } catch (err) {\n      console.error('Error fetching upcoming appointments:', err);\n    }\n  };\n  const handleUpdateStatus = async (appointmentId, status) => {\n    try {\n      const token = localStorage.getItem('token');\n      const res = await fetch(BASE_URL + `/doctor/appointment/${appointmentId}/${status}`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          appointmentId\n        })\n      });\n      if (res.ok) {\n        fetchAppointments();\n        fetchCompletedAppointments();\n        toast.success(\"Appointment status updated.\");\n      } else {\n        toast.error(\"Failed to update status.\");\n      }\n    } catch (err) {\n      console.error(err);\n      toast.error(\"Error updating status.\");\n    }\n  };\n  useEffect(() => {\n    fetchDoctorProfile();\n    fetchAppointments();\n    fetchCompletedAppointments();\n    fetchUpcomingAppointments();\n  }, []);\n  const renderDashboard = () => {\n    var _appointments$, _appointments$$patien, _appointments$2, _appointments$2$patie, _appointments$3;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-1 md:grid-cols-2 gap-6\",\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n          icon: Calendar,\n          children: /*#__PURE__*/_jsxDEV(CardTitle, {\n            children: \"Today's Appointments\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1084,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1083,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-2xl font-bold\",\n            children: appointments.length\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1087,\n            columnNumber: 11\n          }, this), appointments.length > 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-xs text-gray-500\",\n            children: [\"Next: \", (_appointments$ = appointments[0]) === null || _appointments$ === void 0 ? void 0 : (_appointments$$patien = _appointments$.patientId) === null || _appointments$$patien === void 0 ? void 0 : _appointments$$patien.firstName, \" \", (_appointments$2 = appointments[0]) === null || _appointments$2 === void 0 ? void 0 : (_appointments$2$patie = _appointments$2.patientId) === null || _appointments$2$patie === void 0 ? void 0 : _appointments$2$patie.lastName, \" at \", (_appointments$3 = appointments[0]) === null || _appointments$3 === void 0 ? void 0 : _appointments$3.time]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1089,\n            columnNumber: 13\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-xs text-gray-500\",\n            children: \"No appointments today\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1093,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1086,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(CardFooter, {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"ghost\",\n            className: \"w-full text-sm text-gray-500 hover:text-gray-900\",\n            onClick: () => setShowAppointments(!showAppointments),\n            children: [showAppointments ? \"Hide\" : \"View\", \" Today's Appointments\", /*#__PURE__*/_jsxDEV(ChevronDown, {\n              className: `h-4 w-4 ml-2 transition-transform ${showAppointments ? \"rotate-180\" : \"\"}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1103,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1097,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1096,\n          columnNumber: 9\n        }, this), showAppointments && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"px-4 pb-4\",\n          children: appointments.map((appointment, index) => {\n            var _appointment$patientI, _appointment$patientI2;\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex justify-between items-center py-2 border-t\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"text-sm font-medium\",\n                  children: [(_appointment$patientI = appointment.patientId) === null || _appointment$patientI === void 0 ? void 0 : _appointment$patientI.firstName, \" \", (_appointment$patientI2 = appointment.patientId) === null || _appointment$patientI2 === void 0 ? void 0 : _appointment$patientI2.lastName]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1112,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"text-xs text-gray-500\",\n                  children: appointment.reason\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1115,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1111,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex items-center gap-3\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"text-sm\",\n                  children: appointment.time\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1118,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleUpdateStatus(appointment._id, 'completed'),\n                  className: \"text-green-600 hover:text-green-800\",\n                  \"aria-label\": \"Mark as Completed\",\n                  children: /*#__PURE__*/_jsxDEV(CheckCircle, {\n                    className: \"h-5 w-5\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1126,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1121,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleUpdateStatus(appointment._id, 'cancelled'),\n                  className: \"text-red-600 hover:text-red-800\",\n                  \"aria-label\": \"Cancel Appointment\",\n                  children: /*#__PURE__*/_jsxDEV(XCircle, {\n                    className: \"h-5 w-5\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1133,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1128,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1117,\n                columnNumber: 17\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1110,\n              columnNumber: 15\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1108,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1082,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1081,\n      columnNumber: 5\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-2xl font-semibold mb-4\",\n      children: \"Doctor Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1146,\n      columnNumber: 7\n    }, this), renderDashboard()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1145,\n    columnNumber: 5\n  }, this);\n}\n_s(DoctorDashboard, \"4MF8t7auG+VwzK2jCcTkfEmc4wQ=\", false, function () {\n  return [useNavigate];\n});\n_c7 = DoctorDashboard;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n$RefreshReg$(_c, \"Button\");\n$RefreshReg$(_c2, \"Card\");\n$RefreshReg$(_c3, \"CardHeader\");\n$RefreshReg$(_c4, \"CardTitle\");\n$RefreshReg$(_c5, \"CardContent\");\n$RefreshReg$(_c6, \"CardFooter\");\n$RefreshReg$(_c7, \"DoctorDashboard\");","map":{"version":3,"names":["React","useState","useEffect","Calendar","Clock","FileText","Users","ChevronDown","Home","UserCircle","Hospital","CheckCircle","XCircle","useNavigate","BASE_URL","toast","jsxDEV","_jsxDEV","Button","children","variant","className","props","fileName","_jsxFileName","lineNumber","columnNumber","_c","Card","_c2","CardHeader","icon","Icon","_c3","CardTitle","_c4","CardContent","_c5","CardFooter","_c6","DoctorDashboard","_s","showAppointments","setShowAppointments","doctorInfo","setDoctorInfo","appointments","setAppointments","completedAppointments","setCompletedAppointments","upcomingAppointments","setUpcomingAppointments","navigate","fetchDoctorProfile","token","localStorage","getItem","res","fetch","headers","ok","data","json","console","error","err","fetchAppointments","now","Date","sorted","filter","app","date","toLocaleDateString","time","toLocaleTimeString","hour","minute","sort","a","b","fetchCompletedAppointments","fetchUpcomingAppointments","handleUpdateStatus","appointmentId","status","method","body","JSON","stringify","success","renderDashboard","_appointments$","_appointments$$patien","_appointments$2","_appointments$2$patie","_appointments$3","length","patientId","firstName","lastName","onClick","map","appointment","index","_appointment$patientI","_appointment$patientI2","reason","_id","_c7","$RefreshReg$"],"sources":["D:/Downloads/SriKumaranClinic/frontend/src/components/Doctors.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import { Calendar, Clock, FileText, Users, ChevronDown, Home, UserCircle, Hospital, CheckCircle, XCircle } from 'lucide-react';\n// import { useNavigate } from 'react-router-dom';\n// import { BASE_URL } from '../constants/constants';\n// import { toast } from \"react-hot-toast\";\n\n// const Button = ({ children, variant = 'primary', className = '', ...props }) => (\n//   <button\n//     className={`inline-flex items-center justify-center px-4 py-2 text-sm font-medium rounded-md shadow-sm transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 ${\n//       variant === 'primary'\n//         ? 'text-white bg-blue-600 hover:bg-blue-700 focus:ring-blue-500'\n//         : variant === 'outline'\n//         ? 'text-blue-600 border-blue-600 hover:bg-blue-50 focus:ring-blue-500'\n//         : 'text-blue-600 border-blue-600 hover:bg-blue-50 focus:ring-blue-500'\n//     } ${className}`}\n//     {...props}\n//   >\n//     {children}\n//   </button>\n// );\n\n// const Card = ({ children, className = '' }) => (\n//   <div className={`bg-white rounded-lg shadow-md ${className}`}>\n//     {children}\n//   </div>\n// );\n\n// const CardHeader = ({ children, icon: Icon }) => (\n//   <div className=\"px-4 py-5 border-b border-gray-200 sm:px-6 flex items-center justify-between\">\n//     {children}\n//     {Icon && <Icon className=\"h-5 w-5 text-blue-600 ml-2\" />}\n//   </div>\n// );\n\n// const CardTitle = ({ children }) => (\n//   <h3 className=\"text-lg leading-6 font-medium text-gray-900\">{children}</h3>\n// );\n\n// const CardContent = ({ children }) => (\n//   <div className=\"px-4 py-5 sm:p-6\">{children}</div>\n// );\n\n// const CardFooter = ({ children }) => (\n//   <div className=\"px-4 py-4 sm:px-6\">{children}</div>\n// );\n\n// const Input = ({ ...props }) => (\n//   <input\n//     className=\"mt-1 focus:ring-blue-500 focus:border-blue-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md px-1 h-6\"\n//     {...props}\n//   />\n// );\n\n// const Label = ({ children, htmlFor }) => (\n//   <label htmlFor={htmlFor} className=\"block text-sm font-medium text-gray-700\">\n//     {children}\n//   </label>\n// );\n\n// const Select = ({ children, ...props }) => (\n//   <select\n//     className=\"mt-1 block w-full pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md\"\n//     {...props}\n//   >\n//     {children}\n//   </select>\n// );\n\n// export default function DoctorDashboard() {\n//   const [showAppointments, setShowAppointments] = useState(false);\n//   const [showPatients, setShowPatients] = useState(false);\n//   const [activeTab, setActiveTab] = useState('Dashboard');\n//   const [isEditing, setIsEditing] = useState(false);\n//   const [doctorInfo, setDoctorInfo] = useState(null);\n//   const [editedInfo, setEditedInfo] = useState(null);\n//   const [patients, setPatients] = useState([]);\n//   const [appointmentData, setAppointmentData] = useState({\n//     patientId: '',\n//     date: '',\n//     time: '',\n//     reason: '',\n//     prescriptionId: '',\n//     medication: '',\n//     dosage: '',\n//     frequency: '',\n//     tilldate: ''\n//   });\n//   const [availableSlots, setAvailableSlots] = useState([]);\n//   const [selectedAction, setSelectedAction] = useState('');\n//   const [existingPrescriptions, setExistingPrescriptions] = useState([]);\n//   const [appointments, setAppointments] = useState([]);\n//   const [completedAppointments, setCompletedAppointments] = useState([]);\n//   const [upcomingAppointments, setUpcomingAppointments] = useState([]);\n\n//   const navigate = useNavigate();\n\n//   const formatDate = (date) => {\n//     if (!date) return '';\n//     return new Date(date).toISOString().split('T')[0];\n//   };\n\n//   useEffect(() => {\n//     if (appointmentData.patientId) {\n//       fetchExistingPrescriptions(appointmentData.patientId);\n//     }\n//   }, [appointmentData.patientId]);\n\n//   const fetchExistingPrescriptions = async (patientId) => {\n//     if (!patientId) return;\n//     try {\n//       const token = localStorage.getItem('token');\n//       const response = await fetch(BASE_URL + `/doctor/prescriptions/${patientId}`, {\n//         headers: {\n//           'Authorization': `Bearer ${token}`\n//         }\n//       });\n//       if (response.ok) {\n//         const prescriptions = await response.json();\n//         setExistingPrescriptions(prescriptions);\n//       } else {\n//         console.error('Failed to fetch existing prescriptions');\n//         setExistingPrescriptions([]);\n//       }\n//     } catch (error) {\n//       console.error('Error fetching existing prescriptions:', error);\n//       setExistingPrescriptions([]);\n//     }\n//   };\n\n//   const fetchDoctorProfile = async () => {\n//     try {\n//       const token = localStorage.getItem('token');\n//       if (!token) {\n//         navigate('/login');\n//         return;\n//       }\n//       const response = await fetch(BASE_URL + '/doctor/profile', {\n//         headers: {\n//           'Authorization': `Bearer ${token}`\n//         }\n//       });\n//       if (response.ok) {\n//         const data = await response.json();\n//         setDoctorInfo(data);\n//         setEditedInfo(data);\n//       } else {\n//         console.error('Failed to fetch doctor profile');\n//       }\n//     } catch (error) {\n//       console.error('Error fetching doctor profile:', error);\n//     }\n//   };\n\n//   const fetchPatientsWithAppointments = async () => {\n//     try {\n//       const token = localStorage.getItem('token');\n//       if (!token) {\n//         navigate('/login');\n//         return;\n//       }\n//       const response = await fetch(BASE_URL + '/doctor/patients-with-appointments', {\n//         headers: {\n//           'Authorization': `Bearer ${token}`\n//         }\n//       });\n//       if (response.ok) {\n//         const data = await response.json();\n//         console.log('Patients with appointments:', data); // Add this line for debugging\n//         setPatients(data);\n//       } else {\n//         console.error('Failed to fetch patients with appointments');\n//       }\n//     } catch (error) {\n//       console.error('Error fetching patients with appointments:', error);\n//     }\n//   };\n\n//   const fetchAppointments = async () => {\n//     try {\n//       const token = localStorage.getItem('token');\n//       if (!token) {\n//         navigate('/login');\n//         return;\n//       }\n//       const response = await fetch(BASE_URL + '/doctor/appointments', {\n//         headers: {\n//           'Authorization': `Bearer ${token}`\n//         }\n//       });\n//       if (response.ok) {\n//         const data = await response.json();\n//         const now = new Date();\n//         // Filter and sort appointments by date and time in ascending order\n//         const sortedAppointments = data\n//           .filter(appointment => new Date(appointment.date) > now || (new Date(appointment.date).toLocaleDateString() === now.toLocaleDateString() && appointment.time > now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })))\n//           .sort((a, b) => new Date(a.date + ' ' + a.time) - new Date(b.date + ' ' + b.time));\n//         setAppointments(sortedAppointments);\n//       } else {\n//         console.error('Failed to fetch appointments');\n//       }\n//     } catch (error) {\n//       console.error('Error fetching appointments:', error);\n//     }\n//   };\n\n//   const fetchCompletedAppointments = async () => {\n//     try {\n//       const token = localStorage.getItem('token');\n//       if (!token) {\n//         navigate('/login');\n//         return;\n//       }\n  \n//       const response = await fetch(BASE_URL + '/doctor/appointment/completed', {\n//         headers: {\n//           'Authorization': `Bearer ${token}`\n//         }\n//       });\n  \n//       if (response.ok) {\n//         const data = await response.json();\n  \n//         // Optional: Sort by date and time (descending if you want most recent first)\n//         const sortedCompleted = data.sort((a, b) => \n//           new Date(b.date + ' ' + b.time) - new Date(a.date + ' ' + a.time)\n//         );\n  \n//         setCompletedAppointments(sortedCompleted); // make sure youâ€™ve defined this state\n//       } else {\n//         console.error('Failed to fetch completed appointments');\n//       }\n//     } catch (error) {\n//       console.error('Error fetching completed appointments:', error);\n//     }\n//   };\n  \n//   const fetchUpcomingAppointments = async () => {\n//     try {\n//       const token = localStorage.getItem('token');\n//       if (!token) {\n//         navigate('/login');\n//         return;\n//       }\n  \n//       const response = await fetch(BASE_URL + '/doctor/appointments/upcoming', {\n//         headers: {\n//           'Authorization': `Bearer ${token}`\n//         }\n//       });\n  \n//       if (response.ok) {\n//         const data = await response.json();\n  \n//         // Sort appointments by date and time (soonest first)\n//         const sortedUpcoming = data.sort((a, b) =>\n//           new Date(a.date + ' ' + a.time) - new Date(b.date + ' ' + b.time)\n//         );\n  \n//         setUpcomingAppointments(sortedUpcoming); // Make sure you have this state defined\n//       } else {\n//         console.error('Failed to fetch upcoming appointments');\n//       }\n//     } catch (error) {\n//       console.error('Error fetching upcoming appointments:', error);\n//     }\n//   };\n\n  \n//   useEffect(() => {\n//     fetchDoctorProfile();\n//     fetchPatientsWithAppointments();\n//     fetchAppointments();\n//     fetchCompletedAppointments();\n//     fetchUpcomingAppointments();\n//   }, [fetchDoctorProfile,\n//     fetchPatientsWithAppointments,\n//     fetchAppointments,\n//     fetchCompletedAppointments,\n//     fetchUpcomingAppointments]);\n\n//   const handleUpdateStatus = async (appointmentId, status) => {\n//     try {\n//       const token = localStorage.getItem('token');\n//       const response = await fetch(BASE_URL + `/doctor/appointment/${appointmentId}/${status}`, {\n//         method: 'PATCH',\n//         headers: {\n//           'Content-Type': 'application/json',\n//           'Authorization': `Bearer ${token}`\n//         },\n//         body: JSON.stringify({ appointmentId })\n//       });\n  \n//       if (response.ok) {\n//         // Optional: refresh appointments list\n//         fetchAppointments();\n//         fetchCompletedAppointments();\n//         return toast.success(\"Appointment status updated.\");\n//       } else {\n//         return toast.error(\"Failed to update appointment status\");\n//       }\n//     } catch (error) {\n//       console.error('Error updating appointment status:', error);\n//     }\n//   };\n  \n\n//   const renderDashboard = () => (\n//     <>\n//       <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n//         <Card>\n//           <CardHeader icon={Calendar}>\n//             <CardTitle className=\"text-sm font-medium\">Today's Appointments</CardTitle>\n//           </CardHeader>\n//           <CardContent>\n//             <div className=\"text-2xl font-bold\">\n//               {appointments.length}\n//             </div>\n//             {appointments.length > 0 ? (\n//               <p className=\"text-xs text-gray-500\">\n//                 Next: {appointments[0].patientId.firstName} {appointments[0].patientId.lastName} at {appointments[0].time}\n//               </p>\n//             ) : (\n//               <p className=\"text-xs text-gray-500\">\n//                 No appointments today\n//               </p>\n//             )}\n//           </CardContent>\n//           <CardFooter className=\"p-2\">\n//             <Button \n//               variant=\"ghost\" \n//               className=\"w-full text-sm text-gray-500 hover:text-gray-900 transition-colors\"\n//               onClick={() => setShowAppointments(!showAppointments)}\n//             >\n//               {showAppointments ? \"Hide\" : \"View\"} Today's Appointments\n//               <ChevronDown className={`h-4 w-4 ml-2 transition-transform ${showAppointments ? \"rotate-180\" : \"\"}`} />\n//             </Button>\n//           </CardFooter>\n//           {showAppointments && (\n//             <div className=\"px-4 pb-4\">\n//               {appointments.length > 0 ? (\n//                 appointments.map((appointment, index) => (\n//                   <div\n//                     key={index}\n//                     className=\"flex justify-between items-center py-2 border-t\"\n//                   >\n//                     <div>\n//                       <p className=\"text-sm font-medium\">\n//                         {appointment.patientId.firstName} {appointment.patientId.lastName}\n//                       </p>\n//                       <p className=\"text-xs text-gray-500\">{appointment.reason}</p>\n//                     </div>\n//                     <div className=\"flex items-center gap-3\">\n//                       <p className=\"text-sm text-nowrap\">{appointment.time}</p>\n\n//                       {/* Mark as Completed */}\n//                       <button\n//                         onClick={() => handleUpdateStatus(appointment._id, 'completed')}\n//                         className=\"text-green-600 hover:text-green-800\"\n//                         title=\"Mark as Completed\"\n//                       >\n//                         <CheckCircle className=\"h-5 w-5\" />\n//                       </button>\n\n//                       {/* Cancel Appointment */}\n//                       <button\n//                         onClick={() => handleUpdateStatus(appointment._id, 'cancelled')}\n//                         className=\"text-red-600 hover:text-red-800\"\n//                         title=\"Cancel Appointment\"\n//                       >\n//                         <XCircle className=\"h-5 w-5\" />\n//                       </button>\n//                     </div>\n//                   </div>\n//                 ))\n//               ) : (\n//                 <p className=\"text-sm text-gray-500 text-center py-4\">\n//                   No appointments scheduled for today\n//                 </p>\n//               )}\n//             </div>\n//           )}\n\n//         </Card>\n//         <Card>\n//           <CardHeader icon={Users}>\n//             <CardTitle className=\"text-sm font-medium\">Patients</CardTitle>\n//           </CardHeader>\n//           <CardContent>\n//             <div className=\"text-2xl font-bold\">{patients.length}</div>\n//             <p className=\"text-xs text-gray-500\">Total patients under care</p>\n//           </CardContent>\n//           <CardFooter className=\"p-2\">\n//             <Button \n//               variant=\"ghost\" \n//               className=\"w-full text-sm text-gray-500 hover:text-gray-900 transition-colors\"\n//               onClick={() => setShowPatients(!showPatients)}\n//             >\n//               {showPatients ? \"Hide\" : \"View All\"} Patients\n//               <ChevronDown className={`h-4 w-4 ml-2 transition-transform ${showPatients ? \"rotate-180\" : \"\"}`} />\n//             </Button>\n//           </CardFooter>\n//           {showPatients && (\n//             <div className=\"px-4 pb-4\">\n//               {patients.map((patient, index) => (\n//                 <div key={index} className=\"py-2 border-t\">\n//                   <p className=\"text-sm font-medium\">\n//                     {patient.firstName} {patient.lastName}\n//                   </p>\n//                   <p className=\"text-xs text-gray-500\">\n//                     Last visit: {patient.lastVisit ? new Date(patient.lastVisit).toLocaleDateString('en-GB') : 'N/A'} | Next: {patient.nextAppointment ? new Date(patient.nextAppointment).toLocaleDateString('en-GB') : 'N/A'}\n//                   </p>\n//                 </div>\n//               ))}\n//             </div>\n//           )}\n//         </Card>\n//       </div>\n//       <div className=\"mt-8 grid grid-cols-1 md:grid-cols-2 gap-6\">\n//       <Card>\n//         <CardHeader>\n//           <CardTitle>Recent Activity</CardTitle>\n//         </CardHeader>\n//         <CardContent>\n//           <ul className=\"space-y-2\">\n//             {completedAppointments.slice(0, 3).map((appointment, index) => (\n//               <li key={appointment._id || index} className=\"flex items-center space-x-2\">\n//                 <Clock className=\"h-4 w-4 text-blue-600\" />\n//                 <span>\n//                   {appointment.status === \"completed\" ? \"Completed\" : \"Cancelled\"} appointment with{\" \"}\n//                   <strong>\n//                     {appointment.patientId?.firstName} {appointment.patientId?.lastName}\n//                   </strong>{\" \"}\n//                   on {new Date(appointment.date).toLocaleDateString()} at {appointment.time}\n//                 </span>\n//               </li>\n//             ))}\n\n//             {/* Static fallback if no completed appointments */}\n//             {completedAppointments.length === 0 && (\n//               <>\n//                 <li className=\"flex items-center space-x-2\">\n//                   <FileText className=\"h-4 w-4 text-gray-400\" />\n//                   <span className=\"text-gray-400\">No records found.</span>\n//                 </li>\n//               </>\n//             )}\n//           </ul>\n//         </CardContent>\n//       </Card>\n\n//       <Card>\n//         <CardHeader>\n//           <CardTitle>Upcoming Schedule</CardTitle>\n//         </CardHeader>\n//         <CardContent>\n//           <ul className=\"space-y-2\">\n//             {upcomingAppointments.slice(0, 3).map((appointment, index) => (\n//               <li key={appointment._id || index} className=\"flex items-center space-x-2\">\n//                 <Calendar className=\"h-4 w-4 text-blue-600\" />\n//                 <span>\n//                   Appointment with{\" \"}\n//                   <strong>\n//                     {appointment.patientId?.firstName} {appointment.patientId?.lastName}\n//                   </strong>{\" \"}\n//                   on {new Date(appointment.date).toLocaleDateString()} at {appointment.time}. <span className=\"text-gray-500\">{\"(\" + appointment.reason + \")\"}</span>\n//                 </span>\n//               </li>\n//             ))}\n\n//             {/* Fallback if there are no upcoming appointments */}\n//             {upcomingAppointments.length === 0 && (\n//               <>\n//                 <li className=\"flex items-center space-x-2\">\n//                   <Clock className=\"h-4 w-4 text-gray-400\" />\n//                   <span className=\"text-gray-400\">No upcoming schedule.</span>\n//                 </li>\n//               </>\n//             )}\n//           </ul>\n//         </CardContent>\n//       </Card>\n\n//       </div>\n//     </>\n//   );\n\n//   const renderProfile = () => {\n//     const handleInputChange = (e) => {\n//       const { name, value } = e.target;\n//       setEditedInfo(prev => ({ ...prev, [name]: value }));\n//     };\n\n//     const handleSave = async () => {\n//       try {\n//         const token = localStorage.getItem('token');\n//         const response = await fetch(BASE_URL + '/doctor/profile', {\n//           method: 'PUT',\n//           headers: {\n//             'Content-Type': 'application/json',\n//             'Authorization': `Bearer ${token}`\n//           },\n//           body: JSON.stringify(editedInfo)\n//         });\n//         if (response.ok) {\n//           const updatedProfile = await response.json();\n//           setDoctorInfo(updatedProfile);\n//           setIsEditing(false);\n//           return toast.success(\"Profile updated successfully.\");\n//         } else {\n//           await response.json();\n//           return toast.success(\"Failed to update profile.\");\n//         }\n//       } catch (error) {\n//         alert('Error updating doctor profile. Please try again.');\n//       }\n//     };\n\n//     return (\n//       <Card className=\"w-full max-w-2xl mx-auto\">\n//         <CardHeader>\n//           <CardTitle>Doctor Profile</CardTitle>\n//         </CardHeader>\n//         <CardContent>\n//           <form className=\"space-y-4\">\n//             <div className=\"grid grid-cols-2 gap-4\">\n//               <div className=\"space-y-2\">\n//                 <Label htmlFor=\"firstName\">First Name</Label>\n//                 <Input\n//                   id=\"firstName\"\n//                   name=\"firstName\"\n//                   value={isEditing ? editedInfo.firstName : doctorInfo?.firstName}\n//                   onChange={handleInputChange}\n//                   readOnly={!isEditing}\n//                 />\n//               </div>\n//               <div className=\"space-y-2\">\n//                 <Label htmlFor=\"lastName\">Last Name</Label>\n//                 <Input\n//                   id=\"lastName\"\n//                   name=\"lastName\"\n//                   value={isEditing ? editedInfo.lastName : doctorInfo?.lastName}\n//                   onChange={handleInputChange}\n//                   readOnly={!isEditing}\n//                 />\n//               </div>\n//             </div>\n//             <div className=\"space-y-2\">\n//               <Label htmlFor=\"email\">Email</Label>\n//               <Input\n//                 id=\"email\"\n//                 name=\"email\"\n//                 type=\"email\"\n//                 value={isEditing ? editedInfo.email : doctorInfo?.email}\n//                 onChange={handleInputChange}\n//                 readOnly={!isEditing}\n//               />\n//             </div>\n//             <div className=\"space-y-2\">\n//               <Label htmlFor=\"specialty\">Specialty</Label>\n//               <Input\n//                 id=\"specialty\"\n//                 name=\"specialty\"\n//                 value={isEditing ? editedInfo.specialty : doctorInfo?.specialty}\n//                 onChange={handleInputChange}\n//                 readOnly={!isEditing}\n//               />\n//             </div>\n//             <div className=\"space-y-2\">\n//               <Label htmlFor=\"licenseNumber\">License Number</Label>\n//               <Input\n//                 id=\"licenseNumber\"\n//                 name=\"licenseNumber\"\n//                 value={isEditing ? editedInfo.licenseNumber : doctorInfo?.licenseNumber}\n//                 onChange={handleInputChange}\n//                 readOnly={!isEditing}\n//               />\n//             </div>\n//             <div className=\"space-y-2\">\n//               <Label htmlFor=\"phoneNumber\">Phone Number</Label>\n//               <Input\n//                 id=\"phoneNumber\"\n//                 name=\"phoneNumber\"\n//                 value={isEditing ? editedInfo.phoneNumber : doctorInfo?.phoneNumber}\n//                 onChange={handleInputChange}\n//                 readOnly={!isEditing}\n//               />\n//             </div>\n//           </form>\n//         </CardContent>\n//         <CardFooter>\n//           {isEditing ? (\n//             <>\n//               <Button onClick={handleSave} className=\"mr-2\">Save</Button>\n//               <Button onClick={() => setIsEditing(false)} variant=\"outline\">Cancel</Button>\n//             </>\n//           ) : (\n//             <Button onClick={() => setIsEditing(true)} className=\"ml-auto\">Edit Profile</Button>\n//           )}\n//         </CardFooter>\n//       </Card>\n//     );\n//   };\n\n//   const renderPatientManagement = () => {\n//     const handleInputChange = (e) => {\n//       const { name, value } = e.target;\n//       setAppointmentData(prev => ({ ...prev, [name]: value }));\n\n//       if (name === 'action') {\n//         setSelectedAction(value);\n//       }\n\n//       if (name === 'patientId') {\n//         fetchExistingPrescriptions(value);\n//       }\n\n//       if (name === 'date' || name === 'patientId') {\n//         fetchAvailableSlots(appointmentData.patientId, value);\n//       }\n//     };\n\n//     const fetchAvailableSlots = async (patientId, date) => {\n//       if (!patientId || !date) return;\n//       try {\n//         const token = localStorage.getItem('token');\n//         const response = await fetch(BASE_URL + `/doctor/available-slots?patientId=${patientId}&date=${date}`, {\n//           headers: {\n//             'Authorization': `Bearer ${token}`\n//           }\n//         });\n//         if (response.ok) {\n//           const slots = await response.json();\n//           setAvailableSlots(slots);\n//         } else {\n//           console.error('Failed to fetch available slots');\n//           setAvailableSlots([]);\n//           return toast.error(\"Failed to fetch available slots\");\n//         }\n//       } catch (error) {\n//         console.error('Error fetching available slots:', error);\n//         setAvailableSlots([]);\n//       }\n//     };\n\n//     const handleEditPrescription = (prescription) => {\n//       setAppointmentData({\n//         ...appointmentData,\n//         prescriptionId: prescription._id,\n//         medication: prescription.medication || '',\n//         dosage: prescription.dosage || '',\n//         frequency: prescription.frequency || '',\n//         tilldate: prescription.tilldate || ''\n//       });\n//       setSelectedAction('prescribe-medication');\n//     };\n\n//     const handleDeletePrescription = async (prescriptionId) => {\n//       if (window.confirm('Are you sure you want to delete this prescription?')) {\n//         try {\n//           const token = localStorage.getItem('token');\n//           const response = await fetch(BASE_URL + `/doctor/prescriptions/${prescriptionId}`, {\n//             method: 'DELETE',\n//             headers: {\n//               'Authorization': `Bearer ${token}`\n//             }\n//           });\n//           if (response.ok) {\n//             fetchExistingPrescriptions(appointmentData.patientId);\n//             return toast.success('Prescription deleted successfully.');\n//           } else {\n//             const errorData = await response.json();\n//             console.error('Error details:', errorData.details);\n//             return toast.error(`Failed to delete prescription.`);\n//           }\n//         } catch (error) {\n//           alert('Error deleting prescription. Please try again.');\n//           console.error('Error deleting prescription:', error);\n//         }\n//       }\n//     };\n\n//     const handleSubmit = async (e) => {\n//       e.preventDefault();\n//       if (selectedAction === 'prescribe-medication') {\n//         try {\n//           const token = localStorage.getItem('token');\n//           const url = appointmentData.prescriptionId\n//             ? BASE_URL + `/doctor/prescriptions/${appointmentData.prescriptionId}`\n//             : BASE_URL + '/doctor/prescribe-medication';\n//           const method = appointmentData.prescriptionId ? 'PUT' : 'POST';\n//           const response = await fetch(url, {\n//             method,\n//             headers: {\n//               'Content-Type': 'application/json',\n//               'Authorization': `Bearer ${token}`\n//             },\n//             body: JSON.stringify({\n//               doctorId: appointmentData.doctorId,\n//               patientId: appointmentData.patientId,\n//               medication: appointmentData.medication,\n//               dosage: appointmentData.dosage,\n//               frequency: appointmentData.frequency,\n//               tilldate: appointmentData.tilldate\n//             })\n//           });\n//           if (response.ok) {\n//             //const result = \n//             await response.json();\n//             setAppointmentData({\n//               ...appointmentData,\n//               prescriptionId: '',\n//               medication: '',\n//               dosage: '',\n//               frequency: '',\n//               tilldate: ''\n//             });\n//             fetchExistingPrescriptions(appointmentData.patientId);\n//             setSelectedAction('');\n//             fetchExistingPrescriptions();\n//             return toast.success(appointmentData.prescriptionId ? 'Medication updated successfully' : 'Medication prescribed successfully');\n//           } else {\n//             const errorData = await response.json();\n//             return toast.error(`Failed to ${appointmentData.prescriptionId ? 'update' : 'prescribe'} medication: ${errorData.error}`);\n//           }\n//         } catch (error) {\n//           alert(`Error ${appointmentData.prescriptionId ? 'updating' : 'prescribing'} medication. Please try again.`);\n//         }\n//       } else if (selectedAction === 'schedule-appointment') {\n//         try {\n//           const token = localStorage.getItem('token');\n//           const response = await fetch(BASE_URL + '/doctor/schedule-appointment', {\n//             method: 'POST',\n//             headers: {\n//               'Content-Type': 'application/json',\n//               'Authorization': `Bearer ${token}`\n//             },\n//             body: JSON.stringify({\n//               patientId: appointmentData.patientId,\n//               date: appointmentData.date,\n//               time: appointmentData.time,\n//               reason: appointmentData.reason\n//             })\n//           });\n//           if (response.ok) {\n//             setAppointmentData({\n//               patientId: '',\n//               date: '',\n//               time: '',\n//               reason: '',\n//               prescriptionId: '',\n//               medication: '',\n//               dosage: '',\n//               frequency: '',\n//               tilldate: ''\n//             });\n//             setSelectedAction('');\n//             fetchAppointments();\n//             fetchUpcomingAppointments();\n//             return toast.success('Appointment scheduled successfully.');\n//           } else {\n//             const errorData = await response.json();\n//             return toast.error(`Failed to schedule appointment: ${errorData.error}`);\n//           }\n//         } catch (error) {\n//           alert('Error scheduling appointment. Please try again.');\n//         }\n//       }\n//     };\n\n//     return (\n//       <Card className=\"w-full max-w-2xl mx-auto\">\n//         <CardHeader>\n//           <CardTitle>Patient Management</CardTitle>\n//         </CardHeader>\n//         <CardContent>\n//           <form onSubmit={handleSubmit} className=\"space-y-4\">\n//             <div className=\"space-y-2\">\n//               <Label htmlFor=\"patient\">Select Patient</Label>\n//               <Select id=\"patient\" name=\"patientId\" value={appointmentData.patientId} onChange={handleInputChange}>\n//                 <option value=\"\">Choose a patient</option>\n//                 {patients.map((patient) => (\n//                   <option key={patient._id} value={patient._id}>\n//                     {patient.firstName} {patient.lastName}\n//                   </option>\n//                 ))}\n//               </Select>\n//             </div>\n//             <div className=\"space-y-2\">\n//               <Label htmlFor=\"action\">Action</Label>\n//               <Select id=\"action\" name=\"action\" value={selectedAction} onChange={handleInputChange}>\n//                 <option value=\"\">Choose an action</option>\n//                 <option value=\"schedule-appointment\">Schedule Appointment</option>\n//                 <option value=\"prescribe-medication\">Prescribe Medication</option>\n//               </Select>\n//             </div>\n//             {selectedAction === 'schedule-appointment' && (\n//               <>\n//                 <div className=\"space-y-2\">\n//                   <Label htmlFor=\"date\">Appointment Date</Label>\n//                   <Input id=\"date\" name=\"date\" type=\"date\" value={appointmentData.date} onChange={handleInputChange} />\n//                 </div>\n//                 <div className=\"space-y-2\">\n//                   <Label htmlFor=\"time\">Preferred Time</Label>\n//                   <Select id=\"time\" name=\"time\" value={appointmentData.time} onChange={handleInputChange} disabled={availableSlots.length === 0}>\n//                     <option value=\"\">Choose a time slot</option>\n//                     {availableSlots.map((slot) => (\n//                       <option key={slot} value={slot}>{slot}</option>\n//                     ))}\n//                   </Select>\n//                 </div>\n//                 <div className=\"space-y-2\">\n//                   <Label htmlFor=\"reason\">Reason for Visit</Label>\n//                   <Input id=\"reason\" name=\"reason\" value={appointmentData.reason} onChange={handleInputChange} placeholder=\"Brief description of your concern\" />\n//                 </div>\n//               </>\n//             )}\n//             {selectedAction === 'prescribe-medication' && (\n//               <>\n//                 {existingPrescriptions.length > 0 && (\n//                   <div className=\"space-y-2 mb-4\">\n//                     <Label>Existing Prescriptions</Label>\n//                     {existingPrescriptions.map((prescription) => (\n//                       <div key={prescription._id} className=\"flex items-center justify-between bg-gray-100 p-2 rounded\">\n//                         <span>{prescription.medication} - {prescription.dosage} - {prescription.frequency} - {\" (Till - \"}{new Date(prescription.tilldate).toLocaleDateString()}{\") \"}</span>\n//                         <div>\n//                           <Button type=\"button\" onClick={() => handleEditPrescription(prescription)} variant=\"outline\" size=\"sm\" className=\"mr-2\">Edit</Button>\n//                           <Button onClick={() => handleDeletePrescription(prescription._id)} variant=\"outline\" size=\"sm\">Delete</Button>\n//                         </div>\n//                       </div>\n//                     ))}\n//                   </div>\n//                 )}\n//                 <div className=\"space-y-2\">\n//                   <Label htmlFor=\"medication\">Medication</Label>\n//                   <Input id=\"medication\" name=\"medication\" value={appointmentData.medication || ''} onChange={handleInputChange} placeholder=\"Medication name\" />\n//                 </div>\n//                 <div className=\"space-y-2\">\n//                   <Label htmlFor=\"dosage\">Dosage</Label>\n//                   <Input id=\"dosage\" name=\"dosage\" value={appointmentData.dosage || ''} onChange={handleInputChange} placeholder=\"Dosage\" />\n//                 </div>\n//                 <div className=\"space-y-2\">\n//                   <Label htmlFor=\"frequency\">Frequency</Label>\n//                   <Input id=\"frequency\" name=\"frequency\" value={appointmentData.frequency || ''} onChange={handleInputChange} placeholder=\"Frequency\" />\n//                 </div>\n//                 <div className=\"space-y-2\">\n//                   <Label htmlFor=\"tilldate\">Till Date</Label>\n//                   <Input id=\"tilldate\" name=\"tilldate\" type=\"date\" value={formatDate(appointmentData.tilldate) || ''} onChange={handleInputChange} />\n//                 </div>\n//               </>\n//             )}\n//             <Button type=\"submit\" className=\"ml-auto\">\n//               {selectedAction === 'prescribe-medication' ? (appointmentData.prescriptionId ? 'Update Prescription' : 'Prescribe Medication') : 'Schedule Appointment'}\n//             </Button>\n//           </form>\n//         </CardContent>\n//       </Card>\n//     );\n//   };\n\n//   return (\n//     <div className=\"min-h-screen bg-blue-600\">\n//       <header className=\"bg-white p-4 flex justify-between items-center\">\n//         <div className=\"flex items-center space-x-2\">\n//           <Hospital className=\"h-6 w-6 text-blue-600\" />\n//           <span className=\"font-bold text-xl\">Sri Kumaran Clinic</span>\n//         </div>\n//         <Button variant=\"outline\" onClick={() => navigate('/')}>Sign Out</Button>\n//       </header>\n//       <nav className=\"bg-blue-700 text-white p-4\">\n//         <ul className=\"flex space-x-4 justify-center\">\n//           <li>\n//             <Button\n//               variant={activeTab === 'Dashboard' ? \"outline\" : \"ghost\"}\n//               className={`hover:bg-white hover:text-blue-600 ${activeTab === 'Dashboard' ? 'bg-white text-blue-600' : 'text-white'}`}\n//               onClick={() => setActiveTab('Dashboard')}\n//             >\n//               <Home className=\"w-4 h-4 mr-2\" />\n//               Dashboard\n//             </Button>\n//           </li>\n//           <li>\n//             <Button\n//               variant={activeTab === 'Profile' ? \"outline\" : \"ghost\"}\n//               className={`hover:bg-white hover:text-blue-600 ${activeTab === 'Profile' ? 'bg-white text-blue-600' : 'text-white'}`}\n//               onClick={() => setActiveTab('Profile')}\n//             >\n//               <UserCircle className=\"w-4 h-4 mr-2\" />\n//               Profile\n//             </Button>\n//           </li>\n//           <li>\n//             <Button\n//               variant={activeTab === 'Patient Management' ? \"outline\" : \"ghost\"}\n//               className={`hover:bg-white hover:text-blue-600 ${activeTab === 'Patient Management' ? 'bg-white text-blue-600' : 'text-white'}`}\n//               onClick={() => setActiveTab('Patient Management')}\n//             >\n//               <Users className=\"w-4 h-4 mr-2\" />\n//               Patient Management\n//             </Button>\n//           </li>\n//         </ul>\n//       </nav>\n//       <main className=\"container mx-auto px-4 py-8\">\n//         <h1 className=\"text-4xl font-bold text-white mb-8\">Welcome, Dr. {doctorInfo?.firstName} {doctorInfo?.lastName}</h1>\n//         {activeTab === 'Dashboard' && renderDashboard()}\n//         {activeTab === 'Profile' && renderProfile()}\n//         {activeTab === 'Patient Management' && renderPatientManagement()}\n//       </main>\n//     </div>\n//   );\n// }/\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  Calendar, Clock, FileText, Users, ChevronDown, Home,\n  UserCircle, Hospital, CheckCircle, XCircle\n} from 'lucide-react';\nimport { useNavigate } from 'react-router-dom';\nimport { BASE_URL } from '../constants/constants';\nimport { toast } from \"react-hot-toast\";\n\nconst Button = ({ children, variant = 'primary', className = '', ...props }) => (\n  <button\n    className={`inline-flex items-center justify-center px-4 py-2 text-sm font-medium rounded-md shadow-sm transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 ${\n      variant === 'primary'\n        ? 'text-white bg-blue-600 hover:bg-blue-700 focus:ring-blue-500'\n        : variant === 'outline'\n        ? 'text-blue-600 border-blue-600 hover:bg-blue-50 focus:ring-blue-500'\n        : 'text-blue-600 border-blue-600 hover:bg-blue-50 focus:ring-blue-500'\n    } ${className}`}\n    {...props}\n  >\n    {children}\n  </button>\n);\n\nconst Card = ({ children, className = '' }) => (\n  <div className={`bg-white rounded-lg shadow-md ${className}`}>\n    {children}\n  </div>\n);\n\nconst CardHeader = ({ children, icon: Icon }) => (\n  <div className=\"px-4 py-5 border-b border-gray-200 sm:px-6 flex items-center justify-between\">\n    {children}\n    {Icon && <Icon className=\"h-5 w-5 text-blue-600 ml-2\" />}\n  </div>\n);\n\nconst CardTitle = ({ children }) => (\n  <h3 className=\"text-lg leading-6 font-medium text-gray-900\">{children}</h3>\n);\n\nconst CardContent = ({ children }) => (\n  <div className=\"px-4 py-5 sm:p-6\">{children}</div>\n);\n\nconst CardFooter = ({ children }) => (\n  <div className=\"px-4 py-4 sm:px-6\">{children}</div>\n);\n\nexport default function DoctorDashboard() {\n  const [showAppointments, setShowAppointments] = useState(false);\n  const [doctorInfo, setDoctorInfo] = useState(null);\n  const [appointments, setAppointments] = useState([]);\n  const [completedAppointments, setCompletedAppointments] = useState([]);\n  const [upcomingAppointments, setUpcomingAppointments] = useState([]);\n\n  const navigate = useNavigate();\n\n  const fetchDoctorProfile = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) return navigate('/login');\n\n      const res = await fetch(BASE_URL + '/doctor/profile', {\n        headers: { 'Authorization': `Bearer ${token}` }\n      });\n      if (res.ok) {\n        const data = await res.json();\n        setDoctorInfo(data);\n      } else {\n        console.error('Failed to fetch doctor profile');\n      }\n    } catch (err) {\n      console.error('Error:', err);\n    }\n  };\n\n  const fetchAppointments = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) return navigate('/login');\n\n      const res = await fetch(BASE_URL + '/doctor/appointments', {\n        headers: { 'Authorization': `Bearer ${token}` }\n      });\n      if (res.ok) {\n        const data = await res.json();\n        const now = new Date();\n        const sorted = data\n          .filter(app => new Date(app.date) > now ||\n            (new Date(app.date).toLocaleDateString() === now.toLocaleDateString() &&\n              app.time > now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }))\n          )\n          .sort((a, b) => new Date(a.date + ' ' + a.time) - new Date(b.date + ' ' + b.time));\n        setAppointments(sorted);\n      }\n    } catch (err) {\n      console.error('Error:', err);\n    }\n  };\n\n  const fetchCompletedAppointments = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      const res = await fetch(BASE_URL + '/doctor/appointment/completed', {\n        headers: { 'Authorization': `Bearer ${token}` }\n      });\n      if (res.ok) {\n        const data = await res.json();\n        setCompletedAppointments(data.sort((a, b) =>\n          new Date(b.date + ' ' + b.time) - new Date(a.date + ' ' + a.time)\n        ));\n      }\n    } catch (err) {\n      console.error('Error fetching completed appointments:', err);\n    }\n  };\n\n  const fetchUpcomingAppointments = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      const res = await fetch(BASE_URL + '/doctor/appointments/upcoming', {\n        headers: { 'Authorization': `Bearer ${token}` }\n      });\n      if (res.ok) {\n        const data = await res.json();\n        setUpcomingAppointments(data.sort((a, b) =>\n          new Date(a.date + ' ' + a.time) - new Date(b.date + ' ' + b.time)\n        ));\n      }\n    } catch (err) {\n      console.error('Error fetching upcoming appointments:', err);\n    }\n  };\n\n  const handleUpdateStatus = async (appointmentId, status) => {\n    try {\n      const token = localStorage.getItem('token');\n      const res = await fetch(BASE_URL + `/doctor/appointment/${appointmentId}/${status}`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({ appointmentId })\n      });\n\n      if (res.ok) {\n        fetchAppointments();\n        fetchCompletedAppointments();\n        toast.success(\"Appointment status updated.\");\n      } else {\n        toast.error(\"Failed to update status.\");\n      }\n    } catch (err) {\n      console.error(err);\n      toast.error(\"Error updating status.\");\n    }\n  };\n\n  useEffect(() => {\n    fetchDoctorProfile();\n    fetchAppointments();\n    fetchCompletedAppointments();\n    fetchUpcomingAppointments();\n  }, []);\n\n  const renderDashboard = () => (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n      <Card>\n        <CardHeader icon={Calendar}>\n          <CardTitle>Today's Appointments</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-2xl font-bold\">{appointments.length}</div>\n          {appointments.length > 0 ? (\n            <p className=\"text-xs text-gray-500\">\n              Next: {appointments[0]?.patientId?.firstName} {appointments[0]?.patientId?.lastName} at {appointments[0]?.time}\n            </p>\n          ) : (\n            <p className=\"text-xs text-gray-500\">No appointments today</p>\n          )}\n        </CardContent>\n        <CardFooter>\n          <Button\n            variant=\"ghost\"\n            className=\"w-full text-sm text-gray-500 hover:text-gray-900\"\n            onClick={() => setShowAppointments(!showAppointments)}\n          >\n            {showAppointments ? \"Hide\" : \"View\"} Today's Appointments\n            <ChevronDown className={`h-4 w-4 ml-2 transition-transform ${showAppointments ? \"rotate-180\" : \"\"}`} />\n          </Button>\n        </CardFooter>\n\n        {showAppointments && (\n          <div className=\"px-4 pb-4\">\n            {appointments.map((appointment, index) => (\n              <div key={index} className=\"flex justify-between items-center py-2 border-t\">\n                <div>\n                  <p className=\"text-sm font-medium\">\n                    {appointment.patientId?.firstName} {appointment.patientId?.lastName}\n                  </p>\n                  <p className=\"text-xs text-gray-500\">{appointment.reason}</p>\n                </div>\n                <div className=\"flex items-center gap-3\">\n                  <p className=\"text-sm\">\n                    {appointment.time}\n                  </p>\n                  <button\n                    onClick={() => handleUpdateStatus(appointment._id, 'completed')}\n                    className=\"text-green-600 hover:text-green-800\"\n                    aria-label=\"Mark as Completed\"\n                  >\n                    <CheckCircle className=\"h-5 w-5\" />\n                  </button>\n                  <button\n                    onClick={() => handleUpdateStatus(appointment._id, 'cancelled')}\n                    className=\"text-red-600 hover:text-red-800\"\n                    aria-label=\"Cancel Appointment\"\n                  >\n                    <XCircle className=\"h-5 w-5\" />\n                  </button>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </Card>\n    </div>\n  );\n\n  return (\n    <div className=\"p-4\">\n      <h1 className=\"text-2xl font-semibold mb-4\">Doctor Dashboard</h1>\n      {renderDashboard()}\n    </div>\n  );\n}\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SACEC,QAAQ,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,KAAK,EAAEC,WAAW,EAAEC,IAAI,EACnDC,UAAU,EAAEC,QAAQ,EAAEC,WAAW,EAAEC,OAAO,QACrC,cAAc;AACrB,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,QAAQ,QAAQ,wBAAwB;AACjD,SAASC,KAAK,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,MAAM,GAAGA,CAAC;EAAEC,QAAQ;EAAEC,OAAO,GAAG,SAAS;EAAEC,SAAS,GAAG,EAAE;EAAE,GAAGC;AAAM,CAAC,kBACzEL,OAAA;EACEI,SAAS,EAAE,oKACTD,OAAO,KAAK,SAAS,GACjB,8DAA8D,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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}