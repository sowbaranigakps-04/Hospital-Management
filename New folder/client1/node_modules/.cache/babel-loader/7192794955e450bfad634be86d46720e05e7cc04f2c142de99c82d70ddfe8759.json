{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import { Calendar, Clock, FileText, Users, ChevronDown, Home, UserCircle, Hospital, CheckCircle, XCircle } from 'lucide-react';\n// import { useNavigate } from 'react-router-dom';\n// import { BASE_URL } from '../constants/constants';\n// import { toast } from \"react-hot-toast\";\n\n// const Button = ({ children, variant = 'primary', className = '', ...props }) => (\n//   <button\n//     className={`inline-flex items-center justify-center px-4 py-2 text-sm font-medium rounded-md shadow-sm transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 ${\n//       variant === 'primary'\n//         ? 'text-white bg-blue-600 hover:bg-blue-700 focus:ring-blue-500'\n//         : variant === 'outline'\n//         ? 'text-blue-600 border-blue-600 hover:bg-blue-50 focus:ring-blue-500'\n//         : 'text-blue-600 border-blue-600 hover:bg-blue-50 focus:ring-blue-500'\n//     } ${className}`}\n//     {...props}\n//   >\n//     {children}\n//   </button>\n// );\n\n// const Card = ({ children, className = '' }) => (\n//   <div className={`bg-white rounded-lg shadow-md ${className}`}>\n//     {children}\n//   </div>\n// );\n\n// const CardHeader = ({ children, icon: Icon }) => (\n//   <div className=\"px-4 py-5 border-b border-gray-200 sm:px-6 flex items-center justify-between\">\n//     {children}\n//     {Icon && <Icon className=\"h-5 w-5 text-blue-600 ml-2\" />}\n//   </div>\n// );\n\n// const CardTitle = ({ children }) => (\n//   <h3 className=\"text-lg leading-6 font-medium text-gray-900\">{children}</h3>\n// );\n\n// const CardContent = ({ children }) => (\n//   <div className=\"px-4 py-5 sm:p-6\">{children}</div>\n// );\n\n// const CardFooter = ({ children }) => (\n//   <div className=\"px-4 py-4 sm:px-6\">{children}</div>\n// );\n\n// const Input = ({ ...props }) => (\n//   <input\n//     className=\"mt-1 focus:ring-blue-500 focus:border-blue-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md px-1 h-6\"\n//     {...props}\n//   />\n// );\n\n// const Label = ({ children, htmlFor }) => (\n//   <label htmlFor={htmlFor} className=\"block text-sm font-medium text-gray-700\">\n//     {children}\n//   </label>\n// );\n\n// const Select = ({ children, ...props }) => (\n//   <select\n//     className=\"mt-1 block w-full pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md\"\n//     {...props}\n//   >\n//     {children}\n//   </select>\n// );\n\n// export default function DoctorDashboard() {\n//   const [showAppointments, setShowAppointments] = useState(false);\n//   const [showPatients, setShowPatients] = useState(false);\n//   const [activeTab, setActiveTab] = useState('Dashboard');\n//   const [isEditing, setIsEditing] = useState(false);\n//   const [doctorInfo, setDoctorInfo] = useState(null);\n//   const [editedInfo, setEditedInfo] = useState(null);\n//   const [patients, setPatients] = useState([]);\n//   const [appointmentData, setAppointmentData] = useState({\n//     patientId: '',\n//     date: '',\n//     time: '',\n//     reason: '',\n//     prescriptionId: '',\n//     medication: '',\n//     dosage: '',\n//     frequency: '',\n//     tilldate: ''\n//   });\n//   const [availableSlots, setAvailableSlots] = useState([]);\n//   const [selectedAction, setSelectedAction] = useState('');\n//   const [existingPrescriptions, setExistingPrescriptions] = useState([]);\n//   const [appointments, setAppointments] = useState([]);\n//   const [completedAppointments, setCompletedAppointments] = useState([]);\n//   const [upcomingAppointments, setUpcomingAppointments] = useState([]);\n\n//   const navigate = useNavigate();\n\n//   const formatDate = (date) => {\n//     if (!date) return '';\n//     return new Date(date).toISOString().split('T')[0];\n//   };\n\n//   useEffect(() => {\n//     if (appointmentData.patientId) {\n//       fetchExistingPrescriptions(appointmentData.patientId);\n//     }\n//   }, [appointmentData.patientId]);\n\n//   const fetchExistingPrescriptions = async (patientId) => {\n//     if (!patientId) return;\n//     try {\n//       const token = localStorage.getItem('token');\n//       const response = await fetch(BASE_URL + `/doctor/prescriptions/${patientId}`, {\n//         headers: {\n//           'Authorization': `Bearer ${token}`\n//         }\n//       });\n//       if (response.ok) {\n//         const prescriptions = await response.json();\n//         setExistingPrescriptions(prescriptions);\n//       } else {\n//         console.error('Failed to fetch existing prescriptions');\n//         setExistingPrescriptions([]);\n//       }\n//     } catch (error) {\n//       console.error('Error fetching existing prescriptions:', error);\n//       setExistingPrescriptions([]);\n//     }\n//   };\n\n//   const fetchDoctorProfile = async () => {\n//     try {\n//       const token = localStorage.getItem('token');\n//       if (!token) {\n//         navigate('/login');\n//         return;\n//       }\n//       const response = await fetch(BASE_URL + '/doctor/profile', {\n//         headers: {\n//           'Authorization': `Bearer ${token}`\n//         }\n//       });\n//       if (response.ok) {\n//         const data = await response.json();\n//         setDoctorInfo(data);\n//         setEditedInfo(data);\n//       } else {\n//         console.error('Failed to fetch doctor profile');\n//       }\n//     } catch (error) {\n//       console.error('Error fetching doctor profile:', error);\n//     }\n//   };\n\n//   const fetchPatientsWithAppointments = async () => {\n//     try {\n//       const token = localStorage.getItem('token');\n//       if (!token) {\n//         navigate('/login');\n//         return;\n//       }\n//       const response = await fetch(BASE_URL + '/doctor/patients-with-appointments', {\n//         headers: {\n//           'Authorization': `Bearer ${token}`\n//         }\n//       });\n//       if (response.ok) {\n//         const data = await response.json();\n//         console.log('Patients with appointments:', data); // Add this line for debugging\n//         setPatients(data);\n//       } else {\n//         console.error('Failed to fetch patients with appointments');\n//       }\n//     } catch (error) {\n//       console.error('Error fetching patients with appointments:', error);\n//     }\n//   };\n\n//   const fetchAppointments = async () => {\n//     try {\n//       const token = localStorage.getItem('token');\n//       if (!token) {\n//         navigate('/login');\n//         return;\n//       }\n//       const response = await fetch(BASE_URL + '/doctor/appointments', {\n//         headers: {\n//           'Authorization': `Bearer ${token}`\n//         }\n//       });\n//       if (response.ok) {\n//         const data = await response.json();\n//         const now = new Date();\n//         // Filter and sort appointments by date and time in ascending order\n//         const sortedAppointments = data\n//           .filter(appointment => new Date(appointment.date) > now || (new Date(appointment.date).toLocaleDateString() === now.toLocaleDateString() && appointment.time > now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })))\n//           .sort((a, b) => new Date(a.date + ' ' + a.time) - new Date(b.date + ' ' + b.time));\n//         setAppointments(sortedAppointments);\n//       } else {\n//         console.error('Failed to fetch appointments');\n//       }\n//     } catch (error) {\n//       console.error('Error fetching appointments:', error);\n//     }\n//   };\n\n//   const fetchCompletedAppointments = async () => {\n//     try {\n//       const token = localStorage.getItem('token');\n//       if (!token) {\n//         navigate('/login');\n//         return;\n//       }\n\n//       const response = await fetch(BASE_URL + '/doctor/appointment/completed', {\n//         headers: {\n//           'Authorization': `Bearer ${token}`\n//         }\n//       });\n\n//       if (response.ok) {\n//         const data = await response.json();\n\n//         // Optional: Sort by date and time (descending if you want most recent first)\n//         const sortedCompleted = data.sort((a, b) => \n//           new Date(b.date + ' ' + b.time) - new Date(a.date + ' ' + a.time)\n//         );\n\n//         setCompletedAppointments(sortedCompleted); // make sure youâ€™ve defined this state\n//       } else {\n//         console.error('Failed to fetch completed appointments');\n//       }\n//     } catch (error) {\n//       console.error('Error fetching completed appointments:', error);\n//     }\n//   };\n\n//   const fetchUpcomingAppointments = async () => {\n//     try {\n//       const token = localStorage.getItem('token');\n//       if (!token) {\n//         navigate('/login');\n//         return;\n//       }\n\n//       const response = await fetch(BASE_URL + '/doctor/appointments/upcoming', {\n//         headers: {\n//           'Authorization': `Bearer ${token}`\n//         }\n//       });\n\n//       if (response.ok) {\n//         const data = await response.json();\n\n//         // Sort appointments by date and time (soonest first)\n//         const sortedUpcoming = data.sort((a, b) =>\n//           new Date(a.date + ' ' + a.time) - new Date(b.date + ' ' + b.time)\n//         );\n\n//         setUpcomingAppointments(sortedUpcoming); // Make sure you have this state defined\n//       } else {\n//         console.error('Failed to fetch upcoming appointments');\n//       }\n//     } catch (error) {\n//       console.error('Error fetching upcoming appointments:', error);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchDoctorProfile();\n//     fetchPatientsWithAppointments();\n//     fetchAppointments();\n//     fetchCompletedAppointments();\n//     fetchUpcomingAppointments();\n//   }, [fetchDoctorProfile,\n//     fetchPatientsWithAppointments,\n//     fetchAppointments,\n//     fetchCompletedAppointments,\n//     fetchUpcomingAppointments]);\n\n//   const handleUpdateStatus = async (appointmentId, status) => {\n//     try {\n//       const token = localStorage.getItem('token');\n//       const response = await fetch(BASE_URL + `/doctor/appointment/${appointmentId}/${status}`, {\n//         method: 'PATCH',\n//         headers: {\n//           'Content-Type': 'application/json',\n//           'Authorization': `Bearer ${token}`\n//         },\n//         body: JSON.stringify({ appointmentId })\n//       });\n\n//       if (response.ok) {\n//         // Optional: refresh appointments list\n//         fetchAppointments();\n//         fetchCompletedAppointments();\n//         return toast.success(\"Appointment status updated.\");\n//       } else {\n//         return toast.error(\"Failed to update appointment status\");\n//       }\n//     } catch (error) {\n//       console.error('Error updating appointment status:', error);\n//     }\n//   };\n\n//   const renderDashboard = () => (\n//     <>\n//       <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n//         <Card>\n//           <CardHeader icon={Calendar}>\n//             <CardTitle className=\"text-sm font-medium\">Today's Appointments</CardTitle>\n//           </CardHeader>\n//           <CardContent>\n//             <div className=\"text-2xl font-bold\">\n//               {appointments.length}\n//             </div>\n//             {appointments.length > 0 ? (\n//               <p className=\"text-xs text-gray-500\">\n//                 Next: {appointments[0].patientId.firstName} {appointments[0].patientId.lastName} at {appointments[0].time}\n//               </p>\n//             ) : (\n//               <p className=\"text-xs text-gray-500\">\n//                 No appointments today\n//               </p>\n//             )}\n//           </CardContent>\n//           <CardFooter className=\"p-2\">\n//             <Button \n//               variant=\"ghost\" \n//               className=\"w-full text-sm text-gray-500 hover:text-gray-900 transition-colors\"\n//               onClick={() => setShowAppointments(!showAppointments)}\n//             >\n//               {showAppointments ? \"Hide\" : \"View\"} Today's Appointments\n//               <ChevronDown className={`h-4 w-4 ml-2 transition-transform ${showAppointments ? \"rotate-180\" : \"\"}`} />\n//             </Button>\n//           </CardFooter>\n//           {showAppointments && (\n//             <div className=\"px-4 pb-4\">\n//               {appointments.length > 0 ? (\n//                 appointments.map((appointment, index) => (\n//                   <div\n//                     key={index}\n//                     className=\"flex justify-between items-center py-2 border-t\"\n//                   >\n//                     <div>\n//                       <p className=\"text-sm font-medium\">\n//                         {appointment.patientId.firstName} {appointment.patientId.lastName}\n//                       </p>\n//                       <p className=\"text-xs text-gray-500\">{appointment.reason}</p>\n//                     </div>\n//                     <div className=\"flex items-center gap-3\">\n//                       <p className=\"text-sm text-nowrap\">{appointment.time}</p>\n\n//                       {/* Mark as Completed */}\n//                       <button\n//                         onClick={() => handleUpdateStatus(appointment._id, 'completed')}\n//                         className=\"text-green-600 hover:text-green-800\"\n//                         title=\"Mark as Completed\"\n//                       >\n//                         <CheckCircle className=\"h-5 w-5\" />\n//                       </button>\n\n//                       {/* Cancel Appointment */}\n//                       <button\n//                         onClick={() => handleUpdateStatus(appointment._id, 'cancelled')}\n//                         className=\"text-red-600 hover:text-red-800\"\n//                         title=\"Cancel Appointment\"\n//                       >\n//                         <XCircle className=\"h-5 w-5\" />\n//                       </button>\n//                     </div>\n//                   </div>\n//                 ))\n//               ) : (\n//                 <p className=\"text-sm text-gray-500 text-center py-4\">\n//                   No appointments scheduled for today\n//                 </p>\n//               )}\n//             </div>\n//           )}\n\n//         </Card>\n//         <Card>\n//           <CardHeader icon={Users}>\n//             <CardTitle className=\"text-sm font-medium\">Patients</CardTitle>\n//           </CardHeader>\n//           <CardContent>\n//             <div className=\"text-2xl font-bold\">{patients.length}</div>\n//             <p className=\"text-xs text-gray-500\">Total patients under care</p>\n//           </CardContent>\n//           <CardFooter className=\"p-2\">\n//             <Button \n//               variant=\"ghost\" \n//               className=\"w-full text-sm text-gray-500 hover:text-gray-900 transition-colors\"\n//               onClick={() => setShowPatients(!showPatients)}\n//             >\n//               {showPatients ? \"Hide\" : \"View All\"} Patients\n//               <ChevronDown className={`h-4 w-4 ml-2 transition-transform ${showPatients ? \"rotate-180\" : \"\"}`} />\n//             </Button>\n//           </CardFooter>\n//           {showPatients && (\n//             <div className=\"px-4 pb-4\">\n//               {patients.map((patient, index) => (\n//                 <div key={index} className=\"py-2 border-t\">\n//                   <p className=\"text-sm font-medium\">\n//                     {patient.firstName} {patient.lastName}\n//                   </p>\n//                   <p className=\"text-xs text-gray-500\">\n//                     Last visit: {patient.lastVisit ? new Date(patient.lastVisit).toLocaleDateString('en-GB') : 'N/A'} | Next: {patient.nextAppointment ? new Date(patient.nextAppointment).toLocaleDateString('en-GB') : 'N/A'}\n//                   </p>\n//                 </div>\n//               ))}\n//             </div>\n//           )}\n//         </Card>\n//       </div>\n//       <div className=\"mt-8 grid grid-cols-1 md:grid-cols-2 gap-6\">\n//       <Card>\n//         <CardHeader>\n//           <CardTitle>Recent Activity</CardTitle>\n//         </CardHeader>\n//         <CardContent>\n//           <ul className=\"space-y-2\">\n//             {completedAppointments.slice(0, 3).map((appointment, index) => (\n//               <li key={appointment._id || index} className=\"flex items-center space-x-2\">\n//                 <Clock className=\"h-4 w-4 text-blue-600\" />\n//                 <span>\n//                   {appointment.status === \"completed\" ? \"Completed\" : \"Cancelled\"} appointment with{\" \"}\n//                   <strong>\n//                     {appointment.patientId?.firstName} {appointment.patientId?.lastName}\n//                   </strong>{\" \"}\n//                   on {new Date(appointment.date).toLocaleDateString()} at {appointment.time}\n//                 </span>\n//               </li>\n//             ))}\n\n//             {/* Static fallback if no completed appointments */}\n//             {completedAppointments.length === 0 && (\n//               <>\n//                 <li className=\"flex items-center space-x-2\">\n//                   <FileText className=\"h-4 w-4 text-gray-400\" />\n//                   <span className=\"text-gray-400\">No records found.</span>\n//                 </li>\n//               </>\n//             )}\n//           </ul>\n//         </CardContent>\n//       </Card>\n\n//       <Card>\n//         <CardHeader>\n//           <CardTitle>Upcoming Schedule</CardTitle>\n//         </CardHeader>\n//         <CardContent>\n//           <ul className=\"space-y-2\">\n//             {upcomingAppointments.slice(0, 3).map((appointment, index) => (\n//               <li key={appointment._id || index} className=\"flex items-center space-x-2\">\n//                 <Calendar className=\"h-4 w-4 text-blue-600\" />\n//                 <span>\n//                   Appointment with{\" \"}\n//                   <strong>\n//                     {appointment.patientId?.firstName} {appointment.patientId?.lastName}\n//                   </strong>{\" \"}\n//                   on {new Date(appointment.date).toLocaleDateString()} at {appointment.time}. <span className=\"text-gray-500\">{\"(\" + appointment.reason + \")\"}</span>\n//                 </span>\n//               </li>\n//             ))}\n\n//             {/* Fallback if there are no upcoming appointments */}\n//             {upcomingAppointments.length === 0 && (\n//               <>\n//                 <li className=\"flex items-center space-x-2\">\n//                   <Clock className=\"h-4 w-4 text-gray-400\" />\n//                   <span className=\"text-gray-400\">No upcoming schedule.</span>\n//                 </li>\n//               </>\n//             )}\n//           </ul>\n//         </CardContent>\n//       </Card>\n\n//       </div>\n//     </>\n//   );\n\n//   const renderProfile = () => {\n//     const handleInputChange = (e) => {\n//       const { name, value } = e.target;\n//       setEditedInfo(prev => ({ ...prev, [name]: value }));\n//     };\n\n//     const handleSave = async () => {\n//       try {\n//         const token = localStorage.getItem('token');\n//         const response = await fetch(BASE_URL + '/doctor/profile', {\n//           method: 'PUT',\n//           headers: {\n//             'Content-Type': 'application/json',\n//             'Authorization': `Bearer ${token}`\n//           },\n//           body: JSON.stringify(editedInfo)\n//         });\n//         if (response.ok) {\n//           const updatedProfile = await response.json();\n//           setDoctorInfo(updatedProfile);\n//           setIsEditing(false);\n//           return toast.success(\"Profile updated successfully.\");\n//         } else {\n//           await response.json();\n//           return toast.success(\"Failed to update profile.\");\n//         }\n//       } catch (error) {\n//         alert('Error updating doctor profile. Please try again.');\n//       }\n//     };\n\n//     return (\n//       <Card className=\"w-full max-w-2xl mx-auto\">\n//         <CardHeader>\n//           <CardTitle>Doctor Profile</CardTitle>\n//         </CardHeader>\n//         <CardContent>\n//           <form className=\"space-y-4\">\n//             <div className=\"grid grid-cols-2 gap-4\">\n//               <div className=\"space-y-2\">\n//                 <Label htmlFor=\"firstName\">First Name</Label>\n//                 <Input\n//                   id=\"firstName\"\n//                   name=\"firstName\"\n//                   value={isEditing ? editedInfo.firstName : doctorInfo?.firstName}\n//                   onChange={handleInputChange}\n//                   readOnly={!isEditing}\n//                 />\n//               </div>\n//               <div className=\"space-y-2\">\n//                 <Label htmlFor=\"lastName\">Last Name</Label>\n//                 <Input\n//                   id=\"lastName\"\n//                   name=\"lastName\"\n//                   value={isEditing ? editedInfo.lastName : doctorInfo?.lastName}\n//                   onChange={handleInputChange}\n//                   readOnly={!isEditing}\n//                 />\n//               </div>\n//             </div>\n//             <div className=\"space-y-2\">\n//               <Label htmlFor=\"email\">Email</Label>\n//               <Input\n//                 id=\"email\"\n//                 name=\"email\"\n//                 type=\"email\"\n//                 value={isEditing ? editedInfo.email : doctorInfo?.email}\n//                 onChange={handleInputChange}\n//                 readOnly={!isEditing}\n//               />\n//             </div>\n//             <div className=\"space-y-2\">\n//               <Label htmlFor=\"specialty\">Specialty</Label>\n//               <Input\n//                 id=\"specialty\"\n//                 name=\"specialty\"\n//                 value={isEditing ? editedInfo.specialty : doctorInfo?.specialty}\n//                 onChange={handleInputChange}\n//                 readOnly={!isEditing}\n//               />\n//             </div>\n//             <div className=\"space-y-2\">\n//               <Label htmlFor=\"licenseNumber\">License Number</Label>\n//               <Input\n//                 id=\"licenseNumber\"\n//                 name=\"licenseNumber\"\n//                 value={isEditing ? editedInfo.licenseNumber : doctorInfo?.licenseNumber}\n//                 onChange={handleInputChange}\n//                 readOnly={!isEditing}\n//               />\n//             </div>\n//             <div className=\"space-y-2\">\n//               <Label htmlFor=\"phoneNumber\">Phone Number</Label>\n//               <Input\n//                 id=\"phoneNumber\"\n//                 name=\"phoneNumber\"\n//                 value={isEditing ? editedInfo.phoneNumber : doctorInfo?.phoneNumber}\n//                 onChange={handleInputChange}\n//                 readOnly={!isEditing}\n//               />\n//             </div>\n//           </form>\n//         </CardContent>\n//         <CardFooter>\n//           {isEditing ? (\n//             <>\n//               <Button onClick={handleSave} className=\"mr-2\">Save</Button>\n//               <Button onClick={() => setIsEditing(false)} variant=\"outline\">Cancel</Button>\n//             </>\n//           ) : (\n//             <Button onClick={() => setIsEditing(true)} className=\"ml-auto\">Edit Profile</Button>\n//           )}\n//         </CardFooter>\n//       </Card>\n//     );\n//   };\n\n//   const renderPatientManagement = () => {\n//     const handleInputChange = (e) => {\n//       const { name, value } = e.target;\n//       setAppointmentData(prev => ({ ...prev, [name]: value }));\n\n//       if (name === 'action') {\n//         setSelectedAction(value);\n//       }\n\n//       if (name === 'patientId') {\n//         fetchExistingPrescriptions(value);\n//       }\n\n//       if (name === 'date' || name === 'patientId') {\n//         fetchAvailableSlots(appointmentData.patientId, value);\n//       }\n//     };\n\n//     const fetchAvailableSlots = async (patientId, date) => {\n//       if (!patientId || !date) return;\n//       try {\n//         const token = localStorage.getItem('token');\n//         const response = await fetch(BASE_URL + `/doctor/available-slots?patientId=${patientId}&date=${date}`, {\n//           headers: {\n//             'Authorization': `Bearer ${token}`\n//           }\n//         });\n//         if (response.ok) {\n//           const slots = await response.json();\n//           setAvailableSlots(slots);\n//         } else {\n//           console.error('Failed to fetch available slots');\n//           setAvailableSlots([]);\n//           return toast.error(\"Failed to fetch available slots\");\n//         }\n//       } catch (error) {\n//         console.error('Error fetching available slots:', error);\n//         setAvailableSlots([]);\n//       }\n//     };\n\n//     const handleEditPrescription = (prescription) => {\n//       setAppointmentData({\n//         ...appointmentData,\n//         prescriptionId: prescription._id,\n//         medication: prescription.medication || '',\n//         dosage: prescription.dosage || '',\n//         frequency: prescription.frequency || '',\n//         tilldate: prescription.tilldate || ''\n//       });\n//       setSelectedAction('prescribe-medication');\n//     };\n\n//     const handleDeletePrescription = async (prescriptionId) => {\n//       if (window.confirm('Are you sure you want to delete this prescription?')) {\n//         try {\n//           const token = localStorage.getItem('token');\n//           const response = await fetch(BASE_URL + `/doctor/prescriptions/${prescriptionId}`, {\n//             method: 'DELETE',\n//             headers: {\n//               'Authorization': `Bearer ${token}`\n//             }\n//           });\n//           if (response.ok) {\n//             fetchExistingPrescriptions(appointmentData.patientId);\n//             return toast.success('Prescription deleted successfully.');\n//           } else {\n//             const errorData = await response.json();\n//             console.error('Error details:', errorData.details);\n//             return toast.error(`Failed to delete prescription.`);\n//           }\n//         } catch (error) {\n//           alert('Error deleting prescription. Please try again.');\n//           console.error('Error deleting prescription:', error);\n//         }\n//       }\n//     };\n\n//     const handleSubmit = async (e) => {\n//       e.preventDefault();\n//       if (selectedAction === 'prescribe-medication') {\n//         try {\n//           const token = localStorage.getItem('token');\n//           const url = appointmentData.prescriptionId\n//             ? BASE_URL + `/doctor/prescriptions/${appointmentData.prescriptionId}`\n//             : BASE_URL + '/doctor/prescribe-medication';\n//           const method = appointmentData.prescriptionId ? 'PUT' : 'POST';\n//           const response = await fetch(url, {\n//             method,\n//             headers: {\n//               'Content-Type': 'application/json',\n//               'Authorization': `Bearer ${token}`\n//             },\n//             body: JSON.stringify({\n//               doctorId: appointmentData.doctorId,\n//               patientId: appointmentData.patientId,\n//               medication: appointmentData.medication,\n//               dosage: appointmentData.dosage,\n//               frequency: appointmentData.frequency,\n//               tilldate: appointmentData.tilldate\n//             })\n//           });\n//           if (response.ok) {\n//             //const result = \n//             await response.json();\n//             setAppointmentData({\n//               ...appointmentData,\n//               prescriptionId: '',\n//               medication: '',\n//               dosage: '',\n//               frequency: '',\n//               tilldate: ''\n//             });\n//             fetchExistingPrescriptions(appointmentData.patientId);\n//             setSelectedAction('');\n//             fetchExistingPrescriptions();\n//             return toast.success(appointmentData.prescriptionId ? 'Medication updated successfully' : 'Medication prescribed successfully');\n//           } else {\n//             const errorData = await response.json();\n//             return toast.error(`Failed to ${appointmentData.prescriptionId ? 'update' : 'prescribe'} medication: ${errorData.error}`);\n//           }\n//         } catch (error) {\n//           alert(`Error ${appointmentData.prescriptionId ? 'updating' : 'prescribing'} medication. Please try again.`);\n//         }\n//       } else if (selectedAction === 'schedule-appointment') {\n//         try {\n//           const token = localStorage.getItem('token');\n//           const response = await fetch(BASE_URL + '/doctor/schedule-appointment', {\n//             method: 'POST',\n//             headers: {\n//               'Content-Type': 'application/json',\n//               'Authorization': `Bearer ${token}`\n//             },\n//             body: JSON.stringify({\n//               patientId: appointmentData.patientId,\n//               date: appointmentData.date,\n//               time: appointmentData.time,\n//               reason: appointmentData.reason\n//             })\n//           });\n//           if (response.ok) {\n//             setAppointmentData({\n//               patientId: '',\n//               date: '',\n//               time: '',\n//               reason: '',\n//               prescriptionId: '',\n//               medication: '',\n//               dosage: '',\n//               frequency: '',\n//               tilldate: ''\n//             });\n//             setSelectedAction('');\n//             fetchAppointments();\n//             fetchUpcomingAppointments();\n//             return toast.success('Appointment scheduled successfully.');\n//           } else {\n//             const errorData = await response.json();\n//             return toast.error(`Failed to schedule appointment: ${errorData.error}`);\n//           }\n//         } catch (error) {\n//           alert('Error scheduling appointment. Please try again.');\n//         }\n//       }\n//     };\n\n//     return (\n//       <Card className=\"w-full max-w-2xl mx-auto\">\n//         <CardHeader>\n//           <CardTitle>Patient Management</CardTitle>\n//         </CardHeader>\n//         <CardContent>\n//           <form onSubmit={handleSubmit} className=\"space-y-4\">\n//             <div className=\"space-y-2\">\n//               <Label htmlFor=\"patient\">Select Patient</Label>\n//               <Select id=\"patient\" name=\"patientId\" value={appointmentData.patientId} onChange={handleInputChange}>\n//                 <option value=\"\">Choose a patient</option>\n//                 {patients.map((patient) => (\n//                   <option key={patient._id} value={patient._id}>\n//                     {patient.firstName} {patient.lastName}\n//                   </option>\n//                 ))}\n//               </Select>\n//             </div>\n//             <div className=\"space-y-2\">\n//               <Label htmlFor=\"action\">Action</Label>\n//               <Select id=\"action\" name=\"action\" value={selectedAction} onChange={handleInputChange}>\n//                 <option value=\"\">Choose an action</option>\n//                 <option value=\"schedule-appointment\">Schedule Appointment</option>\n//                 <option value=\"prescribe-medication\">Prescribe Medication</option>\n//               </Select>\n//             </div>\n//             {selectedAction === 'schedule-appointment' && (\n//               <>\n//                 <div className=\"space-y-2\">\n//                   <Label htmlFor=\"date\">Appointment Date</Label>\n//                   <Input id=\"date\" name=\"date\" type=\"date\" value={appointmentData.date} onChange={handleInputChange} />\n//                 </div>\n//                 <div className=\"space-y-2\">\n//                   <Label htmlFor=\"time\">Preferred Time</Label>\n//                   <Select id=\"time\" name=\"time\" value={appointmentData.time} onChange={handleInputChange} disabled={availableSlots.length === 0}>\n//                     <option value=\"\">Choose a time slot</option>\n//                     {availableSlots.map((slot) => (\n//                       <option key={slot} value={slot}>{slot}</option>\n//                     ))}\n//                   </Select>\n//                 </div>\n//                 <div className=\"space-y-2\">\n//                   <Label htmlFor=\"reason\">Reason for Visit</Label>\n//                   <Input id=\"reason\" name=\"reason\" value={appointmentData.reason} onChange={handleInputChange} placeholder=\"Brief description of your concern\" />\n//                 </div>\n//               </>\n//             )}\n//             {selectedAction === 'prescribe-medication' && (\n//               <>\n//                 {existingPrescriptions.length > 0 && (\n//                   <div className=\"space-y-2 mb-4\">\n//                     <Label>Existing Prescriptions</Label>\n//                     {existingPrescriptions.map((prescription) => (\n//                       <div key={prescription._id} className=\"flex items-center justify-between bg-gray-100 p-2 rounded\">\n//                         <span>{prescription.medication} - {prescription.dosage} - {prescription.frequency} - {\" (Till - \"}{new Date(prescription.tilldate).toLocaleDateString()}{\") \"}</span>\n//                         <div>\n//                           <Button type=\"button\" onClick={() => handleEditPrescription(prescription)} variant=\"outline\" size=\"sm\" className=\"mr-2\">Edit</Button>\n//                           <Button onClick={() => handleDeletePrescription(prescription._id)} variant=\"outline\" size=\"sm\">Delete</Button>\n//                         </div>\n//                       </div>\n//                     ))}\n//                   </div>\n//                 )}\n//                 <div className=\"space-y-2\">\n//                   <Label htmlFor=\"medication\">Medication</Label>\n//                   <Input id=\"medication\" name=\"medication\" value={appointmentData.medication || ''} onChange={handleInputChange} placeholder=\"Medication name\" />\n//                 </div>\n//                 <div className=\"space-y-2\">\n//                   <Label htmlFor=\"dosage\">Dosage</Label>\n//                   <Input id=\"dosage\" name=\"dosage\" value={appointmentData.dosage || ''} onChange={handleInputChange} placeholder=\"Dosage\" />\n//                 </div>\n//                 <div className=\"space-y-2\">\n//                   <Label htmlFor=\"frequency\">Frequency</Label>\n//                   <Input id=\"frequency\" name=\"frequency\" value={appointmentData.frequency || ''} onChange={handleInputChange} placeholder=\"Frequency\" />\n//                 </div>\n//                 <div className=\"space-y-2\">\n//                   <Label htmlFor=\"tilldate\">Till Date</Label>\n//                   <Input id=\"tilldate\" name=\"tilldate\" type=\"date\" value={formatDate(appointmentData.tilldate) || ''} onChange={handleInputChange} />\n//                 </div>\n//               </>\n//             )}\n//             <Button type=\"submit\" className=\"ml-auto\">\n//               {selectedAction === 'prescribe-medication' ? (appointmentData.prescriptionId ? 'Update Prescription' : 'Prescribe Medication') : 'Schedule Appointment'}\n//             </Button>\n//           </form>\n//         </CardContent>\n//       </Card>\n//     );\n//   };\n\n//   return (\n//     <div className=\"min-h-screen bg-blue-600\">\n//       <header className=\"bg-white p-4 flex justify-between items-center\">\n//         <div className=\"flex items-center space-x-2\">\n//           <Hospital className=\"h-6 w-6 text-blue-600\" />\n//           <span className=\"font-bold text-xl\">Sri Kumaran Clinic</span>\n//         </div>\n//         <Button variant=\"outline\" onClick={() => navigate('/')}>Sign Out</Button>\n//       </header>\n//       <nav className=\"bg-blue-700 text-white p-4\">\n//         <ul className=\"flex space-x-4 justify-center\">\n//           <li>\n//             <Button\n//               variant={activeTab === 'Dashboard' ? \"outline\" : \"ghost\"}\n//               className={`hover:bg-white hover:text-blue-600 ${activeTab === 'Dashboard' ? 'bg-white text-blue-600' : 'text-white'}`}\n//               onClick={() => setActiveTab('Dashboard')}\n//             >\n//               <Home className=\"w-4 h-4 mr-2\" />\n//               Dashboard\n//             </Button>\n//           </li>\n//           <li>\n//             <Button\n//               variant={activeTab === 'Profile' ? \"outline\" : \"ghost\"}\n//               className={`hover:bg-white hover:text-blue-600 ${activeTab === 'Profile' ? 'bg-white text-blue-600' : 'text-white'}`}\n//               onClick={() => setActiveTab('Profile')}\n//             >\n//               <UserCircle className=\"w-4 h-4 mr-2\" />\n//               Profile\n//             </Button>\n//           </li>\n//           <li>\n//             <Button\n//               variant={activeTab === 'Patient Management' ? \"outline\" : \"ghost\"}\n//               className={`hover:bg-white hover:text-blue-600 ${activeTab === 'Patient Management' ? 'bg-white text-blue-600' : 'text-white'}`}\n//               onClick={() => setActiveTab('Patient Management')}\n//             >\n//               <Users className=\"w-4 h-4 mr-2\" />\n//               Patient Management\n//             </Button>\n//           </li>\n//         </ul>\n//       </nav>\n//       <main className=\"container mx-auto px-4 py-8\">\n//         <h1 className=\"text-4xl font-bold text-white mb-8\">Welcome, Dr. {doctorInfo?.firstName} {doctorInfo?.lastName}</h1>\n//         {activeTab === 'Dashboard' && renderDashboard()}\n//         {activeTab === 'Profile' && renderProfile()}\n//         {activeTab === 'Patient Management' && renderPatientManagement()}\n//       </main>\n//     </div>\n//   );\n// }","map":{"version":3,"names":[],"sources":["D:/Downloads/SriKumaranClinic/frontend/src/components/Doctors.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import { Calendar, Clock, FileText, Users, ChevronDown, Home, UserCircle, Hospital, CheckCircle, XCircle } from 'lucide-react';\n// import { useNavigate } from 'react-router-dom';\n// import { BASE_URL } from '../constants/constants';\n// import { toast } from \"react-hot-toast\";\n\n// const Button = ({ children, variant = 'primary', className = '', ...props }) => (\n//   <button\n//     className={`inline-flex items-center justify-center px-4 py-2 text-sm font-medium rounded-md shadow-sm transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 ${\n//       variant === 'primary'\n//         ? 'text-white bg-blue-600 hover:bg-blue-700 focus:ring-blue-500'\n//         : variant === 'outline'\n//         ? 'text-blue-600 border-blue-600 hover:bg-blue-50 focus:ring-blue-500'\n//         : 'text-blue-600 border-blue-600 hover:bg-blue-50 focus:ring-blue-500'\n//     } ${className}`}\n//     {...props}\n//   >\n//     {children}\n//   </button>\n// );\n\n// const Card = ({ children, className = '' }) => (\n//   <div className={`bg-white rounded-lg shadow-md ${className}`}>\n//     {children}\n//   </div>\n// );\n\n// const CardHeader = ({ children, icon: Icon }) => (\n//   <div className=\"px-4 py-5 border-b border-gray-200 sm:px-6 flex items-center justify-between\">\n//     {children}\n//     {Icon && <Icon className=\"h-5 w-5 text-blue-600 ml-2\" />}\n//   </div>\n// );\n\n// const CardTitle = ({ children }) => (\n//   <h3 className=\"text-lg leading-6 font-medium text-gray-900\">{children}</h3>\n// );\n\n// const CardContent = ({ children }) => (\n//   <div className=\"px-4 py-5 sm:p-6\">{children}</div>\n// );\n\n// const CardFooter = ({ children }) => (\n//   <div className=\"px-4 py-4 sm:px-6\">{children}</div>\n// );\n\n// const Input = ({ ...props }) => (\n//   <input\n//     className=\"mt-1 focus:ring-blue-500 focus:border-blue-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md px-1 h-6\"\n//     {...props}\n//   />\n// );\n\n// const Label = ({ children, htmlFor }) => (\n//   <label htmlFor={htmlFor} className=\"block text-sm font-medium text-gray-700\">\n//     {children}\n//   </label>\n// );\n\n// const Select = ({ children, ...props }) => (\n//   <select\n//     className=\"mt-1 block w-full pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md\"\n//     {...props}\n//   >\n//     {children}\n//   </select>\n// );\n\n// export default function DoctorDashboard() {\n//   const [showAppointments, setShowAppointments] = useState(false);\n//   const [showPatients, setShowPatients] = useState(false);\n//   const [activeTab, setActiveTab] = useState('Dashboard');\n//   const [isEditing, setIsEditing] = useState(false);\n//   const [doctorInfo, setDoctorInfo] = useState(null);\n//   const [editedInfo, setEditedInfo] = useState(null);\n//   const [patients, setPatients] = useState([]);\n//   const [appointmentData, setAppointmentData] = useState({\n//     patientId: '',\n//     date: '',\n//     time: '',\n//     reason: '',\n//     prescriptionId: '',\n//     medication: '',\n//     dosage: '',\n//     frequency: '',\n//     tilldate: ''\n//   });\n//   const [availableSlots, setAvailableSlots] = useState([]);\n//   const [selectedAction, setSelectedAction] = useState('');\n//   const [existingPrescriptions, setExistingPrescriptions] = useState([]);\n//   const [appointments, setAppointments] = useState([]);\n//   const [completedAppointments, setCompletedAppointments] = useState([]);\n//   const [upcomingAppointments, setUpcomingAppointments] = useState([]);\n\n//   const navigate = useNavigate();\n\n//   const formatDate = (date) => {\n//     if (!date) return '';\n//     return new Date(date).toISOString().split('T')[0];\n//   };\n\n//   useEffect(() => {\n//     if (appointmentData.patientId) {\n//       fetchExistingPrescriptions(appointmentData.patientId);\n//     }\n//   }, [appointmentData.patientId]);\n\n//   const fetchExistingPrescriptions = async (patientId) => {\n//     if (!patientId) return;\n//     try {\n//       const token = localStorage.getItem('token');\n//       const response = await fetch(BASE_URL + `/doctor/prescriptions/${patientId}`, {\n//         headers: {\n//           'Authorization': `Bearer ${token}`\n//         }\n//       });\n//       if (response.ok) {\n//         const prescriptions = await response.json();\n//         setExistingPrescriptions(prescriptions);\n//       } else {\n//         console.error('Failed to fetch existing prescriptions');\n//         setExistingPrescriptions([]);\n//       }\n//     } catch (error) {\n//       console.error('Error fetching existing prescriptions:', error);\n//       setExistingPrescriptions([]);\n//     }\n//   };\n\n//   const fetchDoctorProfile = async () => {\n//     try {\n//       const token = localStorage.getItem('token');\n//       if (!token) {\n//         navigate('/login');\n//         return;\n//       }\n//       const response = await fetch(BASE_URL + '/doctor/profile', {\n//         headers: {\n//           'Authorization': `Bearer ${token}`\n//         }\n//       });\n//       if (response.ok) {\n//         const data = await response.json();\n//         setDoctorInfo(data);\n//         setEditedInfo(data);\n//       } else {\n//         console.error('Failed to fetch doctor profile');\n//       }\n//     } catch (error) {\n//       console.error('Error fetching doctor profile:', error);\n//     }\n//   };\n\n//   const fetchPatientsWithAppointments = async () => {\n//     try {\n//       const token = localStorage.getItem('token');\n//       if (!token) {\n//         navigate('/login');\n//         return;\n//       }\n//       const response = await fetch(BASE_URL + '/doctor/patients-with-appointments', {\n//         headers: {\n//           'Authorization': `Bearer ${token}`\n//         }\n//       });\n//       if (response.ok) {\n//         const data = await response.json();\n//         console.log('Patients with appointments:', data); // Add this line for debugging\n//         setPatients(data);\n//       } else {\n//         console.error('Failed to fetch patients with appointments');\n//       }\n//     } catch (error) {\n//       console.error('Error fetching patients with appointments:', error);\n//     }\n//   };\n\n//   const fetchAppointments = async () => {\n//     try {\n//       const token = localStorage.getItem('token');\n//       if (!token) {\n//         navigate('/login');\n//         return;\n//       }\n//       const response = await fetch(BASE_URL + '/doctor/appointments', {\n//         headers: {\n//           'Authorization': `Bearer ${token}`\n//         }\n//       });\n//       if (response.ok) {\n//         const data = await response.json();\n//         const now = new Date();\n//         // Filter and sort appointments by date and time in ascending order\n//         const sortedAppointments = data\n//           .filter(appointment => new Date(appointment.date) > now || (new Date(appointment.date).toLocaleDateString() === now.toLocaleDateString() && appointment.time > now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })))\n//           .sort((a, b) => new Date(a.date + ' ' + a.time) - new Date(b.date + ' ' + b.time));\n//         setAppointments(sortedAppointments);\n//       } else {\n//         console.error('Failed to fetch appointments');\n//       }\n//     } catch (error) {\n//       console.error('Error fetching appointments:', error);\n//     }\n//   };\n\n//   const fetchCompletedAppointments = async () => {\n//     try {\n//       const token = localStorage.getItem('token');\n//       if (!token) {\n//         navigate('/login');\n//         return;\n//       }\n  \n//       const response = await fetch(BASE_URL + '/doctor/appointment/completed', {\n//         headers: {\n//           'Authorization': `Bearer ${token}`\n//         }\n//       });\n  \n//       if (response.ok) {\n//         const data = await response.json();\n  \n//         // Optional: Sort by date and time (descending if you want most recent first)\n//         const sortedCompleted = data.sort((a, b) => \n//           new Date(b.date + ' ' + b.time) - new Date(a.date + ' ' + a.time)\n//         );\n  \n//         setCompletedAppointments(sortedCompleted); // make sure youâ€™ve defined this state\n//       } else {\n//         console.error('Failed to fetch completed appointments');\n//       }\n//     } catch (error) {\n//       console.error('Error fetching completed appointments:', error);\n//     }\n//   };\n  \n//   const fetchUpcomingAppointments = async () => {\n//     try {\n//       const token = localStorage.getItem('token');\n//       if (!token) {\n//         navigate('/login');\n//         return;\n//       }\n  \n//       const response = await fetch(BASE_URL + '/doctor/appointments/upcoming', {\n//         headers: {\n//           'Authorization': `Bearer ${token}`\n//         }\n//       });\n  \n//       if (response.ok) {\n//         const data = await response.json();\n  \n//         // Sort appointments by date and time (soonest first)\n//         const sortedUpcoming = data.sort((a, b) =>\n//           new Date(a.date + ' ' + a.time) - new Date(b.date + ' ' + b.time)\n//         );\n  \n//         setUpcomingAppointments(sortedUpcoming); // Make sure you have this state defined\n//       } else {\n//         console.error('Failed to fetch upcoming appointments');\n//       }\n//     } catch (error) {\n//       console.error('Error fetching upcoming appointments:', error);\n//     }\n//   };\n\n  \n//   useEffect(() => {\n//     fetchDoctorProfile();\n//     fetchPatientsWithAppointments();\n//     fetchAppointments();\n//     fetchCompletedAppointments();\n//     fetchUpcomingAppointments();\n//   }, [fetchDoctorProfile,\n//     fetchPatientsWithAppointments,\n//     fetchAppointments,\n//     fetchCompletedAppointments,\n//     fetchUpcomingAppointments]);\n\n//   const handleUpdateStatus = async (appointmentId, status) => {\n//     try {\n//       const token = localStorage.getItem('token');\n//       const response = await fetch(BASE_URL + `/doctor/appointment/${appointmentId}/${status}`, {\n//         method: 'PATCH',\n//         headers: {\n//           'Content-Type': 'application/json',\n//           'Authorization': `Bearer ${token}`\n//         },\n//         body: JSON.stringify({ appointmentId })\n//       });\n  \n//       if (response.ok) {\n//         // Optional: refresh appointments list\n//         fetchAppointments();\n//         fetchCompletedAppointments();\n//         return toast.success(\"Appointment status updated.\");\n//       } else {\n//         return toast.error(\"Failed to update appointment status\");\n//       }\n//     } catch (error) {\n//       console.error('Error updating appointment status:', error);\n//     }\n//   };\n  \n\n//   const renderDashboard = () => (\n//     <>\n//       <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n//         <Card>\n//           <CardHeader icon={Calendar}>\n//             <CardTitle className=\"text-sm font-medium\">Today's Appointments</CardTitle>\n//           </CardHeader>\n//           <CardContent>\n//             <div className=\"text-2xl font-bold\">\n//               {appointments.length}\n//             </div>\n//             {appointments.length > 0 ? (\n//               <p className=\"text-xs text-gray-500\">\n//                 Next: {appointments[0].patientId.firstName} {appointments[0].patientId.lastName} at {appointments[0].time}\n//               </p>\n//             ) : (\n//               <p className=\"text-xs text-gray-500\">\n//                 No appointments today\n//               </p>\n//             )}\n//           </CardContent>\n//           <CardFooter className=\"p-2\">\n//             <Button \n//               variant=\"ghost\" \n//               className=\"w-full text-sm text-gray-500 hover:text-gray-900 transition-colors\"\n//               onClick={() => setShowAppointments(!showAppointments)}\n//             >\n//               {showAppointments ? \"Hide\" : \"View\"} Today's Appointments\n//               <ChevronDown className={`h-4 w-4 ml-2 transition-transform ${showAppointments ? \"rotate-180\" : \"\"}`} />\n//             </Button>\n//           </CardFooter>\n//           {showAppointments && (\n//             <div className=\"px-4 pb-4\">\n//               {appointments.length > 0 ? (\n//                 appointments.map((appointment, index) => (\n//                   <div\n//                     key={index}\n//                     className=\"flex justify-between items-center py-2 border-t\"\n//                   >\n//                     <div>\n//                       <p className=\"text-sm font-medium\">\n//                         {appointment.patientId.firstName} {appointment.patientId.lastName}\n//                       </p>\n//                       <p className=\"text-xs text-gray-500\">{appointment.reason}</p>\n//                     </div>\n//                     <div className=\"flex items-center gap-3\">\n//                       <p className=\"text-sm text-nowrap\">{appointment.time}</p>\n\n//                       {/* Mark as Completed */}\n//                       <button\n//                         onClick={() => handleUpdateStatus(appointment._id, 'completed')}\n//                         className=\"text-green-600 hover:text-green-800\"\n//                         title=\"Mark as Completed\"\n//                       >\n//                         <CheckCircle className=\"h-5 w-5\" />\n//                       </button>\n\n//                       {/* Cancel Appointment */}\n//                       <button\n//                         onClick={() => handleUpdateStatus(appointment._id, 'cancelled')}\n//                         className=\"text-red-600 hover:text-red-800\"\n//                         title=\"Cancel Appointment\"\n//                       >\n//                         <XCircle className=\"h-5 w-5\" />\n//                       </button>\n//                     </div>\n//                   </div>\n//                 ))\n//               ) : (\n//                 <p className=\"text-sm text-gray-500 text-center py-4\">\n//                   No appointments scheduled for today\n//                 </p>\n//               )}\n//             </div>\n//           )}\n\n//         </Card>\n//         <Card>\n//           <CardHeader icon={Users}>\n//             <CardTitle className=\"text-sm font-medium\">Patients</CardTitle>\n//           </CardHeader>\n//           <CardContent>\n//             <div className=\"text-2xl font-bold\">{patients.length}</div>\n//             <p className=\"text-xs text-gray-500\">Total patients under care</p>\n//           </CardContent>\n//           <CardFooter className=\"p-2\">\n//             <Button \n//               variant=\"ghost\" \n//               className=\"w-full text-sm text-gray-500 hover:text-gray-900 transition-colors\"\n//               onClick={() => setShowPatients(!showPatients)}\n//             >\n//               {showPatients ? \"Hide\" : \"View All\"} Patients\n//               <ChevronDown className={`h-4 w-4 ml-2 transition-transform ${showPatients ? \"rotate-180\" : \"\"}`} />\n//             </Button>\n//           </CardFooter>\n//           {showPatients && (\n//             <div className=\"px-4 pb-4\">\n//               {patients.map((patient, index) => (\n//                 <div key={index} className=\"py-2 border-t\">\n//                   <p className=\"text-sm font-medium\">\n//                     {patient.firstName} {patient.lastName}\n//                   </p>\n//                   <p className=\"text-xs text-gray-500\">\n//                     Last visit: {patient.lastVisit ? new Date(patient.lastVisit).toLocaleDateString('en-GB') : 'N/A'} | Next: {patient.nextAppointment ? new Date(patient.nextAppointment).toLocaleDateString('en-GB') : 'N/A'}\n//                   </p>\n//                 </div>\n//               ))}\n//             </div>\n//           )}\n//         </Card>\n//       </div>\n//       <div className=\"mt-8 grid grid-cols-1 md:grid-cols-2 gap-6\">\n//       <Card>\n//         <CardHeader>\n//           <CardTitle>Recent Activity</CardTitle>\n//         </CardHeader>\n//         <CardContent>\n//           <ul className=\"space-y-2\">\n//             {completedAppointments.slice(0, 3).map((appointment, index) => (\n//               <li key={appointment._id || index} className=\"flex items-center space-x-2\">\n//                 <Clock className=\"h-4 w-4 text-blue-600\" />\n//                 <span>\n//                   {appointment.status === \"completed\" ? \"Completed\" : \"Cancelled\"} appointment with{\" \"}\n//                   <strong>\n//                     {appointment.patientId?.firstName} {appointment.patientId?.lastName}\n//                   </strong>{\" \"}\n//                   on {new Date(appointment.date).toLocaleDateString()} at {appointment.time}\n//                 </span>\n//               </li>\n//             ))}\n\n//             {/* Static fallback if no completed appointments */}\n//             {completedAppointments.length === 0 && (\n//               <>\n//                 <li className=\"flex items-center space-x-2\">\n//                   <FileText className=\"h-4 w-4 text-gray-400\" />\n//                   <span className=\"text-gray-400\">No records found.</span>\n//                 </li>\n//               </>\n//             )}\n//           </ul>\n//         </CardContent>\n//       </Card>\n\n//       <Card>\n//         <CardHeader>\n//           <CardTitle>Upcoming Schedule</CardTitle>\n//         </CardHeader>\n//         <CardContent>\n//           <ul className=\"space-y-2\">\n//             {upcomingAppointments.slice(0, 3).map((appointment, index) => (\n//               <li key={appointment._id || index} className=\"flex items-center space-x-2\">\n//                 <Calendar className=\"h-4 w-4 text-blue-600\" />\n//                 <span>\n//                   Appointment with{\" \"}\n//                   <strong>\n//                     {appointment.patientId?.firstName} {appointment.patientId?.lastName}\n//                   </strong>{\" \"}\n//                   on {new Date(appointment.date).toLocaleDateString()} at {appointment.time}. <span className=\"text-gray-500\">{\"(\" + appointment.reason + \")\"}</span>\n//                 </span>\n//               </li>\n//             ))}\n\n//             {/* Fallback if there are no upcoming appointments */}\n//             {upcomingAppointments.length === 0 && (\n//               <>\n//                 <li className=\"flex items-center space-x-2\">\n//                   <Clock className=\"h-4 w-4 text-gray-400\" />\n//                   <span className=\"text-gray-400\">No upcoming schedule.</span>\n//                 </li>\n//               </>\n//             )}\n//           </ul>\n//         </CardContent>\n//       </Card>\n\n//       </div>\n//     </>\n//   );\n\n//   const renderProfile = () => {\n//     const handleInputChange = (e) => {\n//       const { name, value } = e.target;\n//       setEditedInfo(prev => ({ ...prev, [name]: value }));\n//     };\n\n//     const handleSave = async () => {\n//       try {\n//         const token = localStorage.getItem('token');\n//         const response = await fetch(BASE_URL + '/doctor/profile', {\n//           method: 'PUT',\n//           headers: {\n//             'Content-Type': 'application/json',\n//             'Authorization': `Bearer ${token}`\n//           },\n//           body: JSON.stringify(editedInfo)\n//         });\n//         if (response.ok) {\n//           const updatedProfile = await response.json();\n//           setDoctorInfo(updatedProfile);\n//           setIsEditing(false);\n//           return toast.success(\"Profile updated successfully.\");\n//         } else {\n//           await response.json();\n//           return toast.success(\"Failed to update profile.\");\n//         }\n//       } catch (error) {\n//         alert('Error updating doctor profile. Please try again.');\n//       }\n//     };\n\n//     return (\n//       <Card className=\"w-full max-w-2xl mx-auto\">\n//         <CardHeader>\n//           <CardTitle>Doctor Profile</CardTitle>\n//         </CardHeader>\n//         <CardContent>\n//           <form className=\"space-y-4\">\n//             <div className=\"grid grid-cols-2 gap-4\">\n//               <div className=\"space-y-2\">\n//                 <Label htmlFor=\"firstName\">First Name</Label>\n//                 <Input\n//                   id=\"firstName\"\n//                   name=\"firstName\"\n//                   value={isEditing ? editedInfo.firstName : doctorInfo?.firstName}\n//                   onChange={handleInputChange}\n//                   readOnly={!isEditing}\n//                 />\n//               </div>\n//               <div className=\"space-y-2\">\n//                 <Label htmlFor=\"lastName\">Last Name</Label>\n//                 <Input\n//                   id=\"lastName\"\n//                   name=\"lastName\"\n//                   value={isEditing ? editedInfo.lastName : doctorInfo?.lastName}\n//                   onChange={handleInputChange}\n//                   readOnly={!isEditing}\n//                 />\n//               </div>\n//             </div>\n//             <div className=\"space-y-2\">\n//               <Label htmlFor=\"email\">Email</Label>\n//               <Input\n//                 id=\"email\"\n//                 name=\"email\"\n//                 type=\"email\"\n//                 value={isEditing ? editedInfo.email : doctorInfo?.email}\n//                 onChange={handleInputChange}\n//                 readOnly={!isEditing}\n//               />\n//             </div>\n//             <div className=\"space-y-2\">\n//               <Label htmlFor=\"specialty\">Specialty</Label>\n//               <Input\n//                 id=\"specialty\"\n//                 name=\"specialty\"\n//                 value={isEditing ? editedInfo.specialty : doctorInfo?.specialty}\n//                 onChange={handleInputChange}\n//                 readOnly={!isEditing}\n//               />\n//             </div>\n//             <div className=\"space-y-2\">\n//               <Label htmlFor=\"licenseNumber\">License Number</Label>\n//               <Input\n//                 id=\"licenseNumber\"\n//                 name=\"licenseNumber\"\n//                 value={isEditing ? editedInfo.licenseNumber : doctorInfo?.licenseNumber}\n//                 onChange={handleInputChange}\n//                 readOnly={!isEditing}\n//               />\n//             </div>\n//             <div className=\"space-y-2\">\n//               <Label htmlFor=\"phoneNumber\">Phone Number</Label>\n//               <Input\n//                 id=\"phoneNumber\"\n//                 name=\"phoneNumber\"\n//                 value={isEditing ? editedInfo.phoneNumber : doctorInfo?.phoneNumber}\n//                 onChange={handleInputChange}\n//                 readOnly={!isEditing}\n//               />\n//             </div>\n//           </form>\n//         </CardContent>\n//         <CardFooter>\n//           {isEditing ? (\n//             <>\n//               <Button onClick={handleSave} className=\"mr-2\">Save</Button>\n//               <Button onClick={() => setIsEditing(false)} variant=\"outline\">Cancel</Button>\n//             </>\n//           ) : (\n//             <Button onClick={() => setIsEditing(true)} className=\"ml-auto\">Edit Profile</Button>\n//           )}\n//         </CardFooter>\n//       </Card>\n//     );\n//   };\n\n//   const renderPatientManagement = () => {\n//     const handleInputChange = (e) => {\n//       const { name, value } = e.target;\n//       setAppointmentData(prev => ({ ...prev, [name]: value }));\n\n//       if (name === 'action') {\n//         setSelectedAction(value);\n//       }\n\n//       if (name === 'patientId') {\n//         fetchExistingPrescriptions(value);\n//       }\n\n//       if (name === 'date' || name === 'patientId') {\n//         fetchAvailableSlots(appointmentData.patientId, value);\n//       }\n//     };\n\n//     const fetchAvailableSlots = async (patientId, date) => {\n//       if (!patientId || !date) return;\n//       try {\n//         const token = localStorage.getItem('token');\n//         const response = await fetch(BASE_URL + `/doctor/available-slots?patientId=${patientId}&date=${date}`, {\n//           headers: {\n//             'Authorization': `Bearer ${token}`\n//           }\n//         });\n//         if (response.ok) {\n//           const slots = await response.json();\n//           setAvailableSlots(slots);\n//         } else {\n//           console.error('Failed to fetch available slots');\n//           setAvailableSlots([]);\n//           return toast.error(\"Failed to fetch available slots\");\n//         }\n//       } catch (error) {\n//         console.error('Error fetching available slots:', error);\n//         setAvailableSlots([]);\n//       }\n//     };\n\n//     const handleEditPrescription = (prescription) => {\n//       setAppointmentData({\n//         ...appointmentData,\n//         prescriptionId: prescription._id,\n//         medication: prescription.medication || '',\n//         dosage: prescription.dosage || '',\n//         frequency: prescription.frequency || '',\n//         tilldate: prescription.tilldate || ''\n//       });\n//       setSelectedAction('prescribe-medication');\n//     };\n\n//     const handleDeletePrescription = async (prescriptionId) => {\n//       if (window.confirm('Are you sure you want to delete this prescription?')) {\n//         try {\n//           const token = localStorage.getItem('token');\n//           const response = await fetch(BASE_URL + `/doctor/prescriptions/${prescriptionId}`, {\n//             method: 'DELETE',\n//             headers: {\n//               'Authorization': `Bearer ${token}`\n//             }\n//           });\n//           if (response.ok) {\n//             fetchExistingPrescriptions(appointmentData.patientId);\n//             return toast.success('Prescription deleted successfully.');\n//           } else {\n//             const errorData = await response.json();\n//             console.error('Error details:', errorData.details);\n//             return toast.error(`Failed to delete prescription.`);\n//           }\n//         } catch (error) {\n//           alert('Error deleting prescription. Please try again.');\n//           console.error('Error deleting prescription:', error);\n//         }\n//       }\n//     };\n\n//     const handleSubmit = async (e) => {\n//       e.preventDefault();\n//       if (selectedAction === 'prescribe-medication') {\n//         try {\n//           const token = localStorage.getItem('token');\n//           const url = appointmentData.prescriptionId\n//             ? BASE_URL + `/doctor/prescriptions/${appointmentData.prescriptionId}`\n//             : BASE_URL + '/doctor/prescribe-medication';\n//           const method = appointmentData.prescriptionId ? 'PUT' : 'POST';\n//           const response = await fetch(url, {\n//             method,\n//             headers: {\n//               'Content-Type': 'application/json',\n//               'Authorization': `Bearer ${token}`\n//             },\n//             body: JSON.stringify({\n//               doctorId: appointmentData.doctorId,\n//               patientId: appointmentData.patientId,\n//               medication: appointmentData.medication,\n//               dosage: appointmentData.dosage,\n//               frequency: appointmentData.frequency,\n//               tilldate: appointmentData.tilldate\n//             })\n//           });\n//           if (response.ok) {\n//             //const result = \n//             await response.json();\n//             setAppointmentData({\n//               ...appointmentData,\n//               prescriptionId: '',\n//               medication: '',\n//               dosage: '',\n//               frequency: '',\n//               tilldate: ''\n//             });\n//             fetchExistingPrescriptions(appointmentData.patientId);\n//             setSelectedAction('');\n//             fetchExistingPrescriptions();\n//             return toast.success(appointmentData.prescriptionId ? 'Medication updated successfully' : 'Medication prescribed successfully');\n//           } else {\n//             const errorData = await response.json();\n//             return toast.error(`Failed to ${appointmentData.prescriptionId ? 'update' : 'prescribe'} medication: ${errorData.error}`);\n//           }\n//         } catch (error) {\n//           alert(`Error ${appointmentData.prescriptionId ? 'updating' : 'prescribing'} medication. Please try again.`);\n//         }\n//       } else if (selectedAction === 'schedule-appointment') {\n//         try {\n//           const token = localStorage.getItem('token');\n//           const response = await fetch(BASE_URL + '/doctor/schedule-appointment', {\n//             method: 'POST',\n//             headers: {\n//               'Content-Type': 'application/json',\n//               'Authorization': `Bearer ${token}`\n//             },\n//             body: JSON.stringify({\n//               patientId: appointmentData.patientId,\n//               date: appointmentData.date,\n//               time: appointmentData.time,\n//               reason: appointmentData.reason\n//             })\n//           });\n//           if (response.ok) {\n//             setAppointmentData({\n//               patientId: '',\n//               date: '',\n//               time: '',\n//               reason: '',\n//               prescriptionId: '',\n//               medication: '',\n//               dosage: '',\n//               frequency: '',\n//               tilldate: ''\n//             });\n//             setSelectedAction('');\n//             fetchAppointments();\n//             fetchUpcomingAppointments();\n//             return toast.success('Appointment scheduled successfully.');\n//           } else {\n//             const errorData = await response.json();\n//             return toast.error(`Failed to schedule appointment: ${errorData.error}`);\n//           }\n//         } catch (error) {\n//           alert('Error scheduling appointment. Please try again.');\n//         }\n//       }\n//     };\n\n//     return (\n//       <Card className=\"w-full max-w-2xl mx-auto\">\n//         <CardHeader>\n//           <CardTitle>Patient Management</CardTitle>\n//         </CardHeader>\n//         <CardContent>\n//           <form onSubmit={handleSubmit} className=\"space-y-4\">\n//             <div className=\"space-y-2\">\n//               <Label htmlFor=\"patient\">Select Patient</Label>\n//               <Select id=\"patient\" name=\"patientId\" value={appointmentData.patientId} onChange={handleInputChange}>\n//                 <option value=\"\">Choose a patient</option>\n//                 {patients.map((patient) => (\n//                   <option key={patient._id} value={patient._id}>\n//                     {patient.firstName} {patient.lastName}\n//                   </option>\n//                 ))}\n//               </Select>\n//             </div>\n//             <div className=\"space-y-2\">\n//               <Label htmlFor=\"action\">Action</Label>\n//               <Select id=\"action\" name=\"action\" value={selectedAction} onChange={handleInputChange}>\n//                 <option value=\"\">Choose an action</option>\n//                 <option value=\"schedule-appointment\">Schedule Appointment</option>\n//                 <option value=\"prescribe-medication\">Prescribe Medication</option>\n//               </Select>\n//             </div>\n//             {selectedAction === 'schedule-appointment' && (\n//               <>\n//                 <div className=\"space-y-2\">\n//                   <Label htmlFor=\"date\">Appointment Date</Label>\n//                   <Input id=\"date\" name=\"date\" type=\"date\" value={appointmentData.date} onChange={handleInputChange} />\n//                 </div>\n//                 <div className=\"space-y-2\">\n//                   <Label htmlFor=\"time\">Preferred Time</Label>\n//                   <Select id=\"time\" name=\"time\" value={appointmentData.time} onChange={handleInputChange} disabled={availableSlots.length === 0}>\n//                     <option value=\"\">Choose a time slot</option>\n//                     {availableSlots.map((slot) => (\n//                       <option key={slot} value={slot}>{slot}</option>\n//                     ))}\n//                   </Select>\n//                 </div>\n//                 <div className=\"space-y-2\">\n//                   <Label htmlFor=\"reason\">Reason for Visit</Label>\n//                   <Input id=\"reason\" name=\"reason\" value={appointmentData.reason} onChange={handleInputChange} placeholder=\"Brief description of your concern\" />\n//                 </div>\n//               </>\n//             )}\n//             {selectedAction === 'prescribe-medication' && (\n//               <>\n//                 {existingPrescriptions.length > 0 && (\n//                   <div className=\"space-y-2 mb-4\">\n//                     <Label>Existing Prescriptions</Label>\n//                     {existingPrescriptions.map((prescription) => (\n//                       <div key={prescription._id} className=\"flex items-center justify-between bg-gray-100 p-2 rounded\">\n//                         <span>{prescription.medication} - {prescription.dosage} - {prescription.frequency} - {\" (Till - \"}{new Date(prescription.tilldate).toLocaleDateString()}{\") \"}</span>\n//                         <div>\n//                           <Button type=\"button\" onClick={() => handleEditPrescription(prescription)} variant=\"outline\" size=\"sm\" className=\"mr-2\">Edit</Button>\n//                           <Button onClick={() => handleDeletePrescription(prescription._id)} variant=\"outline\" size=\"sm\">Delete</Button>\n//                         </div>\n//                       </div>\n//                     ))}\n//                   </div>\n//                 )}\n//                 <div className=\"space-y-2\">\n//                   <Label htmlFor=\"medication\">Medication</Label>\n//                   <Input id=\"medication\" name=\"medication\" value={appointmentData.medication || ''} onChange={handleInputChange} placeholder=\"Medication name\" />\n//                 </div>\n//                 <div className=\"space-y-2\">\n//                   <Label htmlFor=\"dosage\">Dosage</Label>\n//                   <Input id=\"dosage\" name=\"dosage\" value={appointmentData.dosage || ''} onChange={handleInputChange} placeholder=\"Dosage\" />\n//                 </div>\n//                 <div className=\"space-y-2\">\n//                   <Label htmlFor=\"frequency\">Frequency</Label>\n//                   <Input id=\"frequency\" name=\"frequency\" value={appointmentData.frequency || ''} onChange={handleInputChange} placeholder=\"Frequency\" />\n//                 </div>\n//                 <div className=\"space-y-2\">\n//                   <Label htmlFor=\"tilldate\">Till Date</Label>\n//                   <Input id=\"tilldate\" name=\"tilldate\" type=\"date\" value={formatDate(appointmentData.tilldate) || ''} onChange={handleInputChange} />\n//                 </div>\n//               </>\n//             )}\n//             <Button type=\"submit\" className=\"ml-auto\">\n//               {selectedAction === 'prescribe-medication' ? (appointmentData.prescriptionId ? 'Update Prescription' : 'Prescribe Medication') : 'Schedule Appointment'}\n//             </Button>\n//           </form>\n//         </CardContent>\n//       </Card>\n//     );\n//   };\n\n//   return (\n//     <div className=\"min-h-screen bg-blue-600\">\n//       <header className=\"bg-white p-4 flex justify-between items-center\">\n//         <div className=\"flex items-center space-x-2\">\n//           <Hospital className=\"h-6 w-6 text-blue-600\" />\n//           <span className=\"font-bold text-xl\">Sri Kumaran Clinic</span>\n//         </div>\n//         <Button variant=\"outline\" onClick={() => navigate('/')}>Sign Out</Button>\n//       </header>\n//       <nav className=\"bg-blue-700 text-white p-4\">\n//         <ul className=\"flex space-x-4 justify-center\">\n//           <li>\n//             <Button\n//               variant={activeTab === 'Dashboard' ? \"outline\" : \"ghost\"}\n//               className={`hover:bg-white hover:text-blue-600 ${activeTab === 'Dashboard' ? 'bg-white text-blue-600' : 'text-white'}`}\n//               onClick={() => setActiveTab('Dashboard')}\n//             >\n//               <Home className=\"w-4 h-4 mr-2\" />\n//               Dashboard\n//             </Button>\n//           </li>\n//           <li>\n//             <Button\n//               variant={activeTab === 'Profile' ? \"outline\" : \"ghost\"}\n//               className={`hover:bg-white hover:text-blue-600 ${activeTab === 'Profile' ? 'bg-white text-blue-600' : 'text-white'}`}\n//               onClick={() => setActiveTab('Profile')}\n//             >\n//               <UserCircle className=\"w-4 h-4 mr-2\" />\n//               Profile\n//             </Button>\n//           </li>\n//           <li>\n//             <Button\n//               variant={activeTab === 'Patient Management' ? \"outline\" : \"ghost\"}\n//               className={`hover:bg-white hover:text-blue-600 ${activeTab === 'Patient Management' ? 'bg-white text-blue-600' : 'text-white'}`}\n//               onClick={() => setActiveTab('Patient Management')}\n//             >\n//               <Users className=\"w-4 h-4 mr-2\" />\n//               Patient Management\n//             </Button>\n//           </li>\n//         </ul>\n//       </nav>\n//       <main className=\"container mx-auto px-4 py-8\">\n//         <h1 className=\"text-4xl font-bold text-white mb-8\">Welcome, Dr. {doctorInfo?.firstName} {doctorInfo?.lastName}</h1>\n//         {activeTab === 'Dashboard' && renderDashboard()}\n//         {activeTab === 'Profile' && renderProfile()}\n//         {activeTab === 'Patient Management' && renderPatientManagement()}\n//       </main>\n//     </div>\n//   );\n// }\n\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}