{"ast":null,"code":"var _jsxFileName = \"D:\\\\Downloads\\\\SriKumaranClinic\\\\frontend\\\\src\\\\components\\\\Doctors.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import { Calendar, Clock, FileText, Users, ChevronDown, Home, UserCircle, Hospital, CheckCircle, XCircle } from 'lucide-react';\n// import { useNavigate } from 'react-router-dom';\n// import { BASE_URL } from '../constants/constants';\n// import { toast } from \"react-hot-toast\";\n\n// const Button = ({ children, variant = 'primary', className = '', ...props }) => (\n//   <button\n//     className={`inline-flex items-center justify-center px-4 py-2 text-sm font-medium rounded-md shadow-sm transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 ${\n//       variant === 'primary'\n//         ? 'text-white bg-blue-600 hover:bg-blue-700 focus:ring-blue-500'\n//         : variant === 'outline'\n//         ? 'text-blue-600 border-blue-600 hover:bg-blue-50 focus:ring-blue-500'\n//         : 'text-blue-600 border-blue-600 hover:bg-blue-50 focus:ring-blue-500'\n//     } ${className}`}\n//     {...props}\n//   >\n//     {children}\n//   </button>\n// );\n\n// const Card = ({ children, className = '' }) => (\n//   <div className={`bg-white rounded-lg shadow-md ${className}`}>\n//     {children}\n//   </div>\n// );\n\n// const CardHeader = ({ children, icon: Icon }) => (\n//   <div className=\"px-4 py-5 border-b border-gray-200 sm:px-6 flex items-center justify-between\">\n//     {children}\n//     {Icon && <Icon className=\"h-5 w-5 text-blue-600 ml-2\" />}\n//   </div>\n// );\n\n// const CardTitle = ({ children }) => (\n//   <h3 className=\"text-lg leading-6 font-medium text-gray-900\">{children}</h3>\n// );\n\n// const CardContent = ({ children }) => (\n//   <div className=\"px-4 py-5 sm:p-6\">{children}</div>\n// );\n\n// const CardFooter = ({ children }) => (\n//   <div className=\"px-4 py-4 sm:px-6\">{children}</div>\n// );\n\n// const Input = ({ ...props }) => (\n//   <input\n//     className=\"mt-1 focus:ring-blue-500 focus:border-blue-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md px-1 h-6\"\n//     {...props}\n//   />\n// );\n\n// const Label = ({ children, htmlFor }) => (\n//   <label htmlFor={htmlFor} className=\"block text-sm font-medium text-gray-700\">\n//     {children}\n//   </label>\n// );\n\n// const Select = ({ children, ...props }) => (\n//   <select\n//     className=\"mt-1 block w-full pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md\"\n//     {...props}\n//   >\n//     {children}\n//   </select>\n// );\n\n// export default function DoctorDashboard() {\n//   const [showAppointments, setShowAppointments] = useState(false);\n//   const [showPatients, setShowPatients] = useState(false);\n//   const [activeTab, setActiveTab] = useState('Dashboard');\n//   const [isEditing, setIsEditing] = useState(false);\n//   const [doctorInfo, setDoctorInfo] = useState(null);\n//   const [editedInfo, setEditedInfo] = useState(null);\n//   const [patients, setPatients] = useState([]);\n//   const [appointmentData, setAppointmentData] = useState({\n//     patientId: '',\n//     date: '',\n//     time: '',\n//     reason: '',\n//     prescriptionId: '',\n//     medication: '',\n//     dosage: '',\n//     frequency: '',\n//     tilldate: ''\n//   });\n//   const [availableSlots, setAvailableSlots] = useState([]);\n//   const [selectedAction, setSelectedAction] = useState('');\n//   const [existingPrescriptions, setExistingPrescriptions] = useState([]);\n//   const [appointments, setAppointments] = useState([]);\n//   const [completedAppointments, setCompletedAppointments] = useState([]);\n//   const [upcomingAppointments, setUpcomingAppointments] = useState([]);\n\n//   const navigate = useNavigate();\n\n//   const formatDate = (date) => {\n//     if (!date) return '';\n//     return new Date(date).toISOString().split('T')[0];\n//   };\n\n//   useEffect(() => {\n//     if (appointmentData.patientId) {\n//       fetchExistingPrescriptions(appointmentData.patientId);\n//     }\n//   }, [appointmentData.patientId]);\n\n//   const fetchExistingPrescriptions = async (patientId) => {\n//     if (!patientId) return;\n//     try {\n//       const token = localStorage.getItem('token');\n//       const response = await fetch(BASE_URL + `/doctor/prescriptions/${patientId}`, {\n//         headers: {\n//           'Authorization': `Bearer ${token}`\n//         }\n//       });\n//       if (response.ok) {\n//         const prescriptions = await response.json();\n//         setExistingPrescriptions(prescriptions);\n//       } else {\n//         console.error('Failed to fetch existing prescriptions');\n//         setExistingPrescriptions([]);\n//       }\n//     } catch (error) {\n//       console.error('Error fetching existing prescriptions:', error);\n//       setExistingPrescriptions([]);\n//     }\n//   };\n\n//   const fetchDoctorProfile = async () => {\n//     try {\n//       const token = localStorage.getItem('token');\n//       if (!token) {\n//         navigate('/login');\n//         return;\n//       }\n//       const response = await fetch(BASE_URL + '/doctor/profile', {\n//         headers: {\n//           'Authorization': `Bearer ${token}`\n//         }\n//       });\n//       if (response.ok) {\n//         const data = await response.json();\n//         setDoctorInfo(data);\n//         setEditedInfo(data);\n//       } else {\n//         console.error('Failed to fetch doctor profile');\n//       }\n//     } catch (error) {\n//       console.error('Error fetching doctor profile:', error);\n//     }\n//   };\n\n//   const fetchPatientsWithAppointments = async () => {\n//     try {\n//       const token = localStorage.getItem('token');\n//       if (!token) {\n//         navigate('/login');\n//         return;\n//       }\n//       const response = await fetch(BASE_URL + '/doctor/patients-with-appointments', {\n//         headers: {\n//           'Authorization': `Bearer ${token}`\n//         }\n//       });\n//       if (response.ok) {\n//         const data = await response.json();\n//         console.log('Patients with appointments:', data); // Add this line for debugging\n//         setPatients(data);\n//       } else {\n//         console.error('Failed to fetch patients with appointments');\n//       }\n//     } catch (error) {\n//       console.error('Error fetching patients with appointments:', error);\n//     }\n//   };\n\n//   const fetchAppointments = async () => {\n//     try {\n//       const token = localStorage.getItem('token');\n//       if (!token) {\n//         navigate('/login');\n//         return;\n//       }\n//       const response = await fetch(BASE_URL + '/doctor/appointments', {\n//         headers: {\n//           'Authorization': `Bearer ${token}`\n//         }\n//       });\n//       if (response.ok) {\n//         const data = await response.json();\n//         const now = new Date();\n//         // Filter and sort appointments by date and time in ascending order\n//         const sortedAppointments = data\n//           .filter(appointment => new Date(appointment.date) > now || (new Date(appointment.date).toLocaleDateString() === now.toLocaleDateString() && appointment.time > now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })))\n//           .sort((a, b) => new Date(a.date + ' ' + a.time) - new Date(b.date + ' ' + b.time));\n//         setAppointments(sortedAppointments);\n//       } else {\n//         console.error('Failed to fetch appointments');\n//       }\n//     } catch (error) {\n//       console.error('Error fetching appointments:', error);\n//     }\n//   };\n\n//   const fetchCompletedAppointments = async () => {\n//     try {\n//       const token = localStorage.getItem('token');\n//       if (!token) {\n//         navigate('/login');\n//         return;\n//       }\n\n//       const response = await fetch(BASE_URL + '/doctor/appointment/completed', {\n//         headers: {\n//           'Authorization': `Bearer ${token}`\n//         }\n//       });\n\n//       if (response.ok) {\n//         const data = await response.json();\n\n//         // Optional: Sort by date and time (descending if you want most recent first)\n//         const sortedCompleted = data.sort((a, b) => \n//           new Date(b.date + ' ' + b.time) - new Date(a.date + ' ' + a.time)\n//         );\n\n//         setCompletedAppointments(sortedCompleted); // make sure youâ€™ve defined this state\n//       } else {\n//         console.error('Failed to fetch completed appointments');\n//       }\n//     } catch (error) {\n//       console.error('Error fetching completed appointments:', error);\n//     }\n//   };\n\n//   const fetchUpcomingAppointments = async () => {\n//     try {\n//       const token = localStorage.getItem('token');\n//       if (!token) {\n//         navigate('/login');\n//         return;\n//       }\n\n//       const response = await fetch(BASE_URL + '/doctor/appointments/upcoming', {\n//         headers: {\n//           'Authorization': `Bearer ${token}`\n//         }\n//       });\n\n//       if (response.ok) {\n//         const data = await response.json();\n\n//         // Sort appointments by date and time (soonest first)\n//         const sortedUpcoming = data.sort((a, b) =>\n//           new Date(a.date + ' ' + a.time) - new Date(b.date + ' ' + b.time)\n//         );\n\n//         setUpcomingAppointments(sortedUpcoming); // Make sure you have this state defined\n//       } else {\n//         console.error('Failed to fetch upcoming appointments');\n//       }\n//     } catch (error) {\n//       console.error('Error fetching upcoming appointments:', error);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchDoctorProfile();\n//     fetchPatientsWithAppointments();\n//     fetchAppointments();\n//     fetchCompletedAppointments();\n//     fetchUpcomingAppointments();\n//   }, [fetchDoctorProfile,\n//     fetchPatientsWithAppointments,\n//     fetchAppointments,\n//     fetchCompletedAppointments,\n//     fetchUpcomingAppointments]);\n\n//   const handleUpdateStatus = async (appointmentId, status) => {\n//     try {\n//       const token = localStorage.getItem('token');\n//       const response = await fetch(BASE_URL + `/doctor/appointment/${appointmentId}/${status}`, {\n//         method: 'PATCH',\n//         headers: {\n//           'Content-Type': 'application/json',\n//           'Authorization': `Bearer ${token}`\n//         },\n//         body: JSON.stringify({ appointmentId })\n//       });\n\n//       if (response.ok) {\n//         // Optional: refresh appointments list\n//         fetchAppointments();\n//         fetchCompletedAppointments();\n//         return toast.success(\"Appointment status updated.\");\n//       } else {\n//         return toast.error(\"Failed to update appointment status\");\n//       }\n//     } catch (error) {\n//       console.error('Error updating appointment status:', error);\n//     }\n//   };\n\n//   const renderDashboard = () => (\n//     <>\n//       <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n//         <Card>\n//           <CardHeader icon={Calendar}>\n//             <CardTitle className=\"text-sm font-medium\">Today's Appointments</CardTitle>\n//           </CardHeader>\n//           <CardContent>\n//             <div className=\"text-2xl font-bold\">\n//               {appointments.length}\n//             </div>\n//             {appointments.length > 0 ? (\n//               <p className=\"text-xs text-gray-500\">\n//                 Next: {appointments[0].patientId.firstName} {appointments[0].patientId.lastName} at {appointments[0].time}\n//               </p>\n//             ) : (\n//               <p className=\"text-xs text-gray-500\">\n//                 No appointments today\n//               </p>\n//             )}\n//           </CardContent>\n//           <CardFooter className=\"p-2\">\n//             <Button \n//               variant=\"ghost\" \n//               className=\"w-full text-sm text-gray-500 hover:text-gray-900 transition-colors\"\n//               onClick={() => setShowAppointments(!showAppointments)}\n//             >\n//               {showAppointments ? \"Hide\" : \"View\"} Today's Appointments\n//               <ChevronDown className={`h-4 w-4 ml-2 transition-transform ${showAppointments ? \"rotate-180\" : \"\"}`} />\n//             </Button>\n//           </CardFooter>\n//           {showAppointments && (\n//             <div className=\"px-4 pb-4\">\n//               {appointments.length > 0 ? (\n//                 appointments.map((appointment, index) => (\n//                   <div\n//                     key={index}\n//                     className=\"flex justify-between items-center py-2 border-t\"\n//                   >\n//                     <div>\n//                       <p className=\"text-sm font-medium\">\n//                         {appointment.patientId.firstName} {appointment.patientId.lastName}\n//                       </p>\n//                       <p className=\"text-xs text-gray-500\">{appointment.reason}</p>\n//                     </div>\n//                     <div className=\"flex items-center gap-3\">\n//                       <p className=\"text-sm text-nowrap\">{appointment.time}</p>\n\n//                       {/* Mark as Completed */}\n//                       <button\n//                         onClick={() => handleUpdateStatus(appointment._id, 'completed')}\n//                         className=\"text-green-600 hover:text-green-800\"\n//                         title=\"Mark as Completed\"\n//                       >\n//                         <CheckCircle className=\"h-5 w-5\" />\n//                       </button>\n\n//                       {/* Cancel Appointment */}\n//                       <button\n//                         onClick={() => handleUpdateStatus(appointment._id, 'cancelled')}\n//                         className=\"text-red-600 hover:text-red-800\"\n//                         title=\"Cancel Appointment\"\n//                       >\n//                         <XCircle className=\"h-5 w-5\" />\n//                       </button>\n//                     </div>\n//                   </div>\n//                 ))\n//               ) : (\n//                 <p className=\"text-sm text-gray-500 text-center py-4\">\n//                   No appointments scheduled for today\n//                 </p>\n//               )}\n//             </div>\n//           )}\n\n//         </Card>\n//         <Card>\n//           <CardHeader icon={Users}>\n//             <CardTitle className=\"text-sm font-medium\">Patients</CardTitle>\n//           </CardHeader>\n//           <CardContent>\n//             <div className=\"text-2xl font-bold\">{patients.length}</div>\n//             <p className=\"text-xs text-gray-500\">Total patients under care</p>\n//           </CardContent>\n//           <CardFooter className=\"p-2\">\n//             <Button \n//               variant=\"ghost\" \n//               className=\"w-full text-sm text-gray-500 hover:text-gray-900 transition-colors\"\n//               onClick={() => setShowPatients(!showPatients)}\n//             >\n//               {showPatients ? \"Hide\" : \"View All\"} Patients\n//               <ChevronDown className={`h-4 w-4 ml-2 transition-transform ${showPatients ? \"rotate-180\" : \"\"}`} />\n//             </Button>\n//           </CardFooter>\n//           {showPatients && (\n//             <div className=\"px-4 pb-4\">\n//               {patients.map((patient, index) => (\n//                 <div key={index} className=\"py-2 border-t\">\n//                   <p className=\"text-sm font-medium\">\n//                     {patient.firstName} {patient.lastName}\n//                   </p>\n//                   <p className=\"text-xs text-gray-500\">\n//                     Last visit: {patient.lastVisit ? new Date(patient.lastVisit).toLocaleDateString('en-GB') : 'N/A'} | Next: {patient.nextAppointment ? new Date(patient.nextAppointment).toLocaleDateString('en-GB') : 'N/A'}\n//                   </p>\n//                 </div>\n//               ))}\n//             </div>\n//           )}\n//         </Card>\n//       </div>\n//       <div className=\"mt-8 grid grid-cols-1 md:grid-cols-2 gap-6\">\n//       <Card>\n//         <CardHeader>\n//           <CardTitle>Recent Activity</CardTitle>\n//         </CardHeader>\n//         <CardContent>\n//           <ul className=\"space-y-2\">\n//             {completedAppointments.slice(0, 3).map((appointment, index) => (\n//               <li key={appointment._id || index} className=\"flex items-center space-x-2\">\n//                 <Clock className=\"h-4 w-4 text-blue-600\" />\n//                 <span>\n//                   {appointment.status === \"completed\" ? \"Completed\" : \"Cancelled\"} appointment with{\" \"}\n//                   <strong>\n//                     {appointment.patientId?.firstName} {appointment.patientId?.lastName}\n//                   </strong>{\" \"}\n//                   on {new Date(appointment.date).toLocaleDateString()} at {appointment.time}\n//                 </span>\n//               </li>\n//             ))}\n\n//             {/* Static fallback if no completed appointments */}\n//             {completedAppointments.length === 0 && (\n//               <>\n//                 <li className=\"flex items-center space-x-2\">\n//                   <FileText className=\"h-4 w-4 text-gray-400\" />\n//                   <span className=\"text-gray-400\">No records found.</span>\n//                 </li>\n//               </>\n//             )}\n//           </ul>\n//         </CardContent>\n//       </Card>\n\n//       <Card>\n//         <CardHeader>\n//           <CardTitle>Upcoming Schedule</CardTitle>\n//         </CardHeader>\n//         <CardContent>\n//           <ul className=\"space-y-2\">\n//             {upcomingAppointments.slice(0, 3).map((appointment, index) => (\n//               <li key={appointment._id || index} className=\"flex items-center space-x-2\">\n//                 <Calendar className=\"h-4 w-4 text-blue-600\" />\n//                 <span>\n//                   Appointment with{\" \"}\n//                   <strong>\n//                     {appointment.patientId?.firstName} {appointment.patientId?.lastName}\n//                   </strong>{\" \"}\n//                   on {new Date(appointment.date).toLocaleDateString()} at {appointment.time}. <span className=\"text-gray-500\">{\"(\" + appointment.reason + \")\"}</span>\n//                 </span>\n//               </li>\n//             ))}\n\n//             {/* Fallback if there are no upcoming appointments */}\n//             {upcomingAppointments.length === 0 && (\n//               <>\n//                 <li className=\"flex items-center space-x-2\">\n//                   <Clock className=\"h-4 w-4 text-gray-400\" />\n//                   <span className=\"text-gray-400\">No upcoming schedule.</span>\n//                 </li>\n//               </>\n//             )}\n//           </ul>\n//         </CardContent>\n//       </Card>\n\n//       </div>\n//     </>\n//   );\n\n//   const renderProfile = () => {\n//     const handleInputChange = (e) => {\n//       const { name, value } = e.target;\n//       setEditedInfo(prev => ({ ...prev, [name]: value }));\n//     };\n\n//     const handleSave = async () => {\n//       try {\n//         const token = localStorage.getItem('token');\n//         const response = await fetch(BASE_URL + '/doctor/profile', {\n//           method: 'PUT',\n//           headers: {\n//             'Content-Type': 'application/json',\n//             'Authorization': `Bearer ${token}`\n//           },\n//           body: JSON.stringify(editedInfo)\n//         });\n//         if (response.ok) {\n//           const updatedProfile = await response.json();\n//           setDoctorInfo(updatedProfile);\n//           setIsEditing(false);\n//           return toast.success(\"Profile updated successfully.\");\n//         } else {\n//           await response.json();\n//           return toast.success(\"Failed to update profile.\");\n//         }\n//       } catch (error) {\n//         alert('Error updating doctor profile. Please try again.');\n//       }\n//     };\n\n//     return (\n//       <Card className=\"w-full max-w-2xl mx-auto\">\n//         <CardHeader>\n//           <CardTitle>Doctor Profile</CardTitle>\n//         </CardHeader>\n//         <CardContent>\n//           <form className=\"space-y-4\">\n//             <div className=\"grid grid-cols-2 gap-4\">\n//               <div className=\"space-y-2\">\n//                 <Label htmlFor=\"firstName\">First Name</Label>\n//                 <Input\n//                   id=\"firstName\"\n//                   name=\"firstName\"\n//                   value={isEditing ? editedInfo.firstName : doctorInfo?.firstName}\n//                   onChange={handleInputChange}\n//                   readOnly={!isEditing}\n//                 />\n//               </div>\n//               <div className=\"space-y-2\">\n//                 <Label htmlFor=\"lastName\">Last Name</Label>\n//                 <Input\n//                   id=\"lastName\"\n//                   name=\"lastName\"\n//                   value={isEditing ? editedInfo.lastName : doctorInfo?.lastName}\n//                   onChange={handleInputChange}\n//                   readOnly={!isEditing}\n//                 />\n//               </div>\n//             </div>\n//             <div className=\"space-y-2\">\n//               <Label htmlFor=\"email\">Email</Label>\n//               <Input\n//                 id=\"email\"\n//                 name=\"email\"\n//                 type=\"email\"\n//                 value={isEditing ? editedInfo.email : doctorInfo?.email}\n//                 onChange={handleInputChange}\n//                 readOnly={!isEditing}\n//               />\n//             </div>\n//             <div className=\"space-y-2\">\n//               <Label htmlFor=\"specialty\">Specialty</Label>\n//               <Input\n//                 id=\"specialty\"\n//                 name=\"specialty\"\n//                 value={isEditing ? editedInfo.specialty : doctorInfo?.specialty}\n//                 onChange={handleInputChange}\n//                 readOnly={!isEditing}\n//               />\n//             </div>\n//             <div className=\"space-y-2\">\n//               <Label htmlFor=\"licenseNumber\">License Number</Label>\n//               <Input\n//                 id=\"licenseNumber\"\n//                 name=\"licenseNumber\"\n//                 value={isEditing ? editedInfo.licenseNumber : doctorInfo?.licenseNumber}\n//                 onChange={handleInputChange}\n//                 readOnly={!isEditing}\n//               />\n//             </div>\n//             <div className=\"space-y-2\">\n//               <Label htmlFor=\"phoneNumber\">Phone Number</Label>\n//               <Input\n//                 id=\"phoneNumber\"\n//                 name=\"phoneNumber\"\n//                 value={isEditing ? editedInfo.phoneNumber : doctorInfo?.phoneNumber}\n//                 onChange={handleInputChange}\n//                 readOnly={!isEditing}\n//               />\n//             </div>\n//           </form>\n//         </CardContent>\n//         <CardFooter>\n//           {isEditing ? (\n//             <>\n//               <Button onClick={handleSave} className=\"mr-2\">Save</Button>\n//               <Button onClick={() => setIsEditing(false)} variant=\"outline\">Cancel</Button>\n//             </>\n//           ) : (\n//             <Button onClick={() => setIsEditing(true)} className=\"ml-auto\">Edit Profile</Button>\n//           )}\n//         </CardFooter>\n//       </Card>\n//     );\n//   };\n\n//   const renderPatientManagement = () => {\n//     const handleInputChange = (e) => {\n//       const { name, value } = e.target;\n//       setAppointmentData(prev => ({ ...prev, [name]: value }));\n\n//       if (name === 'action') {\n//         setSelectedAction(value);\n//       }\n\n//       if (name === 'patientId') {\n//         fetchExistingPrescriptions(value);\n//       }\n\n//       if (name === 'date' || name === 'patientId') {\n//         fetchAvailableSlots(appointmentData.patientId, value);\n//       }\n//     };\n\n//     const fetchAvailableSlots = async (patientId, date) => {\n//       if (!patientId || !date) return;\n//       try {\n//         const token = localStorage.getItem('token');\n//         const response = await fetch(BASE_URL + `/doctor/available-slots?patientId=${patientId}&date=${date}`, {\n//           headers: {\n//             'Authorization': `Bearer ${token}`\n//           }\n//         });\n//         if (response.ok) {\n//           const slots = await response.json();\n//           setAvailableSlots(slots);\n//         } else {\n//           console.error('Failed to fetch available slots');\n//           setAvailableSlots([]);\n//           return toast.error(\"Failed to fetch available slots\");\n//         }\n//       } catch (error) {\n//         console.error('Error fetching available slots:', error);\n//         setAvailableSlots([]);\n//       }\n//     };\n\n//     const handleEditPrescription = (prescription) => {\n//       setAppointmentData({\n//         ...appointmentData,\n//         prescriptionId: prescription._id,\n//         medication: prescription.medication || '',\n//         dosage: prescription.dosage || '',\n//         frequency: prescription.frequency || '',\n//         tilldate: prescription.tilldate || ''\n//       });\n//       setSelectedAction('prescribe-medication');\n//     };\n\n//     const handleDeletePrescription = async (prescriptionId) => {\n//       if (window.confirm('Are you sure you want to delete this prescription?')) {\n//         try {\n//           const token = localStorage.getItem('token');\n//           const response = await fetch(BASE_URL + `/doctor/prescriptions/${prescriptionId}`, {\n//             method: 'DELETE',\n//             headers: {\n//               'Authorization': `Bearer ${token}`\n//             }\n//           });\n//           if (response.ok) {\n//             fetchExistingPrescriptions(appointmentData.patientId);\n//             return toast.success('Prescription deleted successfully.');\n//           } else {\n//             const errorData = await response.json();\n//             console.error('Error details:', errorData.details);\n//             return toast.error(`Failed to delete prescription.`);\n//           }\n//         } catch (error) {\n//           alert('Error deleting prescription. Please try again.');\n//           console.error('Error deleting prescription:', error);\n//         }\n//       }\n//     };\n\n//     const handleSubmit = async (e) => {\n//       e.preventDefault();\n//       if (selectedAction === 'prescribe-medication') {\n//         try {\n//           const token = localStorage.getItem('token');\n//           const url = appointmentData.prescriptionId\n//             ? BASE_URL + `/doctor/prescriptions/${appointmentData.prescriptionId}`\n//             : BASE_URL + '/doctor/prescribe-medication';\n//           const method = appointmentData.prescriptionId ? 'PUT' : 'POST';\n//           const response = await fetch(url, {\n//             method,\n//             headers: {\n//               'Content-Type': 'application/json',\n//               'Authorization': `Bearer ${token}`\n//             },\n//             body: JSON.stringify({\n//               doctorId: appointmentData.doctorId,\n//               patientId: appointmentData.patientId,\n//               medication: appointmentData.medication,\n//               dosage: appointmentData.dosage,\n//               frequency: appointmentData.frequency,\n//               tilldate: appointmentData.tilldate\n//             })\n//           });\n//           if (response.ok) {\n//             //const result = \n//             await response.json();\n//             setAppointmentData({\n//               ...appointmentData,\n//               prescriptionId: '',\n//               medication: '',\n//               dosage: '',\n//               frequency: '',\n//               tilldate: ''\n//             });\n//             fetchExistingPrescriptions(appointmentData.patientId);\n//             setSelectedAction('');\n//             fetchExistingPrescriptions();\n//             return toast.success(appointmentData.prescriptionId ? 'Medication updated successfully' : 'Medication prescribed successfully');\n//           } else {\n//             const errorData = await response.json();\n//             return toast.error(`Failed to ${appointmentData.prescriptionId ? 'update' : 'prescribe'} medication: ${errorData.error}`);\n//           }\n//         } catch (error) {\n//           alert(`Error ${appointmentData.prescriptionId ? 'updating' : 'prescribing'} medication. Please try again.`);\n//         }\n//       } else if (selectedAction === 'schedule-appointment') {\n//         try {\n//           const token = localStorage.getItem('token');\n//           const response = await fetch(BASE_URL + '/doctor/schedule-appointment', {\n//             method: 'POST',\n//             headers: {\n//               'Content-Type': 'application/json',\n//               'Authorization': `Bearer ${token}`\n//             },\n//             body: JSON.stringify({\n//               patientId: appointmentData.patientId,\n//               date: appointmentData.date,\n//               time: appointmentData.time,\n//               reason: appointmentData.reason\n//             })\n//           });\n//           if (response.ok) {\n//             setAppointmentData({\n//               patientId: '',\n//               date: '',\n//               time: '',\n//               reason: '',\n//               prescriptionId: '',\n//               medication: '',\n//               dosage: '',\n//               frequency: '',\n//               tilldate: ''\n//             });\n//             setSelectedAction('');\n//             fetchAppointments();\n//             fetchUpcomingAppointments();\n//             return toast.success('Appointment scheduled successfully.');\n//           } else {\n//             const errorData = await response.json();\n//             return toast.error(`Failed to schedule appointment: ${errorData.error}`);\n//           }\n//         } catch (error) {\n//           alert('Error scheduling appointment. Please try again.');\n//         }\n//       }\n//     };\n\n//     return (\n//       <Card className=\"w-full max-w-2xl mx-auto\">\n//         <CardHeader>\n//           <CardTitle>Patient Management</CardTitle>\n//         </CardHeader>\n//         <CardContent>\n//           <form onSubmit={handleSubmit} className=\"space-y-4\">\n//             <div className=\"space-y-2\">\n//               <Label htmlFor=\"patient\">Select Patient</Label>\n//               <Select id=\"patient\" name=\"patientId\" value={appointmentData.patientId} onChange={handleInputChange}>\n//                 <option value=\"\">Choose a patient</option>\n//                 {patients.map((patient) => (\n//                   <option key={patient._id} value={patient._id}>\n//                     {patient.firstName} {patient.lastName}\n//                   </option>\n//                 ))}\n//               </Select>\n//             </div>\n//             <div className=\"space-y-2\">\n//               <Label htmlFor=\"action\">Action</Label>\n//               <Select id=\"action\" name=\"action\" value={selectedAction} onChange={handleInputChange}>\n//                 <option value=\"\">Choose an action</option>\n//                 <option value=\"schedule-appointment\">Schedule Appointment</option>\n//                 <option value=\"prescribe-medication\">Prescribe Medication</option>\n//               </Select>\n//             </div>\n//             {selectedAction === 'schedule-appointment' && (\n//               <>\n//                 <div className=\"space-y-2\">\n//                   <Label htmlFor=\"date\">Appointment Date</Label>\n//                   <Input id=\"date\" name=\"date\" type=\"date\" value={appointmentData.date} onChange={handleInputChange} />\n//                 </div>\n//                 <div className=\"space-y-2\">\n//                   <Label htmlFor=\"time\">Preferred Time</Label>\n//                   <Select id=\"time\" name=\"time\" value={appointmentData.time} onChange={handleInputChange} disabled={availableSlots.length === 0}>\n//                     <option value=\"\">Choose a time slot</option>\n//                     {availableSlots.map((slot) => (\n//                       <option key={slot} value={slot}>{slot}</option>\n//                     ))}\n//                   </Select>\n//                 </div>\n//                 <div className=\"space-y-2\">\n//                   <Label htmlFor=\"reason\">Reason for Visit</Label>\n//                   <Input id=\"reason\" name=\"reason\" value={appointmentData.reason} onChange={handleInputChange} placeholder=\"Brief description of your concern\" />\n//                 </div>\n//               </>\n//             )}\n//             {selectedAction === 'prescribe-medication' && (\n//               <>\n//                 {existingPrescriptions.length > 0 && (\n//                   <div className=\"space-y-2 mb-4\">\n//                     <Label>Existing Prescriptions</Label>\n//                     {existingPrescriptions.map((prescription) => (\n//                       <div key={prescription._id} className=\"flex items-center justify-between bg-gray-100 p-2 rounded\">\n//                         <span>{prescription.medication} - {prescription.dosage} - {prescription.frequency} - {\" (Till - \"}{new Date(prescription.tilldate).toLocaleDateString()}{\") \"}</span>\n//                         <div>\n//                           <Button type=\"button\" onClick={() => handleEditPrescription(prescription)} variant=\"outline\" size=\"sm\" className=\"mr-2\">Edit</Button>\n//                           <Button onClick={() => handleDeletePrescription(prescription._id)} variant=\"outline\" size=\"sm\">Delete</Button>\n//                         </div>\n//                       </div>\n//                     ))}\n//                   </div>\n//                 )}\n//                 <div className=\"space-y-2\">\n//                   <Label htmlFor=\"medication\">Medication</Label>\n//                   <Input id=\"medication\" name=\"medication\" value={appointmentData.medication || ''} onChange={handleInputChange} placeholder=\"Medication name\" />\n//                 </div>\n//                 <div className=\"space-y-2\">\n//                   <Label htmlFor=\"dosage\">Dosage</Label>\n//                   <Input id=\"dosage\" name=\"dosage\" value={appointmentData.dosage || ''} onChange={handleInputChange} placeholder=\"Dosage\" />\n//                 </div>\n//                 <div className=\"space-y-2\">\n//                   <Label htmlFor=\"frequency\">Frequency</Label>\n//                   <Input id=\"frequency\" name=\"frequency\" value={appointmentData.frequency || ''} onChange={handleInputChange} placeholder=\"Frequency\" />\n//                 </div>\n//                 <div className=\"space-y-2\">\n//                   <Label htmlFor=\"tilldate\">Till Date</Label>\n//                   <Input id=\"tilldate\" name=\"tilldate\" type=\"date\" value={formatDate(appointmentData.tilldate) || ''} onChange={handleInputChange} />\n//                 </div>\n//               </>\n//             )}\n//             <Button type=\"submit\" className=\"ml-auto\">\n//               {selectedAction === 'prescribe-medication' ? (appointmentData.prescriptionId ? 'Update Prescription' : 'Prescribe Medication') : 'Schedule Appointment'}\n//             </Button>\n//           </form>\n//         </CardContent>\n//       </Card>\n//     );\n//   };\n\n//   return (\n//     <div className=\"min-h-screen bg-blue-600\">\n//       <header className=\"bg-white p-4 flex justify-between items-center\">\n//         <div className=\"flex items-center space-x-2\">\n//           <Hospital className=\"h-6 w-6 text-blue-600\" />\n//           <span className=\"font-bold text-xl\">Sri Kumaran Clinic</span>\n//         </div>\n//         <Button variant=\"outline\" onClick={() => navigate('/')}>Sign Out</Button>\n//       </header>\n//       <nav className=\"bg-blue-700 text-white p-4\">\n//         <ul className=\"flex space-x-4 justify-center\">\n//           <li>\n//             <Button\n//               variant={activeTab === 'Dashboard' ? \"outline\" : \"ghost\"}\n//               className={`hover:bg-white hover:text-blue-600 ${activeTab === 'Dashboard' ? 'bg-white text-blue-600' : 'text-white'}`}\n//               onClick={() => setActiveTab('Dashboard')}\n//             >\n//               <Home className=\"w-4 h-4 mr-2\" />\n//               Dashboard\n//             </Button>\n//           </li>\n//           <li>\n//             <Button\n//               variant={activeTab === 'Profile' ? \"outline\" : \"ghost\"}\n//               className={`hover:bg-white hover:text-blue-600 ${activeTab === 'Profile' ? 'bg-white text-blue-600' : 'text-white'}`}\n//               onClick={() => setActiveTab('Profile')}\n//             >\n//               <UserCircle className=\"w-4 h-4 mr-2\" />\n//               Profile\n//             </Button>\n//           </li>\n//           <li>\n//             <Button\n//               variant={activeTab === 'Patient Management' ? \"outline\" : \"ghost\"}\n//               className={`hover:bg-white hover:text-blue-600 ${activeTab === 'Patient Management' ? 'bg-white text-blue-600' : 'text-white'}`}\n//               onClick={() => setActiveTab('Patient Management')}\n//             >\n//               <Users className=\"w-4 h-4 mr-2\" />\n//               Patient Management\n//             </Button>\n//           </li>\n//         </ul>\n//       </nav>\n//       <main className=\"container mx-auto px-4 py-8\">\n//         <h1 className=\"text-4xl font-bold text-white mb-8\">Welcome, Dr. {doctorInfo?.firstName} {doctorInfo?.lastName}</h1>\n//         {activeTab === 'Dashboard' && renderDashboard()}\n//         {activeTab === 'Profile' && renderProfile()}\n//         {activeTab === 'Patient Management' && renderPatientManagement()}\n//       </main>\n//     </div>\n//   );\n// }\n\nimport React, { useState, useEffect } from 'react';\nimport { FileText, Plus, ChevronDown, ChevronUp } from 'lucide-react';\nimport { toast } from \"react-hot-toast\";\nimport { BASE_URL } from '../constants/constants';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Button = ({\n  children,\n  variant = 'primary',\n  className = '',\n  ...props\n}) => /*#__PURE__*/_jsxDEV(\"button\", {\n  className: `inline-flex items-center justify-center px-4 py-2 text-sm font-medium rounded-md shadow-sm transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 ${variant === 'primary' ? 'text-white bg-blue-600 hover:bg-blue-700 focus:ring-blue-500' : variant === 'outline' ? 'text-blue-600 border border-blue-600 hover:bg-blue-50 focus:ring-blue-500' : 'text-blue-600 border-blue-600 hover:bg-blue-50 focus:ring-blue-500'} ${className}`,\n  ...props,\n  children: children\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 919,\n  columnNumber: 3\n}, this);\n_c = Button;\nconst Card = ({\n  children,\n  className = ''\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: `bg-white rounded-lg shadow-md ${className}`,\n  children: children\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 934,\n  columnNumber: 3\n}, this);\n_c2 = Card;\nconst CardHeader = ({\n  children,\n  icon: Icon\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"px-4 py-5 border-b border-gray-200 sm:px-6 flex items-center justify-between\",\n  children: [children, Icon && /*#__PURE__*/_jsxDEV(Icon, {\n    className: \"h-5 w-5 text-blue-600 ml-2\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 942,\n    columnNumber: 14\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 940,\n  columnNumber: 3\n}, this);\n_c3 = CardHeader;\nconst CardTitle = ({\n  children\n}) => /*#__PURE__*/_jsxDEV(\"h3\", {\n  className: \"text-lg leading-6 font-medium text-gray-900\",\n  children: children\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 947,\n  columnNumber: 3\n}, this);\n_c4 = CardTitle;\nconst CardContent = ({\n  children\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"px-4 py-5 sm:p-6\",\n  children: children\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 951,\n  columnNumber: 3\n}, this);\n_c5 = CardContent;\nconst CardFooter = ({\n  children\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"px-4 py-4 border-t border-gray-200 sm:px-6\",\n  children: children\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 955,\n  columnNumber: 3\n}, this);\n_c6 = CardFooter;\nconst Input = ({\n  ...props\n}) => /*#__PURE__*/_jsxDEV(\"input\", {\n  className: \"mt-1 focus:ring-blue-500 focus:border-blue-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md px-2 py-1\",\n  ...props\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 959,\n  columnNumber: 3\n}, this);\n_c7 = Input;\nconst Textarea = ({\n  ...props\n}) => /*#__PURE__*/_jsxDEV(\"textarea\", {\n  className: \"mt-1 focus:ring-blue-500 focus:border-blue-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md px-2 py-1\",\n  rows: 3,\n  ...props\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 966,\n  columnNumber: 3\n}, this);\n_c8 = Textarea;\nconst Label = ({\n  children,\n  htmlFor\n}) => /*#__PURE__*/_jsxDEV(\"label\", {\n  htmlFor: htmlFor,\n  className: \"block text-sm font-medium text-gray-700\",\n  children: children\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 974,\n  columnNumber: 3\n}, this);\n_c9 = Label;\nconst Select = ({\n  children,\n  ...props\n}) => /*#__PURE__*/_jsxDEV(\"select\", {\n  className: \"mt-1 block w-full pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md\",\n  ...props,\n  children: children\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 980,\n  columnNumber: 3\n}, this);\n_c10 = Select;\nconst TreatmentRecords = ({\n  patients\n}) => {\n  _s();\n  const [selectedPatient, setSelectedPatient] = useState('');\n  const [formMode, setFormMode] = useState('create'); // 'create' or 'view'\n  const [showForm, setShowForm] = useState(false);\n  const [patientRecords, setPatientRecords] = useState([]);\n  const [selectedRecord, setSelectedRecord] = useState(null);\n  const [expandedRecordId, setExpandedRecordId] = useState(null);\n  const [formData, setFormData] = useState({\n    height: '',\n    weight: '',\n    bloodPressure: '',\n    bloodSugar: '',\n    temperature: '',\n    pulseRate: '',\n    chiefComplaint: '',\n    diagnosis: '',\n    notes: '',\n    followUpDate: '',\n    followUpInstructions: ''\n    // Prescription fields are handled separately in the doctor dashboard\n  });\n  useEffect(() => {\n    if (selectedPatient) {\n      fetchPatientRecords(selectedPatient);\n    } else {\n      setPatientRecords([]);\n    }\n  }, [selectedPatient]);\n  const fetchPatientRecords = async patientId => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await fetch(`${BASE_URL}/doctor/treatment-records/${patientId}`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setPatientRecords(data);\n      } else {\n        toast.error('Failed to fetch patient records');\n      }\n    } catch (error) {\n      console.error('Error fetching patient records:', error);\n      toast.error('Error fetching patient records');\n    }\n  };\n  const handlePatientChange = e => {\n    setSelectedPatient(e.target.value);\n    setShowForm(false);\n    setFormMode('create');\n    resetForm();\n  };\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  const resetForm = () => {\n    setFormData({\n      height: '',\n      weight: '',\n      bloodPressure: '',\n      bloodSugar: '',\n      temperature: '',\n      pulseRate: '',\n      chiefComplaint: '',\n      diagnosis: '',\n      notes: '',\n      followUpDate: '',\n      followUpInstructions: ''\n    });\n    setSelectedRecord(null);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      const token = localStorage.getItem('token');\n      const url = formMode === 'create' ? `${BASE_URL}/doctor/treatment-records` : `${BASE_URL}/doctor/treatment-records/${selectedRecord._id}`;\n      const method = formMode === 'create' ? 'POST' : 'PUT';\n      const response = await fetch(url, {\n        method,\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          ...formData,\n          patientId: selectedPatient\n        })\n      });\n      if (response.ok) {\n        toast.success(formMode === 'create' ? 'Treatment record created successfully' : 'Treatment record updated successfully');\n        fetchPatientRecords(selectedPatient);\n        setShowForm(false);\n        resetForm();\n      } else {\n        const errorData = await response.json();\n        toast.error(`Failed to ${formMode} record: ${errorData.error}`);\n      }\n    } catch (error) {\n      console.error(`Error ${formMode === 'create' ? 'creating' : 'updating'} treatment record:`, error);\n      toast.error(`Error ${formMode === 'create' ? 'creating' : 'updating'} treatment record`);\n    }\n  };\n  const handleViewRecord = record => {\n    setFormData({\n      height: record.height || '',\n      weight: record.weight || '',\n      bloodPressure: record.bloodPressure || '',\n      bloodSugar: record.bloodSugar || '',\n      temperature: record.temperature || '',\n      pulseRate: record.pulseRate || '',\n      chiefComplaint: record.chiefComplaint || '',\n      diagnosis: record.diagnosis || '',\n      notes: record.notes || '',\n      followUpDate: record.followUpDate ? new Date(record.followUpDate).toISOString().split('T')[0] : '',\n      followUpInstructions: record.followUpInstructions || ''\n    });\n    setSelectedRecord(record);\n    setFormMode('view');\n    setShowForm(true);\n  };\n  const handleEditRecord = () => {\n    setFormMode('edit');\n  };\n  const toggleRecordDetails = recordId => {\n    setExpandedRecordId(expandedRecordId === recordId ? null : recordId);\n  };\n  const formatDate = dateString => {\n    return new Date(dateString).toLocaleDateString();\n  };\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: \"w-full\",\n    children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n      icon: FileText,\n      children: /*#__PURE__*/_jsxDEV(CardTitle, {\n        children: \"Treatment Records\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1142,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1141,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(Label, {\n          htmlFor: \"patient\",\n          children: \"Select Patient\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1146,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          id: \"patient\",\n          value: selectedPatient,\n          onChange: handlePatientChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Choose a patient\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1148,\n            columnNumber: 13\n          }, this), patients.map(patient => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: patient._id,\n            children: [patient.firstName, \" \", patient.lastName]\n          }, patient._id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1150,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1147,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1145,\n        columnNumber: 9\n      }, this), selectedPatient && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-between items-center mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"text-lg font-medium\",\n            children: \"Patient History\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1160,\n            columnNumber: 15\n          }, this), !showForm && /*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => {\n              setFormMode('create');\n              setShowForm(true);\n              resetForm();\n            },\n            children: [/*#__PURE__*/_jsxDEV(Plus, {\n              className: \"h-4 w-4 mr-2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1163,\n              columnNumber: 19\n            }, this), \"New Record\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1162,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1159,\n          columnNumber: 13\n        }, this), showForm ? /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          className: \"border p-4 rounded-md mb-6\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"font-medium mb-4\",\n            children: formMode === 'create' ? 'Create New Treatment Record' : formMode === 'edit' ? 'Edit Treatment Record' : 'View Treatment Record'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1171,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(Label, {\n                htmlFor: \"visitDate\",\n                children: \"Visit Date\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1181,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                id: \"visitDate\",\n                name: \"visitDate\",\n                type: \"date\",\n                value: formData.visitDate ? new Date(formData.visitDate).toISOString().split('T')[0] : new Date().toISOString().split('T')[0],\n                onChange: handleInputChange,\n                disabled: formMode === 'view'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1182,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1180,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(Label, {\n                htmlFor: \"chiefComplaint\",\n                children: \"Chief Complaint*\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1192,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                id: \"chiefComplaint\",\n                name: \"chiefComplaint\",\n                value: formData.chiefComplaint,\n                onChange: handleInputChange,\n                required: true,\n                placeholder: \"Main reason for visit\",\n                disabled: formMode === 'view'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1193,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1191,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1179,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n            className: \"font-medium mb-2 text-sm text-gray-600\",\n            children: \"Vital Signs\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1205,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(Label, {\n                htmlFor: \"height\",\n                children: \"Height (cm)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1208,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                id: \"height\",\n                name: \"height\",\n                type: \"number\",\n                value: formData.height,\n                onChange: handleInputChange,\n                placeholder: \"Height in cm\",\n                disabled: formMode === 'view'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1209,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1207,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(Label, {\n                htmlFor: \"weight\",\n                children: \"Weight (kg)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1220,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                id: \"weight\",\n                name: \"weight\",\n                type: \"number\",\n                value: formData.weight,\n                onChange: handleInputChange,\n                placeholder: \"Weight in kg\",\n                disabled: formMode === 'view'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1221,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1219,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(Label, {\n                htmlFor: \"temperature\",\n                children: \"Temperature (\\xB0C)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1232,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                id: \"temperature\",\n                name: \"temperature\",\n                type: \"number\",\n                step: \"0.1\",\n                value: formData.temperature,\n                onChange: handleInputChange,\n                placeholder: \"Temperature in \\xB0C\",\n                disabled: formMode === 'view'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1233,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1231,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(Label, {\n                htmlFor: \"bloodPressure\",\n                children: \"Blood Pressure\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1245,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                id: \"bloodPressure\",\n                name: \"bloodPressure\",\n                value: formData.bloodPressure,\n                onChange: handleInputChange,\n                placeholder: \"e.g., 120/80\",\n                disabled: formMode === 'view'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1246,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1244,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(Label, {\n                htmlFor: \"pulseRate\",\n                children: \"Pulse Rate (bpm)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1256,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                id: \"pulseRate\",\n                name: \"pulseRate\",\n                type: \"number\",\n                value: formData.pulseRate,\n                onChange: handleInputChange,\n                placeholder: \"Beats per minute\",\n                disabled: formMode === 'view'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1257,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1255,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(Label, {\n                htmlFor: \"bloodSugar\",\n                children: \"Blood Sugar\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1268,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                id: \"bloodSugar\",\n                name: \"bloodSugar\",\n                value: formData.bloodSugar,\n                onChange: handleInputChange,\n                placeholder: \"e.g., 100 mg/dL\",\n                disabled: formMode === 'view'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1269,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1267,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1206,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-4\",\n            children: [/*#__PURE__*/_jsxDEV(Label, {\n              htmlFor: \"diagnosis\",\n              children: \"Diagnosis\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1281,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              id: \"diagnosis\",\n              name: \"diagnosis\",\n              value: formData.diagnosis,\n              onChange: handleInputChange,\n              placeholder: \"Diagnosis\",\n              disabled: formMode === 'view'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1282,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1280,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-4\",\n            children: [/*#__PURE__*/_jsxDEV(Label, {\n              htmlFor: \"notes\",\n              children: \"Notes\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1293,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Textarea, {\n              id: \"notes\",\n              name: \"notes\",\n              value: formData.notes,\n              onChange: handleInputChange,\n              placeholder: \"Additional notes about the patient's condition\",\n              disabled: formMode === 'view'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1294,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1292,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n            className: \"font-medium mb-2 text-sm text-gray-600\",\n            children: \"Follow-up\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1304,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(Label, {\n                htmlFor: \"followUpDate\",\n                children: \"Follow-up Date\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1307,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                id: \"followUpDate\",\n                name: \"followUpDate\",\n                type: \"date\",\n                value: formData.followUpDate,\n                onChange: handleInputChange,\n                disabled: formMode === 'view'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1308,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1306,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(Label, {\n                htmlFor: \"followUpInstructions\",\n                children: \"Follow-up Instructions\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1318,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                id: \"followUpInstructions\",\n                name: \"followUpInstructions\",\n                value: formData.followUpInstructions,\n                onChange: handleInputChange,\n                placeholder: \"Special instructions for follow-up\",\n                disabled: formMode === 'view'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1319,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1317,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1305,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex justify-end gap-2 mt-4\",\n            children: formMode === 'view' ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                type: \"button\",\n                onClick: handleEditRecord,\n                children: \"Edit Record\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1333,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                type: \"button\",\n                variant: \"outline\",\n                onClick: () => {\n                  setShowForm(false);\n                  resetForm();\n                },\n                children: \"Close\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1336,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                type: \"submit\",\n                children: formMode === 'create' ? 'Create Record' : 'Update Record'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1346,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                type: \"button\",\n                variant: \"outline\",\n                onClick: () => {\n                  setShowForm(false);\n                  resetForm();\n                },\n                children: \"Cancel\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1349,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1330,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1170,\n          columnNumber: 15\n        }, this) : patientRecords.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"space-y-4\",\n          children: patientRecords.map(record => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"border rounded-md overflow-hidden\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex justify-between items-center p-3 bg-gray-50 cursor-pointer\",\n              onClick: () => toggleRecordDetails(record._id),\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"font-medium\",\n                  children: [\"Visit: \", formatDate(record.visitDate || record.createdAt)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1370,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"text-sm text-gray-600\",\n                  children: record.chiefComplaint\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1371,\n                  columnNumber: 27\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1369,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex items-center gap-4\",\n                children: [/*#__PURE__*/_jsxDEV(Button, {\n                  type: \"button\",\n                  size: \"sm\",\n                  variant: \"outline\",\n                  onClick: e => {\n                    e.stopPropagation();\n                    handleViewRecord(record);\n                  },\n                  children: \"View/Edit\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1374,\n                  columnNumber: 27\n                }, this), expandedRecordId === record._id ? /*#__PURE__*/_jsxDEV(ChevronUp, {\n                  className: \"h-5 w-5\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1386,\n                  columnNumber: 29\n                }, this) : /*#__PURE__*/_jsxDEV(ChevronDown, {\n                  className: \"h-5 w-5\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1388,\n                  columnNumber: 29\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1373,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1365,\n              columnNumber: 23\n            }, this), expandedRecordId === record._id && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"p-4 border-t\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"text-sm font-medium\",\n                    children: \"Vital Signs\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1397,\n                    columnNumber: 31\n                  }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                    className: \"text-sm\",\n                    children: [record.height && /*#__PURE__*/_jsxDEV(\"li\", {\n                      children: [\"Height: \", record.height, \" cm\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1399,\n                      columnNumber: 51\n                    }, this), record.weight && /*#__PURE__*/_jsxDEV(\"li\", {\n                      children: [\"Weight: \", record.weight, \" kg\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1400,\n                      columnNumber: 51\n                    }, this), record.bloodPressure && /*#__PURE__*/_jsxDEV(\"li\", {\n                      children: [\"BP: \", record.bloodPressure]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1401,\n                      columnNumber: 58\n                    }, this), record.bloodSugar && /*#__PURE__*/_jsxDEV(\"li\", {\n                      children: [\"Blood Sugar: \", record.bloodSugar]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1402,\n                      columnNumber: 55\n                    }, this), record.temperature && /*#__PURE__*/_jsxDEV(\"li\", {\n                      children: [\"Temperature: \", record.temperature, \" \\xB0C\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1403,\n                      columnNumber: 56\n                    }, this), record.pulseRate && /*#__PURE__*/_jsxDEV(\"li\", {\n                      children: [\"Pulse: \", record.pulseRate, \" bpm\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1404,\n                      columnNumber: 54\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1398,\n                    columnNumber: 31\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1396,\n                  columnNumber: 29\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"text-sm font-medium\",\n                    children: \"Diagnosis\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1408,\n                    columnNumber: 31\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"text-sm\",\n                    children: record.diagnosis || 'Not specified'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1409,\n                    columnNumber: 31\n                  }, this), record.notes && /*#__PURE__*/_jsxDEV(_Fragment, {\n                    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                      className: \"text-sm font-medium mt-2\",\n                      children: \"Notes\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1413,\n                      columnNumber: 35\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      className: \"text-sm\",\n                      children: record.notes\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1414,\n                      columnNumber: 35\n                    }, this)]\n                  }, void 0, true), record.followUpDate && /*#__PURE__*/_jsxDEV(_Fragment, {\n                    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                      className: \"text-sm font-medium mt-2\",\n                      children: \"Follow-up\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1420,\n                      columnNumber: 35\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      className: \"text-sm\",\n                      children: [\"Date: \", formatDate(record.followUpDate), record.followUpInstructions && ` - ${record.followUpInstructions}`]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1421,\n                      columnNumber: 35\n                    }, this)]\n                  }, void 0, true)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1407,\n                  columnNumber: 29\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1395,\n                columnNumber: 27\n              }, this), record.prescriptions && record.prescriptions.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"mt-2\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"text-sm font-medium\",\n                  children: \"Prescriptions\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1432,\n                  columnNumber: 31\n                }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                  className: \"text-sm\",\n                  children: record.prescriptions.map((prescription, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n                    className: \"mb-1\",\n                    children: [prescription.medication, \": \", prescription.dosage, \", \", prescription.frequency, \", Until: \", formatDate(prescription.tilldate)]\n                  }, idx, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1435,\n                    columnNumber: 35\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1433,\n                  columnNumber: 31\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1431,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1394,\n              columnNumber: 25\n            }, this)]\n          }, record._id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1364,\n            columnNumber: 21\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1362,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-center text-gray-500 my-8\",\n          children: \"No treatment records found for this patient.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1449,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1158,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1144,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1140,\n    columnNumber: 5\n  }, this);\n};\n_s(TreatmentRecords, \"nvLuwo0hJDZkb92HyDTcUQLyocs=\");\n_c11 = TreatmentRecords;\nexport default TreatmentRecords;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11;\n$RefreshReg$(_c, \"Button\");\n$RefreshReg$(_c2, \"Card\");\n$RefreshReg$(_c3, \"CardHeader\");\n$RefreshReg$(_c4, \"CardTitle\");\n$RefreshReg$(_c5, \"CardContent\");\n$RefreshReg$(_c6, \"CardFooter\");\n$RefreshReg$(_c7, \"Input\");\n$RefreshReg$(_c8, \"Textarea\");\n$RefreshReg$(_c9, \"Label\");\n$RefreshReg$(_c10, \"Select\");\n$RefreshReg$(_c11, \"TreatmentRecords\");","map":{"version":3,"names":["React","useState","useEffect","FileText","Plus","ChevronDown","ChevronUp","toast","BASE_URL","jsxDEV","_jsxDEV","Fragment","_Fragment","Button","children","variant","className","props","fileName","_jsxFileName","lineNumber","columnNumber","_c","Card","_c2","CardHeader","icon","Icon","_c3","CardTitle","_c4","CardContent","_c5","CardFooter","_c6","Input","_c7","Textarea","rows","_c8","Label","htmlFor","_c9","Select","_c10","TreatmentRecords","patients","_s","selectedPatient","setSelectedPatient","formMode","setFormMode","showForm","setShowForm","patientRecords","setPatientRecords","selectedRecord","setSelectedRecord","expandedRecordId","setExpandedRecordId","formData","setFormData","height","weight","bloodPressure","bloodSugar","temperature","pulseRate","chiefComplaint","diagnosis","notes","followUpDate","followUpInstructions","fetchPatientRecords","patientId","token","localStorage","getItem","response","fetch","headers","ok","data","json","error","console","handlePatientChange","e","target","value","resetForm","handleInputChange","name","prev","handleSubmit","preventDefault","url","_id","method","body","JSON","stringify","success","errorData","handleViewRecord","record","Date","toISOString","split","handleEditRecord","toggleRecordDetails","recordId","formatDate","dateString","toLocaleDateString","id","onChange","map","patient","firstName","lastName","onClick","onSubmit","type","visitDate","disabled","required","placeholder","step","length","createdAt","size","stopPropagation","prescriptions","prescription","idx","medication","dosage","frequency","tilldate","_c11","$RefreshReg$"],"sources":["D:/Downloads/SriKumaranClinic/frontend/src/components/Doctors.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import { Calendar, Clock, FileText, Users, ChevronDown, Home, UserCircle, Hospital, CheckCircle, XCircle } from 'lucide-react';\n// import { useNavigate } from 'react-router-dom';\n// import { BASE_URL } from '../constants/constants';\n// import { toast } from \"react-hot-toast\";\n\n// const Button = ({ children, variant = 'primary', className = '', ...props }) => (\n//   <button\n//     className={`inline-flex items-center justify-center px-4 py-2 text-sm font-medium rounded-md shadow-sm transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 ${\n//       variant === 'primary'\n//         ? 'text-white bg-blue-600 hover:bg-blue-700 focus:ring-blue-500'\n//         : variant === 'outline'\n//         ? 'text-blue-600 border-blue-600 hover:bg-blue-50 focus:ring-blue-500'\n//         : 'text-blue-600 border-blue-600 hover:bg-blue-50 focus:ring-blue-500'\n//     } ${className}`}\n//     {...props}\n//   >\n//     {children}\n//   </button>\n// );\n\n// const Card = ({ children, className = '' }) => (\n//   <div className={`bg-white rounded-lg shadow-md ${className}`}>\n//     {children}\n//   </div>\n// );\n\n// const CardHeader = ({ children, icon: Icon }) => (\n//   <div className=\"px-4 py-5 border-b border-gray-200 sm:px-6 flex items-center justify-between\">\n//     {children}\n//     {Icon && <Icon className=\"h-5 w-5 text-blue-600 ml-2\" />}\n//   </div>\n// );\n\n// const CardTitle = ({ children }) => (\n//   <h3 className=\"text-lg leading-6 font-medium text-gray-900\">{children}</h3>\n// );\n\n// const CardContent = ({ children }) => (\n//   <div className=\"px-4 py-5 sm:p-6\">{children}</div>\n// );\n\n// const CardFooter = ({ children }) => (\n//   <div className=\"px-4 py-4 sm:px-6\">{children}</div>\n// );\n\n// const Input = ({ ...props }) => (\n//   <input\n//     className=\"mt-1 focus:ring-blue-500 focus:border-blue-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md px-1 h-6\"\n//     {...props}\n//   />\n// );\n\n// const Label = ({ children, htmlFor }) => (\n//   <label htmlFor={htmlFor} className=\"block text-sm font-medium text-gray-700\">\n//     {children}\n//   </label>\n// );\n\n// const Select = ({ children, ...props }) => (\n//   <select\n//     className=\"mt-1 block w-full pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md\"\n//     {...props}\n//   >\n//     {children}\n//   </select>\n// );\n\n// export default function DoctorDashboard() {\n//   const [showAppointments, setShowAppointments] = useState(false);\n//   const [showPatients, setShowPatients] = useState(false);\n//   const [activeTab, setActiveTab] = useState('Dashboard');\n//   const [isEditing, setIsEditing] = useState(false);\n//   const [doctorInfo, setDoctorInfo] = useState(null);\n//   const [editedInfo, setEditedInfo] = useState(null);\n//   const [patients, setPatients] = useState([]);\n//   const [appointmentData, setAppointmentData] = useState({\n//     patientId: '',\n//     date: '',\n//     time: '',\n//     reason: '',\n//     prescriptionId: '',\n//     medication: '',\n//     dosage: '',\n//     frequency: '',\n//     tilldate: ''\n//   });\n//   const [availableSlots, setAvailableSlots] = useState([]);\n//   const [selectedAction, setSelectedAction] = useState('');\n//   const [existingPrescriptions, setExistingPrescriptions] = useState([]);\n//   const [appointments, setAppointments] = useState([]);\n//   const [completedAppointments, setCompletedAppointments] = useState([]);\n//   const [upcomingAppointments, setUpcomingAppointments] = useState([]);\n\n//   const navigate = useNavigate();\n\n//   const formatDate = (date) => {\n//     if (!date) return '';\n//     return new Date(date).toISOString().split('T')[0];\n//   };\n\n//   useEffect(() => {\n//     if (appointmentData.patientId) {\n//       fetchExistingPrescriptions(appointmentData.patientId);\n//     }\n//   }, [appointmentData.patientId]);\n\n//   const fetchExistingPrescriptions = async (patientId) => {\n//     if (!patientId) return;\n//     try {\n//       const token = localStorage.getItem('token');\n//       const response = await fetch(BASE_URL + `/doctor/prescriptions/${patientId}`, {\n//         headers: {\n//           'Authorization': `Bearer ${token}`\n//         }\n//       });\n//       if (response.ok) {\n//         const prescriptions = await response.json();\n//         setExistingPrescriptions(prescriptions);\n//       } else {\n//         console.error('Failed to fetch existing prescriptions');\n//         setExistingPrescriptions([]);\n//       }\n//     } catch (error) {\n//       console.error('Error fetching existing prescriptions:', error);\n//       setExistingPrescriptions([]);\n//     }\n//   };\n\n//   const fetchDoctorProfile = async () => {\n//     try {\n//       const token = localStorage.getItem('token');\n//       if (!token) {\n//         navigate('/login');\n//         return;\n//       }\n//       const response = await fetch(BASE_URL + '/doctor/profile', {\n//         headers: {\n//           'Authorization': `Bearer ${token}`\n//         }\n//       });\n//       if (response.ok) {\n//         const data = await response.json();\n//         setDoctorInfo(data);\n//         setEditedInfo(data);\n//       } else {\n//         console.error('Failed to fetch doctor profile');\n//       }\n//     } catch (error) {\n//       console.error('Error fetching doctor profile:', error);\n//     }\n//   };\n\n//   const fetchPatientsWithAppointments = async () => {\n//     try {\n//       const token = localStorage.getItem('token');\n//       if (!token) {\n//         navigate('/login');\n//         return;\n//       }\n//       const response = await fetch(BASE_URL + '/doctor/patients-with-appointments', {\n//         headers: {\n//           'Authorization': `Bearer ${token}`\n//         }\n//       });\n//       if (response.ok) {\n//         const data = await response.json();\n//         console.log('Patients with appointments:', data); // Add this line for debugging\n//         setPatients(data);\n//       } else {\n//         console.error('Failed to fetch patients with appointments');\n//       }\n//     } catch (error) {\n//       console.error('Error fetching patients with appointments:', error);\n//     }\n//   };\n\n//   const fetchAppointments = async () => {\n//     try {\n//       const token = localStorage.getItem('token');\n//       if (!token) {\n//         navigate('/login');\n//         return;\n//       }\n//       const response = await fetch(BASE_URL + '/doctor/appointments', {\n//         headers: {\n//           'Authorization': `Bearer ${token}`\n//         }\n//       });\n//       if (response.ok) {\n//         const data = await response.json();\n//         const now = new Date();\n//         // Filter and sort appointments by date and time in ascending order\n//         const sortedAppointments = data\n//           .filter(appointment => new Date(appointment.date) > now || (new Date(appointment.date).toLocaleDateString() === now.toLocaleDateString() && appointment.time > now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })))\n//           .sort((a, b) => new Date(a.date + ' ' + a.time) - new Date(b.date + ' ' + b.time));\n//         setAppointments(sortedAppointments);\n//       } else {\n//         console.error('Failed to fetch appointments');\n//       }\n//     } catch (error) {\n//       console.error('Error fetching appointments:', error);\n//     }\n//   };\n\n//   const fetchCompletedAppointments = async () => {\n//     try {\n//       const token = localStorage.getItem('token');\n//       if (!token) {\n//         navigate('/login');\n//         return;\n//       }\n  \n//       const response = await fetch(BASE_URL + '/doctor/appointment/completed', {\n//         headers: {\n//           'Authorization': `Bearer ${token}`\n//         }\n//       });\n  \n//       if (response.ok) {\n//         const data = await response.json();\n  \n//         // Optional: Sort by date and time (descending if you want most recent first)\n//         const sortedCompleted = data.sort((a, b) => \n//           new Date(b.date + ' ' + b.time) - new Date(a.date + ' ' + a.time)\n//         );\n  \n//         setCompletedAppointments(sortedCompleted); // make sure youâ€™ve defined this state\n//       } else {\n//         console.error('Failed to fetch completed appointments');\n//       }\n//     } catch (error) {\n//       console.error('Error fetching completed appointments:', error);\n//     }\n//   };\n  \n//   const fetchUpcomingAppointments = async () => {\n//     try {\n//       const token = localStorage.getItem('token');\n//       if (!token) {\n//         navigate('/login');\n//         return;\n//       }\n  \n//       const response = await fetch(BASE_URL + '/doctor/appointments/upcoming', {\n//         headers: {\n//           'Authorization': `Bearer ${token}`\n//         }\n//       });\n  \n//       if (response.ok) {\n//         const data = await response.json();\n  \n//         // Sort appointments by date and time (soonest first)\n//         const sortedUpcoming = data.sort((a, b) =>\n//           new Date(a.date + ' ' + a.time) - new Date(b.date + ' ' + b.time)\n//         );\n  \n//         setUpcomingAppointments(sortedUpcoming); // Make sure you have this state defined\n//       } else {\n//         console.error('Failed to fetch upcoming appointments');\n//       }\n//     } catch (error) {\n//       console.error('Error fetching upcoming appointments:', error);\n//     }\n//   };\n\n  \n//   useEffect(() => {\n//     fetchDoctorProfile();\n//     fetchPatientsWithAppointments();\n//     fetchAppointments();\n//     fetchCompletedAppointments();\n//     fetchUpcomingAppointments();\n//   }, [fetchDoctorProfile,\n//     fetchPatientsWithAppointments,\n//     fetchAppointments,\n//     fetchCompletedAppointments,\n//     fetchUpcomingAppointments]);\n\n//   const handleUpdateStatus = async (appointmentId, status) => {\n//     try {\n//       const token = localStorage.getItem('token');\n//       const response = await fetch(BASE_URL + `/doctor/appointment/${appointmentId}/${status}`, {\n//         method: 'PATCH',\n//         headers: {\n//           'Content-Type': 'application/json',\n//           'Authorization': `Bearer ${token}`\n//         },\n//         body: JSON.stringify({ appointmentId })\n//       });\n  \n//       if (response.ok) {\n//         // Optional: refresh appointments list\n//         fetchAppointments();\n//         fetchCompletedAppointments();\n//         return toast.success(\"Appointment status updated.\");\n//       } else {\n//         return toast.error(\"Failed to update appointment status\");\n//       }\n//     } catch (error) {\n//       console.error('Error updating appointment status:', error);\n//     }\n//   };\n  \n\n//   const renderDashboard = () => (\n//     <>\n//       <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n//         <Card>\n//           <CardHeader icon={Calendar}>\n//             <CardTitle className=\"text-sm font-medium\">Today's Appointments</CardTitle>\n//           </CardHeader>\n//           <CardContent>\n//             <div className=\"text-2xl font-bold\">\n//               {appointments.length}\n//             </div>\n//             {appointments.length > 0 ? (\n//               <p className=\"text-xs text-gray-500\">\n//                 Next: {appointments[0].patientId.firstName} {appointments[0].patientId.lastName} at {appointments[0].time}\n//               </p>\n//             ) : (\n//               <p className=\"text-xs text-gray-500\">\n//                 No appointments today\n//               </p>\n//             )}\n//           </CardContent>\n//           <CardFooter className=\"p-2\">\n//             <Button \n//               variant=\"ghost\" \n//               className=\"w-full text-sm text-gray-500 hover:text-gray-900 transition-colors\"\n//               onClick={() => setShowAppointments(!showAppointments)}\n//             >\n//               {showAppointments ? \"Hide\" : \"View\"} Today's Appointments\n//               <ChevronDown className={`h-4 w-4 ml-2 transition-transform ${showAppointments ? \"rotate-180\" : \"\"}`} />\n//             </Button>\n//           </CardFooter>\n//           {showAppointments && (\n//             <div className=\"px-4 pb-4\">\n//               {appointments.length > 0 ? (\n//                 appointments.map((appointment, index) => (\n//                   <div\n//                     key={index}\n//                     className=\"flex justify-between items-center py-2 border-t\"\n//                   >\n//                     <div>\n//                       <p className=\"text-sm font-medium\">\n//                         {appointment.patientId.firstName} {appointment.patientId.lastName}\n//                       </p>\n//                       <p className=\"text-xs text-gray-500\">{appointment.reason}</p>\n//                     </div>\n//                     <div className=\"flex items-center gap-3\">\n//                       <p className=\"text-sm text-nowrap\">{appointment.time}</p>\n\n//                       {/* Mark as Completed */}\n//                       <button\n//                         onClick={() => handleUpdateStatus(appointment._id, 'completed')}\n//                         className=\"text-green-600 hover:text-green-800\"\n//                         title=\"Mark as Completed\"\n//                       >\n//                         <CheckCircle className=\"h-5 w-5\" />\n//                       </button>\n\n//                       {/* Cancel Appointment */}\n//                       <button\n//                         onClick={() => handleUpdateStatus(appointment._id, 'cancelled')}\n//                         className=\"text-red-600 hover:text-red-800\"\n//                         title=\"Cancel Appointment\"\n//                       >\n//                         <XCircle className=\"h-5 w-5\" />\n//                       </button>\n//                     </div>\n//                   </div>\n//                 ))\n//               ) : (\n//                 <p className=\"text-sm text-gray-500 text-center py-4\">\n//                   No appointments scheduled for today\n//                 </p>\n//               )}\n//             </div>\n//           )}\n\n//         </Card>\n//         <Card>\n//           <CardHeader icon={Users}>\n//             <CardTitle className=\"text-sm font-medium\">Patients</CardTitle>\n//           </CardHeader>\n//           <CardContent>\n//             <div className=\"text-2xl font-bold\">{patients.length}</div>\n//             <p className=\"text-xs text-gray-500\">Total patients under care</p>\n//           </CardContent>\n//           <CardFooter className=\"p-2\">\n//             <Button \n//               variant=\"ghost\" \n//               className=\"w-full text-sm text-gray-500 hover:text-gray-900 transition-colors\"\n//               onClick={() => setShowPatients(!showPatients)}\n//             >\n//               {showPatients ? \"Hide\" : \"View All\"} Patients\n//               <ChevronDown className={`h-4 w-4 ml-2 transition-transform ${showPatients ? \"rotate-180\" : \"\"}`} />\n//             </Button>\n//           </CardFooter>\n//           {showPatients && (\n//             <div className=\"px-4 pb-4\">\n//               {patients.map((patient, index) => (\n//                 <div key={index} className=\"py-2 border-t\">\n//                   <p className=\"text-sm font-medium\">\n//                     {patient.firstName} {patient.lastName}\n//                   </p>\n//                   <p className=\"text-xs text-gray-500\">\n//                     Last visit: {patient.lastVisit ? new Date(patient.lastVisit).toLocaleDateString('en-GB') : 'N/A'} | Next: {patient.nextAppointment ? new Date(patient.nextAppointment).toLocaleDateString('en-GB') : 'N/A'}\n//                   </p>\n//                 </div>\n//               ))}\n//             </div>\n//           )}\n//         </Card>\n//       </div>\n//       <div className=\"mt-8 grid grid-cols-1 md:grid-cols-2 gap-6\">\n//       <Card>\n//         <CardHeader>\n//           <CardTitle>Recent Activity</CardTitle>\n//         </CardHeader>\n//         <CardContent>\n//           <ul className=\"space-y-2\">\n//             {completedAppointments.slice(0, 3).map((appointment, index) => (\n//               <li key={appointment._id || index} className=\"flex items-center space-x-2\">\n//                 <Clock className=\"h-4 w-4 text-blue-600\" />\n//                 <span>\n//                   {appointment.status === \"completed\" ? \"Completed\" : \"Cancelled\"} appointment with{\" \"}\n//                   <strong>\n//                     {appointment.patientId?.firstName} {appointment.patientId?.lastName}\n//                   </strong>{\" \"}\n//                   on {new Date(appointment.date).toLocaleDateString()} at {appointment.time}\n//                 </span>\n//               </li>\n//             ))}\n\n//             {/* Static fallback if no completed appointments */}\n//             {completedAppointments.length === 0 && (\n//               <>\n//                 <li className=\"flex items-center space-x-2\">\n//                   <FileText className=\"h-4 w-4 text-gray-400\" />\n//                   <span className=\"text-gray-400\">No records found.</span>\n//                 </li>\n//               </>\n//             )}\n//           </ul>\n//         </CardContent>\n//       </Card>\n\n//       <Card>\n//         <CardHeader>\n//           <CardTitle>Upcoming Schedule</CardTitle>\n//         </CardHeader>\n//         <CardContent>\n//           <ul className=\"space-y-2\">\n//             {upcomingAppointments.slice(0, 3).map((appointment, index) => (\n//               <li key={appointment._id || index} className=\"flex items-center space-x-2\">\n//                 <Calendar className=\"h-4 w-4 text-blue-600\" />\n//                 <span>\n//                   Appointment with{\" \"}\n//                   <strong>\n//                     {appointment.patientId?.firstName} {appointment.patientId?.lastName}\n//                   </strong>{\" \"}\n//                   on {new Date(appointment.date).toLocaleDateString()} at {appointment.time}. <span className=\"text-gray-500\">{\"(\" + appointment.reason + \")\"}</span>\n//                 </span>\n//               </li>\n//             ))}\n\n//             {/* Fallback if there are no upcoming appointments */}\n//             {upcomingAppointments.length === 0 && (\n//               <>\n//                 <li className=\"flex items-center space-x-2\">\n//                   <Clock className=\"h-4 w-4 text-gray-400\" />\n//                   <span className=\"text-gray-400\">No upcoming schedule.</span>\n//                 </li>\n//               </>\n//             )}\n//           </ul>\n//         </CardContent>\n//       </Card>\n\n//       </div>\n//     </>\n//   );\n\n//   const renderProfile = () => {\n//     const handleInputChange = (e) => {\n//       const { name, value } = e.target;\n//       setEditedInfo(prev => ({ ...prev, [name]: value }));\n//     };\n\n//     const handleSave = async () => {\n//       try {\n//         const token = localStorage.getItem('token');\n//         const response = await fetch(BASE_URL + '/doctor/profile', {\n//           method: 'PUT',\n//           headers: {\n//             'Content-Type': 'application/json',\n//             'Authorization': `Bearer ${token}`\n//           },\n//           body: JSON.stringify(editedInfo)\n//         });\n//         if (response.ok) {\n//           const updatedProfile = await response.json();\n//           setDoctorInfo(updatedProfile);\n//           setIsEditing(false);\n//           return toast.success(\"Profile updated successfully.\");\n//         } else {\n//           await response.json();\n//           return toast.success(\"Failed to update profile.\");\n//         }\n//       } catch (error) {\n//         alert('Error updating doctor profile. Please try again.');\n//       }\n//     };\n\n//     return (\n//       <Card className=\"w-full max-w-2xl mx-auto\">\n//         <CardHeader>\n//           <CardTitle>Doctor Profile</CardTitle>\n//         </CardHeader>\n//         <CardContent>\n//           <form className=\"space-y-4\">\n//             <div className=\"grid grid-cols-2 gap-4\">\n//               <div className=\"space-y-2\">\n//                 <Label htmlFor=\"firstName\">First Name</Label>\n//                 <Input\n//                   id=\"firstName\"\n//                   name=\"firstName\"\n//                   value={isEditing ? editedInfo.firstName : doctorInfo?.firstName}\n//                   onChange={handleInputChange}\n//                   readOnly={!isEditing}\n//                 />\n//               </div>\n//               <div className=\"space-y-2\">\n//                 <Label htmlFor=\"lastName\">Last Name</Label>\n//                 <Input\n//                   id=\"lastName\"\n//                   name=\"lastName\"\n//                   value={isEditing ? editedInfo.lastName : doctorInfo?.lastName}\n//                   onChange={handleInputChange}\n//                   readOnly={!isEditing}\n//                 />\n//               </div>\n//             </div>\n//             <div className=\"space-y-2\">\n//               <Label htmlFor=\"email\">Email</Label>\n//               <Input\n//                 id=\"email\"\n//                 name=\"email\"\n//                 type=\"email\"\n//                 value={isEditing ? editedInfo.email : doctorInfo?.email}\n//                 onChange={handleInputChange}\n//                 readOnly={!isEditing}\n//               />\n//             </div>\n//             <div className=\"space-y-2\">\n//               <Label htmlFor=\"specialty\">Specialty</Label>\n//               <Input\n//                 id=\"specialty\"\n//                 name=\"specialty\"\n//                 value={isEditing ? editedInfo.specialty : doctorInfo?.specialty}\n//                 onChange={handleInputChange}\n//                 readOnly={!isEditing}\n//               />\n//             </div>\n//             <div className=\"space-y-2\">\n//               <Label htmlFor=\"licenseNumber\">License Number</Label>\n//               <Input\n//                 id=\"licenseNumber\"\n//                 name=\"licenseNumber\"\n//                 value={isEditing ? editedInfo.licenseNumber : doctorInfo?.licenseNumber}\n//                 onChange={handleInputChange}\n//                 readOnly={!isEditing}\n//               />\n//             </div>\n//             <div className=\"space-y-2\">\n//               <Label htmlFor=\"phoneNumber\">Phone Number</Label>\n//               <Input\n//                 id=\"phoneNumber\"\n//                 name=\"phoneNumber\"\n//                 value={isEditing ? editedInfo.phoneNumber : doctorInfo?.phoneNumber}\n//                 onChange={handleInputChange}\n//                 readOnly={!isEditing}\n//               />\n//             </div>\n//           </form>\n//         </CardContent>\n//         <CardFooter>\n//           {isEditing ? (\n//             <>\n//               <Button onClick={handleSave} className=\"mr-2\">Save</Button>\n//               <Button onClick={() => setIsEditing(false)} variant=\"outline\">Cancel</Button>\n//             </>\n//           ) : (\n//             <Button onClick={() => setIsEditing(true)} className=\"ml-auto\">Edit Profile</Button>\n//           )}\n//         </CardFooter>\n//       </Card>\n//     );\n//   };\n\n//   const renderPatientManagement = () => {\n//     const handleInputChange = (e) => {\n//       const { name, value } = e.target;\n//       setAppointmentData(prev => ({ ...prev, [name]: value }));\n\n//       if (name === 'action') {\n//         setSelectedAction(value);\n//       }\n\n//       if (name === 'patientId') {\n//         fetchExistingPrescriptions(value);\n//       }\n\n//       if (name === 'date' || name === 'patientId') {\n//         fetchAvailableSlots(appointmentData.patientId, value);\n//       }\n//     };\n\n//     const fetchAvailableSlots = async (patientId, date) => {\n//       if (!patientId || !date) return;\n//       try {\n//         const token = localStorage.getItem('token');\n//         const response = await fetch(BASE_URL + `/doctor/available-slots?patientId=${patientId}&date=${date}`, {\n//           headers: {\n//             'Authorization': `Bearer ${token}`\n//           }\n//         });\n//         if (response.ok) {\n//           const slots = await response.json();\n//           setAvailableSlots(slots);\n//         } else {\n//           console.error('Failed to fetch available slots');\n//           setAvailableSlots([]);\n//           return toast.error(\"Failed to fetch available slots\");\n//         }\n//       } catch (error) {\n//         console.error('Error fetching available slots:', error);\n//         setAvailableSlots([]);\n//       }\n//     };\n\n//     const handleEditPrescription = (prescription) => {\n//       setAppointmentData({\n//         ...appointmentData,\n//         prescriptionId: prescription._id,\n//         medication: prescription.medication || '',\n//         dosage: prescription.dosage || '',\n//         frequency: prescription.frequency || '',\n//         tilldate: prescription.tilldate || ''\n//       });\n//       setSelectedAction('prescribe-medication');\n//     };\n\n//     const handleDeletePrescription = async (prescriptionId) => {\n//       if (window.confirm('Are you sure you want to delete this prescription?')) {\n//         try {\n//           const token = localStorage.getItem('token');\n//           const response = await fetch(BASE_URL + `/doctor/prescriptions/${prescriptionId}`, {\n//             method: 'DELETE',\n//             headers: {\n//               'Authorization': `Bearer ${token}`\n//             }\n//           });\n//           if (response.ok) {\n//             fetchExistingPrescriptions(appointmentData.patientId);\n//             return toast.success('Prescription deleted successfully.');\n//           } else {\n//             const errorData = await response.json();\n//             console.error('Error details:', errorData.details);\n//             return toast.error(`Failed to delete prescription.`);\n//           }\n//         } catch (error) {\n//           alert('Error deleting prescription. Please try again.');\n//           console.error('Error deleting prescription:', error);\n//         }\n//       }\n//     };\n\n//     const handleSubmit = async (e) => {\n//       e.preventDefault();\n//       if (selectedAction === 'prescribe-medication') {\n//         try {\n//           const token = localStorage.getItem('token');\n//           const url = appointmentData.prescriptionId\n//             ? BASE_URL + `/doctor/prescriptions/${appointmentData.prescriptionId}`\n//             : BASE_URL + '/doctor/prescribe-medication';\n//           const method = appointmentData.prescriptionId ? 'PUT' : 'POST';\n//           const response = await fetch(url, {\n//             method,\n//             headers: {\n//               'Content-Type': 'application/json',\n//               'Authorization': `Bearer ${token}`\n//             },\n//             body: JSON.stringify({\n//               doctorId: appointmentData.doctorId,\n//               patientId: appointmentData.patientId,\n//               medication: appointmentData.medication,\n//               dosage: appointmentData.dosage,\n//               frequency: appointmentData.frequency,\n//               tilldate: appointmentData.tilldate\n//             })\n//           });\n//           if (response.ok) {\n//             //const result = \n//             await response.json();\n//             setAppointmentData({\n//               ...appointmentData,\n//               prescriptionId: '',\n//               medication: '',\n//               dosage: '',\n//               frequency: '',\n//               tilldate: ''\n//             });\n//             fetchExistingPrescriptions(appointmentData.patientId);\n//             setSelectedAction('');\n//             fetchExistingPrescriptions();\n//             return toast.success(appointmentData.prescriptionId ? 'Medication updated successfully' : 'Medication prescribed successfully');\n//           } else {\n//             const errorData = await response.json();\n//             return toast.error(`Failed to ${appointmentData.prescriptionId ? 'update' : 'prescribe'} medication: ${errorData.error}`);\n//           }\n//         } catch (error) {\n//           alert(`Error ${appointmentData.prescriptionId ? 'updating' : 'prescribing'} medication. Please try again.`);\n//         }\n//       } else if (selectedAction === 'schedule-appointment') {\n//         try {\n//           const token = localStorage.getItem('token');\n//           const response = await fetch(BASE_URL + '/doctor/schedule-appointment', {\n//             method: 'POST',\n//             headers: {\n//               'Content-Type': 'application/json',\n//               'Authorization': `Bearer ${token}`\n//             },\n//             body: JSON.stringify({\n//               patientId: appointmentData.patientId,\n//               date: appointmentData.date,\n//               time: appointmentData.time,\n//               reason: appointmentData.reason\n//             })\n//           });\n//           if (response.ok) {\n//             setAppointmentData({\n//               patientId: '',\n//               date: '',\n//               time: '',\n//               reason: '',\n//               prescriptionId: '',\n//               medication: '',\n//               dosage: '',\n//               frequency: '',\n//               tilldate: ''\n//             });\n//             setSelectedAction('');\n//             fetchAppointments();\n//             fetchUpcomingAppointments();\n//             return toast.success('Appointment scheduled successfully.');\n//           } else {\n//             const errorData = await response.json();\n//             return toast.error(`Failed to schedule appointment: ${errorData.error}`);\n//           }\n//         } catch (error) {\n//           alert('Error scheduling appointment. Please try again.');\n//         }\n//       }\n//     };\n\n//     return (\n//       <Card className=\"w-full max-w-2xl mx-auto\">\n//         <CardHeader>\n//           <CardTitle>Patient Management</CardTitle>\n//         </CardHeader>\n//         <CardContent>\n//           <form onSubmit={handleSubmit} className=\"space-y-4\">\n//             <div className=\"space-y-2\">\n//               <Label htmlFor=\"patient\">Select Patient</Label>\n//               <Select id=\"patient\" name=\"patientId\" value={appointmentData.patientId} onChange={handleInputChange}>\n//                 <option value=\"\">Choose a patient</option>\n//                 {patients.map((patient) => (\n//                   <option key={patient._id} value={patient._id}>\n//                     {patient.firstName} {patient.lastName}\n//                   </option>\n//                 ))}\n//               </Select>\n//             </div>\n//             <div className=\"space-y-2\">\n//               <Label htmlFor=\"action\">Action</Label>\n//               <Select id=\"action\" name=\"action\" value={selectedAction} onChange={handleInputChange}>\n//                 <option value=\"\">Choose an action</option>\n//                 <option value=\"schedule-appointment\">Schedule Appointment</option>\n//                 <option value=\"prescribe-medication\">Prescribe Medication</option>\n//               </Select>\n//             </div>\n//             {selectedAction === 'schedule-appointment' && (\n//               <>\n//                 <div className=\"space-y-2\">\n//                   <Label htmlFor=\"date\">Appointment Date</Label>\n//                   <Input id=\"date\" name=\"date\" type=\"date\" value={appointmentData.date} onChange={handleInputChange} />\n//                 </div>\n//                 <div className=\"space-y-2\">\n//                   <Label htmlFor=\"time\">Preferred Time</Label>\n//                   <Select id=\"time\" name=\"time\" value={appointmentData.time} onChange={handleInputChange} disabled={availableSlots.length === 0}>\n//                     <option value=\"\">Choose a time slot</option>\n//                     {availableSlots.map((slot) => (\n//                       <option key={slot} value={slot}>{slot}</option>\n//                     ))}\n//                   </Select>\n//                 </div>\n//                 <div className=\"space-y-2\">\n//                   <Label htmlFor=\"reason\">Reason for Visit</Label>\n//                   <Input id=\"reason\" name=\"reason\" value={appointmentData.reason} onChange={handleInputChange} placeholder=\"Brief description of your concern\" />\n//                 </div>\n//               </>\n//             )}\n//             {selectedAction === 'prescribe-medication' && (\n//               <>\n//                 {existingPrescriptions.length > 0 && (\n//                   <div className=\"space-y-2 mb-4\">\n//                     <Label>Existing Prescriptions</Label>\n//                     {existingPrescriptions.map((prescription) => (\n//                       <div key={prescription._id} className=\"flex items-center justify-between bg-gray-100 p-2 rounded\">\n//                         <span>{prescription.medication} - {prescription.dosage} - {prescription.frequency} - {\" (Till - \"}{new Date(prescription.tilldate).toLocaleDateString()}{\") \"}</span>\n//                         <div>\n//                           <Button type=\"button\" onClick={() => handleEditPrescription(prescription)} variant=\"outline\" size=\"sm\" className=\"mr-2\">Edit</Button>\n//                           <Button onClick={() => handleDeletePrescription(prescription._id)} variant=\"outline\" size=\"sm\">Delete</Button>\n//                         </div>\n//                       </div>\n//                     ))}\n//                   </div>\n//                 )}\n//                 <div className=\"space-y-2\">\n//                   <Label htmlFor=\"medication\">Medication</Label>\n//                   <Input id=\"medication\" name=\"medication\" value={appointmentData.medication || ''} onChange={handleInputChange} placeholder=\"Medication name\" />\n//                 </div>\n//                 <div className=\"space-y-2\">\n//                   <Label htmlFor=\"dosage\">Dosage</Label>\n//                   <Input id=\"dosage\" name=\"dosage\" value={appointmentData.dosage || ''} onChange={handleInputChange} placeholder=\"Dosage\" />\n//                 </div>\n//                 <div className=\"space-y-2\">\n//                   <Label htmlFor=\"frequency\">Frequency</Label>\n//                   <Input id=\"frequency\" name=\"frequency\" value={appointmentData.frequency || ''} onChange={handleInputChange} placeholder=\"Frequency\" />\n//                 </div>\n//                 <div className=\"space-y-2\">\n//                   <Label htmlFor=\"tilldate\">Till Date</Label>\n//                   <Input id=\"tilldate\" name=\"tilldate\" type=\"date\" value={formatDate(appointmentData.tilldate) || ''} onChange={handleInputChange} />\n//                 </div>\n//               </>\n//             )}\n//             <Button type=\"submit\" className=\"ml-auto\">\n//               {selectedAction === 'prescribe-medication' ? (appointmentData.prescriptionId ? 'Update Prescription' : 'Prescribe Medication') : 'Schedule Appointment'}\n//             </Button>\n//           </form>\n//         </CardContent>\n//       </Card>\n//     );\n//   };\n\n//   return (\n//     <div className=\"min-h-screen bg-blue-600\">\n//       <header className=\"bg-white p-4 flex justify-between items-center\">\n//         <div className=\"flex items-center space-x-2\">\n//           <Hospital className=\"h-6 w-6 text-blue-600\" />\n//           <span className=\"font-bold text-xl\">Sri Kumaran Clinic</span>\n//         </div>\n//         <Button variant=\"outline\" onClick={() => navigate('/')}>Sign Out</Button>\n//       </header>\n//       <nav className=\"bg-blue-700 text-white p-4\">\n//         <ul className=\"flex space-x-4 justify-center\">\n//           <li>\n//             <Button\n//               variant={activeTab === 'Dashboard' ? \"outline\" : \"ghost\"}\n//               className={`hover:bg-white hover:text-blue-600 ${activeTab === 'Dashboard' ? 'bg-white text-blue-600' : 'text-white'}`}\n//               onClick={() => setActiveTab('Dashboard')}\n//             >\n//               <Home className=\"w-4 h-4 mr-2\" />\n//               Dashboard\n//             </Button>\n//           </li>\n//           <li>\n//             <Button\n//               variant={activeTab === 'Profile' ? \"outline\" : \"ghost\"}\n//               className={`hover:bg-white hover:text-blue-600 ${activeTab === 'Profile' ? 'bg-white text-blue-600' : 'text-white'}`}\n//               onClick={() => setActiveTab('Profile')}\n//             >\n//               <UserCircle className=\"w-4 h-4 mr-2\" />\n//               Profile\n//             </Button>\n//           </li>\n//           <li>\n//             <Button\n//               variant={activeTab === 'Patient Management' ? \"outline\" : \"ghost\"}\n//               className={`hover:bg-white hover:text-blue-600 ${activeTab === 'Patient Management' ? 'bg-white text-blue-600' : 'text-white'}`}\n//               onClick={() => setActiveTab('Patient Management')}\n//             >\n//               <Users className=\"w-4 h-4 mr-2\" />\n//               Patient Management\n//             </Button>\n//           </li>\n//         </ul>\n//       </nav>\n//       <main className=\"container mx-auto px-4 py-8\">\n//         <h1 className=\"text-4xl font-bold text-white mb-8\">Welcome, Dr. {doctorInfo?.firstName} {doctorInfo?.lastName}</h1>\n//         {activeTab === 'Dashboard' && renderDashboard()}\n//         {activeTab === 'Profile' && renderProfile()}\n//         {activeTab === 'Patient Management' && renderPatientManagement()}\n//       </main>\n//     </div>\n//   );\n// }\n\nimport React, { useState, useEffect } from 'react';\nimport { FileText, Plus, ChevronDown, ChevronUp } from 'lucide-react';\nimport { toast } from \"react-hot-toast\";\nimport { BASE_URL } from '../constants/constants';\n\nconst Button = ({ children, variant = 'primary', className = '', ...props }) => (\n  <button\n    className={`inline-flex items-center justify-center px-4 py-2 text-sm font-medium rounded-md shadow-sm transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 ${\n      variant === 'primary'\n        ? 'text-white bg-blue-600 hover:bg-blue-700 focus:ring-blue-500'\n        : variant === 'outline'\n        ? 'text-blue-600 border border-blue-600 hover:bg-blue-50 focus:ring-blue-500'\n        : 'text-blue-600 border-blue-600 hover:bg-blue-50 focus:ring-blue-500'\n    } ${className}`}\n    {...props}\n  >\n    {children}\n  </button>\n);\n\nconst Card = ({ children, className = '' }) => (\n  <div className={`bg-white rounded-lg shadow-md ${className}`}>\n    {children}\n  </div>\n);\n\nconst CardHeader = ({ children, icon: Icon }) => (\n  <div className=\"px-4 py-5 border-b border-gray-200 sm:px-6 flex items-center justify-between\">\n    {children}\n    {Icon && <Icon className=\"h-5 w-5 text-blue-600 ml-2\" />}\n  </div>\n);\n\nconst CardTitle = ({ children }) => (\n  <h3 className=\"text-lg leading-6 font-medium text-gray-900\">{children}</h3>\n);\n\nconst CardContent = ({ children }) => (\n  <div className=\"px-4 py-5 sm:p-6\">{children}</div>\n);\n\nconst CardFooter = ({ children }) => (\n  <div className=\"px-4 py-4 border-t border-gray-200 sm:px-6\">{children}</div>\n);\n\nconst Input = ({ ...props }) => (\n  <input\n    className=\"mt-1 focus:ring-blue-500 focus:border-blue-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md px-2 py-1\"\n    {...props}\n  />\n);\n\nconst Textarea = ({ ...props }) => (\n  <textarea\n    className=\"mt-1 focus:ring-blue-500 focus:border-blue-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md px-2 py-1\"\n    rows={3}\n    {...props}\n  />\n);\n\nconst Label = ({ children, htmlFor }) => (\n  <label htmlFor={htmlFor} className=\"block text-sm font-medium text-gray-700\">\n    {children}\n  </label>\n);\n\nconst Select = ({ children, ...props }) => (\n  <select\n    className=\"mt-1 block w-full pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md\"\n    {...props}\n  >\n    {children}\n  </select>\n);\n\nconst TreatmentRecords = ({ patients }) => {\n  const [selectedPatient, setSelectedPatient] = useState('');\n  const [formMode, setFormMode] = useState('create'); // 'create' or 'view'\n  const [showForm, setShowForm] = useState(false);\n  const [patientRecords, setPatientRecords] = useState([]);\n  const [selectedRecord, setSelectedRecord] = useState(null);\n  const [expandedRecordId, setExpandedRecordId] = useState(null);\n  const [formData, setFormData] = useState({\n    height: '',\n    weight: '',\n    bloodPressure: '',\n    bloodSugar: '',\n    temperature: '',\n    pulseRate: '',\n    chiefComplaint: '',\n    diagnosis: '',\n    notes: '',\n    followUpDate: '',\n    followUpInstructions: '',\n    // Prescription fields are handled separately in the doctor dashboard\n  });\n\n  useEffect(() => {\n    if (selectedPatient) {\n      fetchPatientRecords(selectedPatient);\n    } else {\n      setPatientRecords([]);\n    }\n  }, [selectedPatient]);\n\n  const fetchPatientRecords = async (patientId) => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await fetch(`${BASE_URL}/doctor/treatment-records/${patientId}`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      \n      if (response.ok) {\n        const data = await response.json();\n        setPatientRecords(data);\n      } else {\n        toast.error('Failed to fetch patient records');\n      }\n    } catch (error) {\n      console.error('Error fetching patient records:', error);\n      toast.error('Error fetching patient records');\n    }\n  };\n\n  const handlePatientChange = (e) => {\n    setSelectedPatient(e.target.value);\n    setShowForm(false);\n    setFormMode('create');\n    resetForm();\n  };\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n  };\n\n  const resetForm = () => {\n    setFormData({\n      height: '',\n      weight: '',\n      bloodPressure: '',\n      bloodSugar: '',\n      temperature: '',\n      pulseRate: '',\n      chiefComplaint: '',\n      diagnosis: '',\n      notes: '',\n      followUpDate: '',\n      followUpInstructions: '',\n    });\n    setSelectedRecord(null);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    try {\n      const token = localStorage.getItem('token');\n      const url = formMode === 'create' \n        ? `${BASE_URL}/doctor/treatment-records` \n        : `${BASE_URL}/doctor/treatment-records/${selectedRecord._id}`;\n      \n      const method = formMode === 'create' ? 'POST' : 'PUT';\n      \n      const response = await fetch(url, {\n        method,\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          ...formData,\n          patientId: selectedPatient,\n        })\n      });\n      \n      if (response.ok) {\n        toast.success(formMode === 'create' \n          ? 'Treatment record created successfully' \n          : 'Treatment record updated successfully');\n        fetchPatientRecords(selectedPatient);\n        setShowForm(false);\n        resetForm();\n      } else {\n        const errorData = await response.json();\n        toast.error(`Failed to ${formMode} record: ${errorData.error}`);\n      }\n    } catch (error) {\n      console.error(`Error ${formMode === 'create' ? 'creating' : 'updating'} treatment record:`, error);\n      toast.error(`Error ${formMode === 'create' ? 'creating' : 'updating'} treatment record`);\n    }\n  };\n\n  const handleViewRecord = (record) => {\n    setFormData({\n      height: record.height || '',\n      weight: record.weight || '',\n      bloodPressure: record.bloodPressure || '',\n      bloodSugar: record.bloodSugar || '',\n      temperature: record.temperature || '',\n      pulseRate: record.pulseRate || '',\n      chiefComplaint: record.chiefComplaint || '',\n      diagnosis: record.diagnosis || '',\n      notes: record.notes || '',\n      followUpDate: record.followUpDate ? new Date(record.followUpDate).toISOString().split('T')[0] : '',\n      followUpInstructions: record.followUpInstructions || '',\n    });\n    setSelectedRecord(record);\n    setFormMode('view');\n    setShowForm(true);\n  };\n\n  const handleEditRecord = () => {\n    setFormMode('edit');\n  };\n\n  const toggleRecordDetails = (recordId) => {\n    setExpandedRecordId(expandedRecordId === recordId ? null : recordId);\n  };\n\n  const formatDate = (dateString) => {\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader icon={FileText}>\n        <CardTitle>Treatment Records</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"mb-4\">\n          <Label htmlFor=\"patient\">Select Patient</Label>\n          <Select id=\"patient\" value={selectedPatient} onChange={handlePatientChange}>\n            <option value=\"\">Choose a patient</option>\n            {patients.map((patient) => (\n              <option key={patient._id} value={patient._id}>\n                {patient.firstName} {patient.lastName}\n              </option>\n            ))}\n          </Select>\n        </div>\n\n        {selectedPatient && (\n          <div className=\"mt-4\">\n            <div className=\"flex justify-between items-center mb-4\">\n              <h4 className=\"text-lg font-medium\">Patient History</h4>\n              {!showForm && (\n                <Button onClick={() => { setFormMode('create'); setShowForm(true); resetForm(); }}>\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  New Record\n                </Button>\n              )}\n            </div>\n\n            {showForm ? (\n              <form onSubmit={handleSubmit} className=\"border p-4 rounded-md mb-6\">\n                <h4 className=\"font-medium mb-4\">\n                  {formMode === 'create' \n                    ? 'Create New Treatment Record' \n                    : formMode === 'edit' \n                    ? 'Edit Treatment Record' \n                    : 'View Treatment Record'}\n                </h4>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n                  <div>\n                    <Label htmlFor=\"visitDate\">Visit Date</Label>\n                    <Input\n                      id=\"visitDate\"\n                      name=\"visitDate\"\n                      type=\"date\"\n                      value={formData.visitDate ? new Date(formData.visitDate).toISOString().split('T')[0] : new Date().toISOString().split('T')[0]}\n                      onChange={handleInputChange}\n                      disabled={formMode === 'view'}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"chiefComplaint\">Chief Complaint*</Label>\n                    <Input\n                      id=\"chiefComplaint\"\n                      name=\"chiefComplaint\"\n                      value={formData.chiefComplaint}\n                      onChange={handleInputChange}\n                      required\n                      placeholder=\"Main reason for visit\"\n                      disabled={formMode === 'view'}\n                    />\n                  </div>\n                </div>\n\n                <h5 className=\"font-medium mb-2 text-sm text-gray-600\">Vital Signs</h5>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\n                  <div>\n                    <Label htmlFor=\"height\">Height (cm)</Label>\n                    <Input\n                      id=\"height\"\n                      name=\"height\"\n                      type=\"number\"\n                      value={formData.height}\n                      onChange={handleInputChange}\n                      placeholder=\"Height in cm\"\n                      disabled={formMode === 'view'}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"weight\">Weight (kg)</Label>\n                    <Input\n                      id=\"weight\"\n                      name=\"weight\"\n                      type=\"number\"\n                      value={formData.weight}\n                      onChange={handleInputChange}\n                      placeholder=\"Weight in kg\"\n                      disabled={formMode === 'view'}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"temperature\">Temperature (Â°C)</Label>\n                    <Input\n                      id=\"temperature\"\n                      name=\"temperature\"\n                      type=\"number\"\n                      step=\"0.1\"\n                      value={formData.temperature}\n                      onChange={handleInputChange}\n                      placeholder=\"Temperature in Â°C\"\n                      disabled={formMode === 'view'}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"bloodPressure\">Blood Pressure</Label>\n                    <Input\n                      id=\"bloodPressure\"\n                      name=\"bloodPressure\"\n                      value={formData.bloodPressure}\n                      onChange={handleInputChange}\n                      placeholder=\"e.g., 120/80\"\n                      disabled={formMode === 'view'}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"pulseRate\">Pulse Rate (bpm)</Label>\n                    <Input\n                      id=\"pulseRate\"\n                      name=\"pulseRate\"\n                      type=\"number\"\n                      value={formData.pulseRate}\n                      onChange={handleInputChange}\n                      placeholder=\"Beats per minute\"\n                      disabled={formMode === 'view'}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"bloodSugar\">Blood Sugar</Label>\n                    <Input\n                      id=\"bloodSugar\"\n                      name=\"bloodSugar\"\n                      value={formData.bloodSugar}\n                      onChange={handleInputChange}\n                      placeholder=\"e.g., 100 mg/dL\"\n                      disabled={formMode === 'view'}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"mb-4\">\n                  <Label htmlFor=\"diagnosis\">Diagnosis</Label>\n                  <Input\n                    id=\"diagnosis\"\n                    name=\"diagnosis\"\n                    value={formData.diagnosis}\n                    onChange={handleInputChange}\n                    placeholder=\"Diagnosis\"\n                    disabled={formMode === 'view'}\n                  />\n                </div>\n\n                <div className=\"mb-4\">\n                  <Label htmlFor=\"notes\">Notes</Label>\n                  <Textarea\n                    id=\"notes\"\n                    name=\"notes\"\n                    value={formData.notes}\n                    onChange={handleInputChange}\n                    placeholder=\"Additional notes about the patient's condition\"\n                    disabled={formMode === 'view'}\n                  />\n                </div>\n\n                <h5 className=\"font-medium mb-2 text-sm text-gray-600\">Follow-up</h5>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n                  <div>\n                    <Label htmlFor=\"followUpDate\">Follow-up Date</Label>\n                    <Input\n                      id=\"followUpDate\"\n                      name=\"followUpDate\"\n                      type=\"date\"\n                      value={formData.followUpDate}\n                      onChange={handleInputChange}\n                      disabled={formMode === 'view'}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"followUpInstructions\">Follow-up Instructions</Label>\n                    <Input\n                      id=\"followUpInstructions\"\n                      name=\"followUpInstructions\"\n                      value={formData.followUpInstructions}\n                      onChange={handleInputChange}\n                      placeholder=\"Special instructions for follow-up\"\n                      disabled={formMode === 'view'}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"flex justify-end gap-2 mt-4\">\n                  {formMode === 'view' ? (\n                    <>\n                      <Button type=\"button\" onClick={handleEditRecord}>\n                        Edit Record\n                      </Button>\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        onClick={() => { setShowForm(false); resetForm(); }}\n                      >\n                        Close\n                      </Button>\n                    </>\n                  ) : (\n                    <>\n                      <Button type=\"submit\">\n                        {formMode === 'create' ? 'Create Record' : 'Update Record'}\n                      </Button>\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        onClick={() => { setShowForm(false); resetForm(); }}\n                      >\n                        Cancel\n                      </Button>\n                    </>\n                  )}\n                </div>\n              </form>\n            ) : (\n              patientRecords.length > 0 ? (\n                <div className=\"space-y-4\">\n                  {patientRecords.map((record) => (\n                    <div key={record._id} className=\"border rounded-md overflow-hidden\">\n                      <div \n                        className=\"flex justify-between items-center p-3 bg-gray-50 cursor-pointer\"\n                        onClick={() => toggleRecordDetails(record._id)}\n                      >\n                        <div>\n                          <p className=\"font-medium\">Visit: {formatDate(record.visitDate || record.createdAt)}</p>\n                          <p className=\"text-sm text-gray-600\">{record.chiefComplaint}</p>\n                        </div>\n                        <div className=\"flex items-center gap-4\">\n                          <Button\n                            type=\"button\"\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              handleViewRecord(record);\n                            }}\n                          >\n                            View/Edit\n                          </Button>\n                          {expandedRecordId === record._id ? (\n                            <ChevronUp className=\"h-5 w-5\" />\n                          ) : (\n                            <ChevronDown className=\"h-5 w-5\" />\n                          )}\n                        </div>\n                      </div>\n                      \n                      {expandedRecordId === record._id && (\n                        <div className=\"p-4 border-t\">\n                          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n                            <div>\n                              <p className=\"text-sm font-medium\">Vital Signs</p>\n                              <ul className=\"text-sm\">\n                                {record.height && <li>Height: {record.height} cm</li>}\n                                {record.weight && <li>Weight: {record.weight} kg</li>}\n                                {record.bloodPressure && <li>BP: {record.bloodPressure}</li>}\n                                {record.bloodSugar && <li>Blood Sugar: {record.bloodSugar}</li>}\n                                {record.temperature && <li>Temperature: {record.temperature} Â°C</li>}\n                                {record.pulseRate && <li>Pulse: {record.pulseRate} bpm</li>}\n                              </ul>\n                            </div>\n                            <div>\n                              <p className=\"text-sm font-medium\">Diagnosis</p>\n                              <p className=\"text-sm\">{record.diagnosis || 'Not specified'}</p>\n                              \n                              {record.notes && (\n                                <>\n                                  <p className=\"text-sm font-medium mt-2\">Notes</p>\n                                  <p className=\"text-sm\">{record.notes}</p>\n                                </>\n                              )}\n                              \n                              {record.followUpDate && (\n                                <>\n                                  <p className=\"text-sm font-medium mt-2\">Follow-up</p>\n                                  <p className=\"text-sm\">\n                                    Date: {formatDate(record.followUpDate)}\n                                    {record.followUpInstructions && ` - ${record.followUpInstructions}`}\n                                  </p>\n                                </>\n                              )}\n                            </div>\n                          </div>\n                          \n                          {record.prescriptions && record.prescriptions.length > 0 && (\n                            <div className=\"mt-2\">\n                              <p className=\"text-sm font-medium\">Prescriptions</p>\n                              <ul className=\"text-sm\">\n                                {record.prescriptions.map((prescription, idx) => (\n                                  <li key={idx} className=\"mb-1\">\n                                    {prescription.medication}: {prescription.dosage}, {prescription.frequency}, \n                                    Until: {formatDate(prescription.tilldate)}\n                                  </li>\n                                ))}\n                              </ul>\n                            </div>\n                          )}\n                        </div>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <p className=\"text-center text-gray-500 my-8\">No treatment records found for this patient.</p>\n              )\n            )}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default TreatmentRecords;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,QAAQ,EAAEC,IAAI,EAAEC,WAAW,EAAEC,SAAS,QAAQ,cAAc;AACrE,SAASC,KAAK,QAAQ,iBAAiB;AACvC,SAASC,QAAQ,QAAQ,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAElD,MAAMC,MAAM,GAAGA,CAAC;EAAEC,QAAQ;EAAEC,OAAO,GAAG,SAAS;EAAEC,SAAS,GAAG,EAAE;EAAE,GAAGC;AAAM,CAAC,kBACzEP,OAAA;EACEM,SAAS,EAAE,oKACTD,OAAO,KAAK,SAAS,GACjB,8DAA8D,GAC9DA,OAAO,KAAK,SAAS,GACrB,2EAA2E,GAC3E,oEAAoE,IACtEC,SAAS,EAAG;EAAA,GACZC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}